// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysqlx_notice.proto

#ifndef PROTOBUF_mysqlx_5fnotice_2eproto__INCLUDED
#define PROTOBUF_mysqlx_5fnotice_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "mysqlx_datatypes.pb.h"
// @@protoc_insertion_point(includes)
namespace Mysqlx {
namespace Datatypes {
class Any;
class AnyDefaultTypeInternal;
extern AnyDefaultTypeInternal _Any_default_instance_;
class Array;
class ArrayDefaultTypeInternal;
extern ArrayDefaultTypeInternal _Array_default_instance_;
class Object;
class ObjectDefaultTypeInternal;
extern ObjectDefaultTypeInternal _Object_default_instance_;
class Object_ObjectField;
class Object_ObjectFieldDefaultTypeInternal;
extern Object_ObjectFieldDefaultTypeInternal _Object_ObjectField_default_instance_;
class Scalar;
class ScalarDefaultTypeInternal;
extern ScalarDefaultTypeInternal _Scalar_default_instance_;
class Scalar_Octets;
class Scalar_OctetsDefaultTypeInternal;
extern Scalar_OctetsDefaultTypeInternal _Scalar_Octets_default_instance_;
class Scalar_String;
class Scalar_StringDefaultTypeInternal;
extern Scalar_StringDefaultTypeInternal _Scalar_String_default_instance_;
}  // namespace Datatypes
namespace Notice {
class Frame;
class FrameDefaultTypeInternal;
extern FrameDefaultTypeInternal _Frame_default_instance_;
class SessionStateChanged;
class SessionStateChangedDefaultTypeInternal;
extern SessionStateChangedDefaultTypeInternal _SessionStateChanged_default_instance_;
class SessionVariableChanged;
class SessionVariableChangedDefaultTypeInternal;
extern SessionVariableChangedDefaultTypeInternal _SessionVariableChanged_default_instance_;
class Warning;
class WarningDefaultTypeInternal;
extern WarningDefaultTypeInternal _Warning_default_instance_;
}  // namespace Notice
}  // namespace Mysqlx

namespace Mysqlx {
namespace Notice {

namespace protobuf_mysqlx_5fnotice_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_mysqlx_5fnotice_2eproto

enum Frame_Scope {
  Frame_Scope_GLOBAL = 1,
  Frame_Scope_LOCAL = 2
};
bool Frame_Scope_IsValid(int value);
const Frame_Scope Frame_Scope_Scope_MIN = Frame_Scope_GLOBAL;
const Frame_Scope Frame_Scope_Scope_MAX = Frame_Scope_LOCAL;
const int Frame_Scope_Scope_ARRAYSIZE = Frame_Scope_Scope_MAX + 1;

const ::google::protobuf::EnumDescriptor* Frame_Scope_descriptor();
inline const ::std::string& Frame_Scope_Name(Frame_Scope value) {
  return ::google::protobuf::internal::NameOfEnum(
    Frame_Scope_descriptor(), value);
}
inline bool Frame_Scope_Parse(
    const ::std::string& name, Frame_Scope* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Frame_Scope>(
    Frame_Scope_descriptor(), name, value);
}
enum Warning_Level {
  Warning_Level_NOTE = 1,
  Warning_Level_WARNING = 2,
  Warning_Level_ERROR = 3
};
bool Warning_Level_IsValid(int value);
const Warning_Level Warning_Level_Level_MIN = Warning_Level_NOTE;
const Warning_Level Warning_Level_Level_MAX = Warning_Level_ERROR;
const int Warning_Level_Level_ARRAYSIZE = Warning_Level_Level_MAX + 1;

const ::google::protobuf::EnumDescriptor* Warning_Level_descriptor();
inline const ::std::string& Warning_Level_Name(Warning_Level value) {
  return ::google::protobuf::internal::NameOfEnum(
    Warning_Level_descriptor(), value);
}
inline bool Warning_Level_Parse(
    const ::std::string& name, Warning_Level* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Warning_Level>(
    Warning_Level_descriptor(), name, value);
}
enum SessionStateChanged_Parameter {
  SessionStateChanged_Parameter_CURRENT_SCHEMA = 1,
  SessionStateChanged_Parameter_ACCOUNT_EXPIRED = 2,
  SessionStateChanged_Parameter_GENERATED_INSERT_ID = 3,
  SessionStateChanged_Parameter_ROWS_AFFECTED = 4,
  SessionStateChanged_Parameter_ROWS_FOUND = 5,
  SessionStateChanged_Parameter_ROWS_MATCHED = 6,
  SessionStateChanged_Parameter_TRX_COMMITTED = 7,
  SessionStateChanged_Parameter_TRX_ROLLEDBACK = 9,
  SessionStateChanged_Parameter_PRODUCED_MESSAGE = 10,
  SessionStateChanged_Parameter_CLIENT_ID_ASSIGNED = 11
};
bool SessionStateChanged_Parameter_IsValid(int value);
const SessionStateChanged_Parameter SessionStateChanged_Parameter_Parameter_MIN = SessionStateChanged_Parameter_CURRENT_SCHEMA;
const SessionStateChanged_Parameter SessionStateChanged_Parameter_Parameter_MAX = SessionStateChanged_Parameter_CLIENT_ID_ASSIGNED;
const int SessionStateChanged_Parameter_Parameter_ARRAYSIZE = SessionStateChanged_Parameter_Parameter_MAX + 1;

const ::google::protobuf::EnumDescriptor* SessionStateChanged_Parameter_descriptor();
inline const ::std::string& SessionStateChanged_Parameter_Name(SessionStateChanged_Parameter value) {
  return ::google::protobuf::internal::NameOfEnum(
    SessionStateChanged_Parameter_descriptor(), value);
}
inline bool SessionStateChanged_Parameter_Parse(
    const ::std::string& name, SessionStateChanged_Parameter* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SessionStateChanged_Parameter>(
    SessionStateChanged_Parameter_descriptor(), name, value);
}
// ===================================================================

class Frame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Mysqlx.Notice.Frame) */ {
 public:
  Frame();
  virtual ~Frame();

  Frame(const Frame& from);

  inline Frame& operator=(const Frame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Frame& default_instance();

  static inline const Frame* internal_default_instance() {
    return reinterpret_cast<const Frame*>(
               &_Frame_default_instance_);
  }

  void Swap(Frame* other);

  // implements Message ----------------------------------------------

  inline Frame* New() const PROTOBUF_FINAL { return New(NULL); }

  Frame* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Frame& from);
  void MergeFrom(const Frame& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Frame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Frame_Scope Scope;
  static const Scope GLOBAL =
    Frame_Scope_GLOBAL;
  static const Scope LOCAL =
    Frame_Scope_LOCAL;
  static inline bool Scope_IsValid(int value) {
    return Frame_Scope_IsValid(value);
  }
  static const Scope Scope_MIN =
    Frame_Scope_Scope_MIN;
  static const Scope Scope_MAX =
    Frame_Scope_Scope_MAX;
  static const int Scope_ARRAYSIZE =
    Frame_Scope_Scope_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Scope_descriptor() {
    return Frame_Scope_descriptor();
  }
  static inline const ::std::string& Scope_Name(Scope value) {
    return Frame_Scope_Name(value);
  }
  static inline bool Scope_Parse(const ::std::string& name,
      Scope* value) {
    return Frame_Scope_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bytes payload = 3;
  bool has_payload() const;
  void clear_payload();
  static const int kPayloadFieldNumber = 3;
  const ::std::string& payload() const;
  void set_payload(const ::std::string& value);
  #if LANG_CXX11
  void set_payload(::std::string&& value);
  #endif
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  ::std::string* mutable_payload();
  ::std::string* release_payload();
  void set_allocated_payload(::std::string* payload);

  // required uint32 type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // optional .Mysqlx.Notice.Frame.Scope scope = 2 [default = GLOBAL];
  bool has_scope() const;
  void clear_scope();
  static const int kScopeFieldNumber = 2;
  ::Mysqlx::Notice::Frame_Scope scope() const;
  void set_scope(::Mysqlx::Notice::Frame_Scope value);

  // @@protoc_insertion_point(class_scope:Mysqlx.Notice.Frame)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_scope();
  void clear_has_scope();
  void set_has_payload();
  void clear_has_payload();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr payload_;
  ::google::protobuf::uint32 type_;
  int scope_;
  friend struct  protobuf_mysqlx_5fnotice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Warning : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Mysqlx.Notice.Warning) */ {
 public:
  Warning();
  virtual ~Warning();

  Warning(const Warning& from);

  inline Warning& operator=(const Warning& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Warning& default_instance();

  static inline const Warning* internal_default_instance() {
    return reinterpret_cast<const Warning*>(
               &_Warning_default_instance_);
  }

  void Swap(Warning* other);

  // implements Message ----------------------------------------------

  inline Warning* New() const PROTOBUF_FINAL { return New(NULL); }

  Warning* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Warning& from);
  void MergeFrom(const Warning& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Warning* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Warning_Level Level;
  static const Level NOTE =
    Warning_Level_NOTE;
  static const Level WARNING =
    Warning_Level_WARNING;
  static const Level ERROR =
    Warning_Level_ERROR;
  static inline bool Level_IsValid(int value) {
    return Warning_Level_IsValid(value);
  }
  static const Level Level_MIN =
    Warning_Level_Level_MIN;
  static const Level Level_MAX =
    Warning_Level_Level_MAX;
  static const int Level_ARRAYSIZE =
    Warning_Level_Level_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Level_descriptor() {
    return Warning_Level_descriptor();
  }
  static inline const ::std::string& Level_Name(Level value) {
    return Warning_Level_Name(value);
  }
  static inline bool Level_Parse(const ::std::string& name,
      Level* value) {
    return Warning_Level_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string msg = 3;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 3;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // required uint32 code = 2;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 2;
  ::google::protobuf::uint32 code() const;
  void set_code(::google::protobuf::uint32 value);

  // optional .Mysqlx.Notice.Warning.Level level = 1 [default = WARNING];
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 1;
  ::Mysqlx::Notice::Warning_Level level() const;
  void set_level(::Mysqlx::Notice::Warning_Level value);

  // @@protoc_insertion_point(class_scope:Mysqlx.Notice.Warning)
 private:
  void set_has_level();
  void clear_has_level();
  void set_has_code();
  void clear_has_code();
  void set_has_msg();
  void clear_has_msg();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::uint32 code_;
  int level_;
  friend struct  protobuf_mysqlx_5fnotice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SessionVariableChanged : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Mysqlx.Notice.SessionVariableChanged) */ {
 public:
  SessionVariableChanged();
  virtual ~SessionVariableChanged();

  SessionVariableChanged(const SessionVariableChanged& from);

  inline SessionVariableChanged& operator=(const SessionVariableChanged& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SessionVariableChanged& default_instance();

  static inline const SessionVariableChanged* internal_default_instance() {
    return reinterpret_cast<const SessionVariableChanged*>(
               &_SessionVariableChanged_default_instance_);
  }

  void Swap(SessionVariableChanged* other);

  // implements Message ----------------------------------------------

  inline SessionVariableChanged* New() const PROTOBUF_FINAL { return New(NULL); }

  SessionVariableChanged* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SessionVariableChanged& from);
  void MergeFrom(const SessionVariableChanged& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SessionVariableChanged* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string param = 1;
  bool has_param() const;
  void clear_param();
  static const int kParamFieldNumber = 1;
  const ::std::string& param() const;
  void set_param(const ::std::string& value);
  #if LANG_CXX11
  void set_param(::std::string&& value);
  #endif
  void set_param(const char* value);
  void set_param(const char* value, size_t size);
  ::std::string* mutable_param();
  ::std::string* release_param();
  void set_allocated_param(::std::string* param);

  // optional .Mysqlx.Datatypes.Scalar value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::Mysqlx::Datatypes::Scalar& value() const;
  ::Mysqlx::Datatypes::Scalar* mutable_value();
  ::Mysqlx::Datatypes::Scalar* release_value();
  void set_allocated_value(::Mysqlx::Datatypes::Scalar* value);

  // @@protoc_insertion_point(class_scope:Mysqlx.Notice.SessionVariableChanged)
 private:
  void set_has_param();
  void clear_has_param();
  void set_has_value();
  void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr param_;
  ::Mysqlx::Datatypes::Scalar* value_;
  friend struct  protobuf_mysqlx_5fnotice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SessionStateChanged : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Mysqlx.Notice.SessionStateChanged) */ {
 public:
  SessionStateChanged();
  virtual ~SessionStateChanged();

  SessionStateChanged(const SessionStateChanged& from);

  inline SessionStateChanged& operator=(const SessionStateChanged& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SessionStateChanged& default_instance();

  static inline const SessionStateChanged* internal_default_instance() {
    return reinterpret_cast<const SessionStateChanged*>(
               &_SessionStateChanged_default_instance_);
  }

  void Swap(SessionStateChanged* other);

  // implements Message ----------------------------------------------

  inline SessionStateChanged* New() const PROTOBUF_FINAL { return New(NULL); }

  SessionStateChanged* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SessionStateChanged& from);
  void MergeFrom(const SessionStateChanged& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SessionStateChanged* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SessionStateChanged_Parameter Parameter;
  static const Parameter CURRENT_SCHEMA =
    SessionStateChanged_Parameter_CURRENT_SCHEMA;
  static const Parameter ACCOUNT_EXPIRED =
    SessionStateChanged_Parameter_ACCOUNT_EXPIRED;
  static const Parameter GENERATED_INSERT_ID =
    SessionStateChanged_Parameter_GENERATED_INSERT_ID;
  static const Parameter ROWS_AFFECTED =
    SessionStateChanged_Parameter_ROWS_AFFECTED;
  static const Parameter ROWS_FOUND =
    SessionStateChanged_Parameter_ROWS_FOUND;
  static const Parameter ROWS_MATCHED =
    SessionStateChanged_Parameter_ROWS_MATCHED;
  static const Parameter TRX_COMMITTED =
    SessionStateChanged_Parameter_TRX_COMMITTED;
  static const Parameter TRX_ROLLEDBACK =
    SessionStateChanged_Parameter_TRX_ROLLEDBACK;
  static const Parameter PRODUCED_MESSAGE =
    SessionStateChanged_Parameter_PRODUCED_MESSAGE;
  static const Parameter CLIENT_ID_ASSIGNED =
    SessionStateChanged_Parameter_CLIENT_ID_ASSIGNED;
  static inline bool Parameter_IsValid(int value) {
    return SessionStateChanged_Parameter_IsValid(value);
  }
  static const Parameter Parameter_MIN =
    SessionStateChanged_Parameter_Parameter_MIN;
  static const Parameter Parameter_MAX =
    SessionStateChanged_Parameter_Parameter_MAX;
  static const int Parameter_ARRAYSIZE =
    SessionStateChanged_Parameter_Parameter_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Parameter_descriptor() {
    return SessionStateChanged_Parameter_descriptor();
  }
  static inline const ::std::string& Parameter_Name(Parameter value) {
    return SessionStateChanged_Parameter_Name(value);
  }
  static inline bool Parameter_Parse(const ::std::string& name,
      Parameter* value) {
    return SessionStateChanged_Parameter_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Mysqlx.Datatypes.Scalar value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::Mysqlx::Datatypes::Scalar& value() const;
  ::Mysqlx::Datatypes::Scalar* mutable_value();
  ::Mysqlx::Datatypes::Scalar* release_value();
  void set_allocated_value(::Mysqlx::Datatypes::Scalar* value);

  // required .Mysqlx.Notice.SessionStateChanged.Parameter param = 1;
  bool has_param() const;
  void clear_param();
  static const int kParamFieldNumber = 1;
  ::Mysqlx::Notice::SessionStateChanged_Parameter param() const;
  void set_param(::Mysqlx::Notice::SessionStateChanged_Parameter value);

  // @@protoc_insertion_point(class_scope:Mysqlx.Notice.SessionStateChanged)
 private:
  void set_has_param();
  void clear_has_param();
  void set_has_value();
  void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::Mysqlx::Datatypes::Scalar* value_;
  int param_;
  friend struct  protobuf_mysqlx_5fnotice_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Frame

// required uint32 type = 1;
inline bool Frame::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Frame::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Frame::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Frame::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 Frame::type() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Notice.Frame.type)
  return type_;
}
inline void Frame::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Mysqlx.Notice.Frame.type)
}

// optional .Mysqlx.Notice.Frame.Scope scope = 2 [default = GLOBAL];
inline bool Frame::has_scope() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Frame::set_has_scope() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Frame::clear_has_scope() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Frame::clear_scope() {
  scope_ = 1;
  clear_has_scope();
}
inline ::Mysqlx::Notice::Frame_Scope Frame::scope() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Notice.Frame.scope)
  return static_cast< ::Mysqlx::Notice::Frame_Scope >(scope_);
}
inline void Frame::set_scope(::Mysqlx::Notice::Frame_Scope value) {
  assert(::Mysqlx::Notice::Frame_Scope_IsValid(value));
  set_has_scope();
  scope_ = value;
  // @@protoc_insertion_point(field_set:Mysqlx.Notice.Frame.scope)
}

// optional bytes payload = 3;
inline bool Frame::has_payload() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Frame::set_has_payload() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Frame::clear_has_payload() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Frame::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_payload();
}
inline const ::std::string& Frame::payload() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Notice.Frame.payload)
  return payload_.GetNoArena();
}
inline void Frame::set_payload(const ::std::string& value) {
  set_has_payload();
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Mysqlx.Notice.Frame.payload)
}
#if LANG_CXX11
inline void Frame::set_payload(::std::string&& value) {
  set_has_payload();
  payload_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mysqlx.Notice.Frame.payload)
}
#endif
inline void Frame::set_payload(const char* value) {
  set_has_payload();
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mysqlx.Notice.Frame.payload)
}
inline void Frame::set_payload(const void* value, size_t size) {
  set_has_payload();
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Notice.Frame.payload)
}
inline ::std::string* Frame::mutable_payload() {
  set_has_payload();
  // @@protoc_insertion_point(field_mutable:Mysqlx.Notice.Frame.payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Frame::release_payload() {
  // @@protoc_insertion_point(field_release:Mysqlx.Notice.Frame.payload)
  clear_has_payload();
  return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Frame::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    set_has_payload();
  } else {
    clear_has_payload();
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Notice.Frame.payload)
}

// -------------------------------------------------------------------

// Warning

// optional .Mysqlx.Notice.Warning.Level level = 1 [default = WARNING];
inline bool Warning::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Warning::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Warning::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Warning::clear_level() {
  level_ = 2;
  clear_has_level();
}
inline ::Mysqlx::Notice::Warning_Level Warning::level() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Notice.Warning.level)
  return static_cast< ::Mysqlx::Notice::Warning_Level >(level_);
}
inline void Warning::set_level(::Mysqlx::Notice::Warning_Level value) {
  assert(::Mysqlx::Notice::Warning_Level_IsValid(value));
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:Mysqlx.Notice.Warning.level)
}

// required uint32 code = 2;
inline bool Warning::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Warning::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Warning::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Warning::clear_code() {
  code_ = 0u;
  clear_has_code();
}
inline ::google::protobuf::uint32 Warning::code() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Notice.Warning.code)
  return code_;
}
inline void Warning::set_code(::google::protobuf::uint32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:Mysqlx.Notice.Warning.code)
}

// required string msg = 3;
inline bool Warning::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Warning::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Warning::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Warning::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& Warning::msg() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Notice.Warning.msg)
  return msg_.GetNoArena();
}
inline void Warning::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Mysqlx.Notice.Warning.msg)
}
#if LANG_CXX11
inline void Warning::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mysqlx.Notice.Warning.msg)
}
#endif
inline void Warning::set_msg(const char* value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mysqlx.Notice.Warning.msg)
}
inline void Warning::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Notice.Warning.msg)
}
inline ::std::string* Warning::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:Mysqlx.Notice.Warning.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Warning::release_msg() {
  // @@protoc_insertion_point(field_release:Mysqlx.Notice.Warning.msg)
  clear_has_msg();
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Warning::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Notice.Warning.msg)
}

// -------------------------------------------------------------------

// SessionVariableChanged

// required string param = 1;
inline bool SessionVariableChanged::has_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SessionVariableChanged::set_has_param() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SessionVariableChanged::clear_has_param() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SessionVariableChanged::clear_param() {
  param_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_param();
}
inline const ::std::string& SessionVariableChanged::param() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Notice.SessionVariableChanged.param)
  return param_.GetNoArena();
}
inline void SessionVariableChanged::set_param(const ::std::string& value) {
  set_has_param();
  param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Mysqlx.Notice.SessionVariableChanged.param)
}
#if LANG_CXX11
inline void SessionVariableChanged::set_param(::std::string&& value) {
  set_has_param();
  param_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mysqlx.Notice.SessionVariableChanged.param)
}
#endif
inline void SessionVariableChanged::set_param(const char* value) {
  set_has_param();
  param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mysqlx.Notice.SessionVariableChanged.param)
}
inline void SessionVariableChanged::set_param(const char* value, size_t size) {
  set_has_param();
  param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Notice.SessionVariableChanged.param)
}
inline ::std::string* SessionVariableChanged::mutable_param() {
  set_has_param();
  // @@protoc_insertion_point(field_mutable:Mysqlx.Notice.SessionVariableChanged.param)
  return param_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SessionVariableChanged::release_param() {
  // @@protoc_insertion_point(field_release:Mysqlx.Notice.SessionVariableChanged.param)
  clear_has_param();
  return param_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SessionVariableChanged::set_allocated_param(::std::string* param) {
  if (param != NULL) {
    set_has_param();
  } else {
    clear_has_param();
  }
  param_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), param);
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Notice.SessionVariableChanged.param)
}

// optional .Mysqlx.Datatypes.Scalar value = 2;
inline bool SessionVariableChanged::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SessionVariableChanged::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SessionVariableChanged::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SessionVariableChanged::clear_value() {
  if (value_ != NULL) value_->::Mysqlx::Datatypes::Scalar::Clear();
  clear_has_value();
}
inline const ::Mysqlx::Datatypes::Scalar& SessionVariableChanged::value() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Notice.SessionVariableChanged.value)
  return value_ != NULL ? *value_
                         : *::Mysqlx::Datatypes::Scalar::internal_default_instance();
}
inline ::Mysqlx::Datatypes::Scalar* SessionVariableChanged::mutable_value() {
  set_has_value();
  if (value_ == NULL) {
    value_ = new ::Mysqlx::Datatypes::Scalar;
  }
  // @@protoc_insertion_point(field_mutable:Mysqlx.Notice.SessionVariableChanged.value)
  return value_;
}
inline ::Mysqlx::Datatypes::Scalar* SessionVariableChanged::release_value() {
  // @@protoc_insertion_point(field_release:Mysqlx.Notice.SessionVariableChanged.value)
  clear_has_value();
  ::Mysqlx::Datatypes::Scalar* temp = value_;
  value_ = NULL;
  return temp;
}
inline void SessionVariableChanged::set_allocated_value(::Mysqlx::Datatypes::Scalar* value) {
  delete value_;
  value_ = value;
  if (value) {
    set_has_value();
  } else {
    clear_has_value();
  }
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Notice.SessionVariableChanged.value)
}

// -------------------------------------------------------------------

// SessionStateChanged

// required .Mysqlx.Notice.SessionStateChanged.Parameter param = 1;
inline bool SessionStateChanged::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SessionStateChanged::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SessionStateChanged::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SessionStateChanged::clear_param() {
  param_ = 1;
  clear_has_param();
}
inline ::Mysqlx::Notice::SessionStateChanged_Parameter SessionStateChanged::param() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Notice.SessionStateChanged.param)
  return static_cast< ::Mysqlx::Notice::SessionStateChanged_Parameter >(param_);
}
inline void SessionStateChanged::set_param(::Mysqlx::Notice::SessionStateChanged_Parameter value) {
  assert(::Mysqlx::Notice::SessionStateChanged_Parameter_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Mysqlx.Notice.SessionStateChanged.param)
}

// optional .Mysqlx.Datatypes.Scalar value = 2;
inline bool SessionStateChanged::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SessionStateChanged::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SessionStateChanged::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SessionStateChanged::clear_value() {
  if (value_ != NULL) value_->::Mysqlx::Datatypes::Scalar::Clear();
  clear_has_value();
}
inline const ::Mysqlx::Datatypes::Scalar& SessionStateChanged::value() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Notice.SessionStateChanged.value)
  return value_ != NULL ? *value_
                         : *::Mysqlx::Datatypes::Scalar::internal_default_instance();
}
inline ::Mysqlx::Datatypes::Scalar* SessionStateChanged::mutable_value() {
  set_has_value();
  if (value_ == NULL) {
    value_ = new ::Mysqlx::Datatypes::Scalar;
  }
  // @@protoc_insertion_point(field_mutable:Mysqlx.Notice.SessionStateChanged.value)
  return value_;
}
inline ::Mysqlx::Datatypes::Scalar* SessionStateChanged::release_value() {
  // @@protoc_insertion_point(field_release:Mysqlx.Notice.SessionStateChanged.value)
  clear_has_value();
  ::Mysqlx::Datatypes::Scalar* temp = value_;
  value_ = NULL;
  return temp;
}
inline void SessionStateChanged::set_allocated_value(::Mysqlx::Datatypes::Scalar* value) {
  delete value_;
  value_ = value;
  if (value) {
    set_has_value();
  } else {
    clear_has_value();
  }
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Notice.SessionStateChanged.value)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace Notice
}  // namespace Mysqlx

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Mysqlx::Notice::Frame_Scope> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Mysqlx::Notice::Frame_Scope>() {
  return ::Mysqlx::Notice::Frame_Scope_descriptor();
}
template <> struct is_proto_enum< ::Mysqlx::Notice::Warning_Level> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Mysqlx::Notice::Warning_Level>() {
  return ::Mysqlx::Notice::Warning_Level_descriptor();
}
template <> struct is_proto_enum< ::Mysqlx::Notice::SessionStateChanged_Parameter> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Mysqlx::Notice::SessionStateChanged_Parameter>() {
  return ::Mysqlx::Notice::SessionStateChanged_Parameter_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mysqlx_5fnotice_2eproto__INCLUDED
