// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysqlx_connection.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mysqlx_connection.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Mysqlx {
namespace Connection {
class CapabilityDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Capability> {
} _Capability_default_instance_;
class CapabilitiesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Capabilities> {
} _Capabilities_default_instance_;
class CapabilitiesGetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CapabilitiesGet> {
} _CapabilitiesGet_default_instance_;
class CapabilitiesSetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CapabilitiesSet> {
} _CapabilitiesSet_default_instance_;
class CloseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Close> {
} _Close_default_instance_;

namespace protobuf_mysqlx_5fconnection_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Capability, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Capability, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Capability, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Capability, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Capabilities, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Capabilities, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Capabilities, capabilities_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapabilitiesGet, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapabilitiesGet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapabilitiesSet, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapabilitiesSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapabilitiesSet, capabilities_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Close, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Close, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 6, sizeof(Capability)},
  { 8, 13, sizeof(Capabilities)},
  { 14, 18, sizeof(CapabilitiesGet)},
  { 18, 23, sizeof(CapabilitiesSet)},
  { 24, 28, sizeof(Close)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Capability_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Capabilities_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CapabilitiesGet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CapabilitiesSet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Close_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "mysqlx_connection.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace

void TableStruct::Shutdown() {
  _Capability_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Capabilities_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CapabilitiesGet_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CapabilitiesSet_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Close_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::Mysqlx::Datatypes::protobuf_mysqlx_5fdatatypes_2eproto::InitDefaults();
  _Capability_default_instance_.DefaultConstruct();
  _Capabilities_default_instance_.DefaultConstruct();
  _CapabilitiesGet_default_instance_.DefaultConstruct();
  _CapabilitiesSet_default_instance_.DefaultConstruct();
  _Close_default_instance_.DefaultConstruct();
  _Capability_default_instance_.get_mutable()->value_ = const_cast< ::Mysqlx::Datatypes::Any*>(
      ::Mysqlx::Datatypes::Any::internal_default_instance());
  _CapabilitiesSet_default_instance_.get_mutable()->capabilities_ = const_cast< ::Mysqlx::Connection::Capabilities*>(
      ::Mysqlx::Connection::Capabilities::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\027mysqlx_connection.proto\022\021Mysqlx.Connec"
      "tion\032\026mysqlx_datatypes.proto\"@\n\nCapabili"
      "ty\022\014\n\004name\030\001 \002(\t\022$\n\005value\030\002 \002(\0132\025.Mysqlx"
      ".Datatypes.Any\"C\n\014Capabilities\0223\n\014capabi"
      "lities\030\001 \003(\0132\035.Mysqlx.Connection.Capabil"
      "ity\"\021\n\017CapabilitiesGet\"H\n\017CapabilitiesSe"
      "t\0225\n\014capabilities\030\001 \002(\0132\037.Mysqlx.Connect"
      "ion.Capabilities\"\007\n\005CloseB\036\n\034com.mysql.c"
      "j.mysqlx.protobuf"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 337);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mysqlx_connection.proto", &protobuf_RegisterTypes);
  ::Mysqlx::Datatypes::protobuf_mysqlx_5fdatatypes_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_mysqlx_5fconnection_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Capability::kNameFieldNumber;
const int Capability::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Capability::Capability()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mysqlx_5fconnection_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Connection.Capability)
}
Capability::Capability(const Capability& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_value()) {
    value_ = new ::Mysqlx::Datatypes::Any(*from.value_);
  } else {
    value_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Connection.Capability)
}

void Capability::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = NULL;
}

Capability::~Capability() {
  // @@protoc_insertion_point(destructor:Mysqlx.Connection.Capability)
  SharedDtor();
}

void Capability::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete value_;
  }
}

void Capability::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Capability::descriptor() {
  protobuf_mysqlx_5fconnection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fconnection_2eproto::file_level_metadata[0].descriptor;
}

const Capability& Capability::default_instance() {
  protobuf_mysqlx_5fconnection_2eproto::InitDefaults();
  return *internal_default_instance();
}

Capability* Capability::New(::google::protobuf::Arena* arena) const {
  Capability* n = new Capability;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Capability::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Connection.Capability)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_value()) {
      GOOGLE_DCHECK(value_ != NULL);
      value_->::Mysqlx::Datatypes::Any::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Capability::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Connection.Capability)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Mysqlx.Connection.Capability.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .Mysqlx.Datatypes.Any value = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Connection.Capability)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Connection.Capability)
  return false;
#undef DO_
}

void Capability::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Connection.Capability)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Mysqlx.Connection.Capability.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required .Mysqlx.Datatypes.Any value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->value_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Connection.Capability)
}

::google::protobuf::uint8* Capability::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Connection.Capability)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Mysqlx.Connection.Capability.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .Mysqlx.Datatypes.Any value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->value_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Connection.Capability)
  return target;
}

size_t Capability::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Mysqlx.Connection.Capability)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_value()) {
    // required .Mysqlx.Datatypes.Any value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->value_);
  }

  return total_size;
}
size_t Capability::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Connection.Capability)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required .Mysqlx.Datatypes.Any value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->value_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Capability::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mysqlx.Connection.Capability)
  GOOGLE_DCHECK_NE(&from, this);
  const Capability* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Capability>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mysqlx.Connection.Capability)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mysqlx.Connection.Capability)
    MergeFrom(*source);
  }
}

void Capability::MergeFrom(const Capability& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Connection.Capability)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_value()) {
      mutable_value()->::Mysqlx::Datatypes::Any::MergeFrom(from.value());
    }
  }
}

void Capability::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mysqlx.Connection.Capability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Capability::CopyFrom(const Capability& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Connection.Capability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Capability::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_value()) {
    if (!this->value_->IsInitialized()) return false;
  }
  return true;
}

void Capability::Swap(Capability* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Capability::InternalSwap(Capability* other) {
  name_.Swap(&other->name_);
  std::swap(value_, other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Capability::GetMetadata() const {
  protobuf_mysqlx_5fconnection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fconnection_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Capability

// required string name = 1;
bool Capability::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Capability::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Capability::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Capability::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& Capability::name() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Connection.Capability.name)
  return name_.GetNoArena();
}
void Capability::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Mysqlx.Connection.Capability.name)
}
#if LANG_CXX11
void Capability::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mysqlx.Connection.Capability.name)
}
#endif
void Capability::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mysqlx.Connection.Capability.name)
}
void Capability::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Connection.Capability.name)
}
::std::string* Capability::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:Mysqlx.Connection.Capability.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Capability::release_name() {
  // @@protoc_insertion_point(field_release:Mysqlx.Connection.Capability.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Capability::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Connection.Capability.name)
}

// required .Mysqlx.Datatypes.Any value = 2;
bool Capability::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Capability::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void Capability::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void Capability::clear_value() {
  if (value_ != NULL) value_->::Mysqlx::Datatypes::Any::Clear();
  clear_has_value();
}
const ::Mysqlx::Datatypes::Any& Capability::value() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Connection.Capability.value)
  return value_ != NULL ? *value_
                         : *::Mysqlx::Datatypes::Any::internal_default_instance();
}
::Mysqlx::Datatypes::Any* Capability::mutable_value() {
  set_has_value();
  if (value_ == NULL) {
    value_ = new ::Mysqlx::Datatypes::Any;
  }
  // @@protoc_insertion_point(field_mutable:Mysqlx.Connection.Capability.value)
  return value_;
}
::Mysqlx::Datatypes::Any* Capability::release_value() {
  // @@protoc_insertion_point(field_release:Mysqlx.Connection.Capability.value)
  clear_has_value();
  ::Mysqlx::Datatypes::Any* temp = value_;
  value_ = NULL;
  return temp;
}
void Capability::set_allocated_value(::Mysqlx::Datatypes::Any* value) {
  delete value_;
  value_ = value;
  if (value) {
    set_has_value();
  } else {
    clear_has_value();
  }
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Connection.Capability.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Capabilities::kCapabilitiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Capabilities::Capabilities()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mysqlx_5fconnection_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Connection.Capabilities)
}
Capabilities::Capabilities(const Capabilities& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      capabilities_(from.capabilities_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Connection.Capabilities)
}

void Capabilities::SharedCtor() {
  _cached_size_ = 0;
}

Capabilities::~Capabilities() {
  // @@protoc_insertion_point(destructor:Mysqlx.Connection.Capabilities)
  SharedDtor();
}

void Capabilities::SharedDtor() {
}

void Capabilities::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Capabilities::descriptor() {
  protobuf_mysqlx_5fconnection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fconnection_2eproto::file_level_metadata[1].descriptor;
}

const Capabilities& Capabilities::default_instance() {
  protobuf_mysqlx_5fconnection_2eproto::InitDefaults();
  return *internal_default_instance();
}

Capabilities* Capabilities::New(::google::protobuf::Arena* arena) const {
  Capabilities* n = new Capabilities;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Capabilities::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Connection.Capabilities)
  capabilities_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Capabilities::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Connection.Capabilities)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Mysqlx.Connection.Capability capabilities = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_capabilities()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Connection.Capabilities)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Connection.Capabilities)
  return false;
#undef DO_
}

void Capabilities::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Connection.Capabilities)
  // repeated .Mysqlx.Connection.Capability capabilities = 1;
  for (unsigned int i = 0, n = this->capabilities_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->capabilities(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Connection.Capabilities)
}

::google::protobuf::uint8* Capabilities::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Connection.Capabilities)
  // repeated .Mysqlx.Connection.Capability capabilities = 1;
  for (unsigned int i = 0, n = this->capabilities_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->capabilities(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Connection.Capabilities)
  return target;
}

size_t Capabilities::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Connection.Capabilities)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .Mysqlx.Connection.Capability capabilities = 1;
  {
    unsigned int count = this->capabilities_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->capabilities(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Capabilities::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mysqlx.Connection.Capabilities)
  GOOGLE_DCHECK_NE(&from, this);
  const Capabilities* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Capabilities>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mysqlx.Connection.Capabilities)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mysqlx.Connection.Capabilities)
    MergeFrom(*source);
  }
}

void Capabilities::MergeFrom(const Capabilities& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Connection.Capabilities)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  capabilities_.MergeFrom(from.capabilities_);
}

void Capabilities::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mysqlx.Connection.Capabilities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Capabilities::CopyFrom(const Capabilities& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Connection.Capabilities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Capabilities::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->capabilities())) return false;
  return true;
}

void Capabilities::Swap(Capabilities* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Capabilities::InternalSwap(Capabilities* other) {
  capabilities_.UnsafeArenaSwap(&other->capabilities_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Capabilities::GetMetadata() const {
  protobuf_mysqlx_5fconnection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fconnection_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Capabilities

// repeated .Mysqlx.Connection.Capability capabilities = 1;
int Capabilities::capabilities_size() const {
  return capabilities_.size();
}
void Capabilities::clear_capabilities() {
  capabilities_.Clear();
}
const ::Mysqlx::Connection::Capability& Capabilities::capabilities(int index) const {
  // @@protoc_insertion_point(field_get:Mysqlx.Connection.Capabilities.capabilities)
  return capabilities_.Get(index);
}
::Mysqlx::Connection::Capability* Capabilities::mutable_capabilities(int index) {
  // @@protoc_insertion_point(field_mutable:Mysqlx.Connection.Capabilities.capabilities)
  return capabilities_.Mutable(index);
}
::Mysqlx::Connection::Capability* Capabilities::add_capabilities() {
  // @@protoc_insertion_point(field_add:Mysqlx.Connection.Capabilities.capabilities)
  return capabilities_.Add();
}
::google::protobuf::RepeatedPtrField< ::Mysqlx::Connection::Capability >*
Capabilities::mutable_capabilities() {
  // @@protoc_insertion_point(field_mutable_list:Mysqlx.Connection.Capabilities.capabilities)
  return &capabilities_;
}
const ::google::protobuf::RepeatedPtrField< ::Mysqlx::Connection::Capability >&
Capabilities::capabilities() const {
  // @@protoc_insertion_point(field_list:Mysqlx.Connection.Capabilities.capabilities)
  return capabilities_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CapabilitiesGet::CapabilitiesGet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mysqlx_5fconnection_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Connection.CapabilitiesGet)
}
CapabilitiesGet::CapabilitiesGet(const CapabilitiesGet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Connection.CapabilitiesGet)
}

void CapabilitiesGet::SharedCtor() {
  _cached_size_ = 0;
}

CapabilitiesGet::~CapabilitiesGet() {
  // @@protoc_insertion_point(destructor:Mysqlx.Connection.CapabilitiesGet)
  SharedDtor();
}

void CapabilitiesGet::SharedDtor() {
}

void CapabilitiesGet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CapabilitiesGet::descriptor() {
  protobuf_mysqlx_5fconnection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fconnection_2eproto::file_level_metadata[2].descriptor;
}

const CapabilitiesGet& CapabilitiesGet::default_instance() {
  protobuf_mysqlx_5fconnection_2eproto::InitDefaults();
  return *internal_default_instance();
}

CapabilitiesGet* CapabilitiesGet::New(::google::protobuf::Arena* arena) const {
  CapabilitiesGet* n = new CapabilitiesGet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CapabilitiesGet::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Connection.CapabilitiesGet)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CapabilitiesGet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Connection.CapabilitiesGet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Connection.CapabilitiesGet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Connection.CapabilitiesGet)
  return false;
#undef DO_
}

void CapabilitiesGet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Connection.CapabilitiesGet)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Connection.CapabilitiesGet)
}

::google::protobuf::uint8* CapabilitiesGet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Connection.CapabilitiesGet)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Connection.CapabilitiesGet)
  return target;
}

size_t CapabilitiesGet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Connection.CapabilitiesGet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CapabilitiesGet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mysqlx.Connection.CapabilitiesGet)
  GOOGLE_DCHECK_NE(&from, this);
  const CapabilitiesGet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CapabilitiesGet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mysqlx.Connection.CapabilitiesGet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mysqlx.Connection.CapabilitiesGet)
    MergeFrom(*source);
  }
}

void CapabilitiesGet::MergeFrom(const CapabilitiesGet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Connection.CapabilitiesGet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void CapabilitiesGet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mysqlx.Connection.CapabilitiesGet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CapabilitiesGet::CopyFrom(const CapabilitiesGet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Connection.CapabilitiesGet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CapabilitiesGet::IsInitialized() const {
  return true;
}

void CapabilitiesGet::Swap(CapabilitiesGet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CapabilitiesGet::InternalSwap(CapabilitiesGet* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CapabilitiesGet::GetMetadata() const {
  protobuf_mysqlx_5fconnection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fconnection_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CapabilitiesGet

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CapabilitiesSet::kCapabilitiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CapabilitiesSet::CapabilitiesSet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mysqlx_5fconnection_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Connection.CapabilitiesSet)
}
CapabilitiesSet::CapabilitiesSet(const CapabilitiesSet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_capabilities()) {
    capabilities_ = new ::Mysqlx::Connection::Capabilities(*from.capabilities_);
  } else {
    capabilities_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Connection.CapabilitiesSet)
}

void CapabilitiesSet::SharedCtor() {
  _cached_size_ = 0;
  capabilities_ = NULL;
}

CapabilitiesSet::~CapabilitiesSet() {
  // @@protoc_insertion_point(destructor:Mysqlx.Connection.CapabilitiesSet)
  SharedDtor();
}

void CapabilitiesSet::SharedDtor() {
  if (this != internal_default_instance()) {
    delete capabilities_;
  }
}

void CapabilitiesSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CapabilitiesSet::descriptor() {
  protobuf_mysqlx_5fconnection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fconnection_2eproto::file_level_metadata[3].descriptor;
}

const CapabilitiesSet& CapabilitiesSet::default_instance() {
  protobuf_mysqlx_5fconnection_2eproto::InitDefaults();
  return *internal_default_instance();
}

CapabilitiesSet* CapabilitiesSet::New(::google::protobuf::Arena* arena) const {
  CapabilitiesSet* n = new CapabilitiesSet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CapabilitiesSet::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Connection.CapabilitiesSet)
  if (has_capabilities()) {
    GOOGLE_DCHECK(capabilities_ != NULL);
    capabilities_->::Mysqlx::Connection::Capabilities::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CapabilitiesSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Connection.CapabilitiesSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Mysqlx.Connection.Capabilities capabilities = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_capabilities()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Connection.CapabilitiesSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Connection.CapabilitiesSet)
  return false;
#undef DO_
}

void CapabilitiesSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Connection.CapabilitiesSet)
  // required .Mysqlx.Connection.Capabilities capabilities = 1;
  if (has_capabilities()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->capabilities_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Connection.CapabilitiesSet)
}

::google::protobuf::uint8* CapabilitiesSet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Connection.CapabilitiesSet)
  // required .Mysqlx.Connection.Capabilities capabilities = 1;
  if (has_capabilities()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->capabilities_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Connection.CapabilitiesSet)
  return target;
}

size_t CapabilitiesSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Connection.CapabilitiesSet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .Mysqlx.Connection.Capabilities capabilities = 1;
  if (has_capabilities()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->capabilities_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CapabilitiesSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mysqlx.Connection.CapabilitiesSet)
  GOOGLE_DCHECK_NE(&from, this);
  const CapabilitiesSet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CapabilitiesSet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mysqlx.Connection.CapabilitiesSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mysqlx.Connection.CapabilitiesSet)
    MergeFrom(*source);
  }
}

void CapabilitiesSet::MergeFrom(const CapabilitiesSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Connection.CapabilitiesSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_capabilities()) {
    mutable_capabilities()->::Mysqlx::Connection::Capabilities::MergeFrom(from.capabilities());
  }
}

void CapabilitiesSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mysqlx.Connection.CapabilitiesSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CapabilitiesSet::CopyFrom(const CapabilitiesSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Connection.CapabilitiesSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CapabilitiesSet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_capabilities()) {
    if (!this->capabilities_->IsInitialized()) return false;
  }
  return true;
}

void CapabilitiesSet::Swap(CapabilitiesSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CapabilitiesSet::InternalSwap(CapabilitiesSet* other) {
  std::swap(capabilities_, other->capabilities_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CapabilitiesSet::GetMetadata() const {
  protobuf_mysqlx_5fconnection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fconnection_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CapabilitiesSet

// required .Mysqlx.Connection.Capabilities capabilities = 1;
bool CapabilitiesSet::has_capabilities() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CapabilitiesSet::set_has_capabilities() {
  _has_bits_[0] |= 0x00000001u;
}
void CapabilitiesSet::clear_has_capabilities() {
  _has_bits_[0] &= ~0x00000001u;
}
void CapabilitiesSet::clear_capabilities() {
  if (capabilities_ != NULL) capabilities_->::Mysqlx::Connection::Capabilities::Clear();
  clear_has_capabilities();
}
const ::Mysqlx::Connection::Capabilities& CapabilitiesSet::capabilities() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Connection.CapabilitiesSet.capabilities)
  return capabilities_ != NULL ? *capabilities_
                         : *::Mysqlx::Connection::Capabilities::internal_default_instance();
}
::Mysqlx::Connection::Capabilities* CapabilitiesSet::mutable_capabilities() {
  set_has_capabilities();
  if (capabilities_ == NULL) {
    capabilities_ = new ::Mysqlx::Connection::Capabilities;
  }
  // @@protoc_insertion_point(field_mutable:Mysqlx.Connection.CapabilitiesSet.capabilities)
  return capabilities_;
}
::Mysqlx::Connection::Capabilities* CapabilitiesSet::release_capabilities() {
  // @@protoc_insertion_point(field_release:Mysqlx.Connection.CapabilitiesSet.capabilities)
  clear_has_capabilities();
  ::Mysqlx::Connection::Capabilities* temp = capabilities_;
  capabilities_ = NULL;
  return temp;
}
void CapabilitiesSet::set_allocated_capabilities(::Mysqlx::Connection::Capabilities* capabilities) {
  delete capabilities_;
  capabilities_ = capabilities;
  if (capabilities) {
    set_has_capabilities();
  } else {
    clear_has_capabilities();
  }
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Connection.CapabilitiesSet.capabilities)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Close::Close()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mysqlx_5fconnection_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Connection.Close)
}
Close::Close(const Close& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Connection.Close)
}

void Close::SharedCtor() {
  _cached_size_ = 0;
}

Close::~Close() {
  // @@protoc_insertion_point(destructor:Mysqlx.Connection.Close)
  SharedDtor();
}

void Close::SharedDtor() {
}

void Close::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Close::descriptor() {
  protobuf_mysqlx_5fconnection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fconnection_2eproto::file_level_metadata[4].descriptor;
}

const Close& Close::default_instance() {
  protobuf_mysqlx_5fconnection_2eproto::InitDefaults();
  return *internal_default_instance();
}

Close* Close::New(::google::protobuf::Arena* arena) const {
  Close* n = new Close;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Close::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Connection.Close)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Close::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Connection.Close)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Connection.Close)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Connection.Close)
  return false;
#undef DO_
}

void Close::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Connection.Close)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Connection.Close)
}

::google::protobuf::uint8* Close::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Connection.Close)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Connection.Close)
  return target;
}

size_t Close::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Connection.Close)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Close::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mysqlx.Connection.Close)
  GOOGLE_DCHECK_NE(&from, this);
  const Close* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Close>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mysqlx.Connection.Close)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mysqlx.Connection.Close)
    MergeFrom(*source);
  }
}

void Close::MergeFrom(const Close& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Connection.Close)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void Close::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mysqlx.Connection.Close)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Close::CopyFrom(const Close& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Connection.Close)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Close::IsInitialized() const {
  return true;
}

void Close::Swap(Close* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Close::InternalSwap(Close* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Close::GetMetadata() const {
  protobuf_mysqlx_5fconnection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fconnection_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Close

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Connection
}  // namespace Mysqlx

// @@protoc_insertion_point(global_scope)
