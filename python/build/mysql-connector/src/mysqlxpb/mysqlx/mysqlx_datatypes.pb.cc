// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysqlx_datatypes.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mysqlx_datatypes.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Mysqlx {
namespace Datatypes {
class Scalar_StringDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Scalar_String> {
} _Scalar_String_default_instance_;
class Scalar_OctetsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Scalar_Octets> {
} _Scalar_Octets_default_instance_;
class ScalarDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Scalar> {
} _Scalar_default_instance_;
class Object_ObjectFieldDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Object_ObjectField> {
} _Object_ObjectField_default_instance_;
class ObjectDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Object> {
} _Object_default_instance_;
class ArrayDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Array> {
} _Array_default_instance_;
class AnyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Any> {
} _Any_default_instance_;

namespace protobuf_mysqlx_5fdatatypes_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[7];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scalar_String, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scalar_String, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scalar_String, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scalar_String, collation_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scalar_Octets, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scalar_Octets, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scalar_Octets, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scalar_Octets, content_type_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scalar, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scalar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scalar, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scalar, v_signed_int_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scalar, v_unsigned_int_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scalar, v_octets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scalar, v_double_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scalar, v_float_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scalar, v_bool_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scalar, v_string_),
  7,
  2,
  3,
  0,
  4,
  5,
  6,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object_ObjectField, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object_ObjectField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object_ObjectField, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object_ObjectField, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, fld_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array, value_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Any, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Any, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Any, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Any, scalar_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Any, obj_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Any, array_),
  3,
  0,
  1,
  2,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 6, sizeof(Scalar_String)},
  { 8, 14, sizeof(Scalar_Octets)},
  { 16, 28, sizeof(Scalar)},
  { 36, 42, sizeof(Object_ObjectField)},
  { 44, 49, sizeof(Object)},
  { 50, 55, sizeof(Array)},
  { 56, 64, sizeof(Any)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Scalar_String_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Scalar_Octets_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Scalar_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Object_ObjectField_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Object_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Array_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Any_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "mysqlx_datatypes.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

}  // namespace

void TableStruct::Shutdown() {
  _Scalar_String_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Scalar_Octets_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Scalar_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Object_ObjectField_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Object_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _Array_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _Any_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Scalar_String_default_instance_.DefaultConstruct();
  _Scalar_Octets_default_instance_.DefaultConstruct();
  _Scalar_default_instance_.DefaultConstruct();
  _Object_ObjectField_default_instance_.DefaultConstruct();
  _Object_default_instance_.DefaultConstruct();
  _Array_default_instance_.DefaultConstruct();
  _Any_default_instance_.DefaultConstruct();
  _Scalar_default_instance_.get_mutable()->v_octets_ = const_cast< ::Mysqlx::Datatypes::Scalar_Octets*>(
      ::Mysqlx::Datatypes::Scalar_Octets::internal_default_instance());
  _Scalar_default_instance_.get_mutable()->v_string_ = const_cast< ::Mysqlx::Datatypes::Scalar_String*>(
      ::Mysqlx::Datatypes::Scalar_String::internal_default_instance());
  _Object_ObjectField_default_instance_.get_mutable()->value_ = const_cast< ::Mysqlx::Datatypes::Any*>(
      ::Mysqlx::Datatypes::Any::internal_default_instance());
  _Any_default_instance_.get_mutable()->scalar_ = const_cast< ::Mysqlx::Datatypes::Scalar*>(
      ::Mysqlx::Datatypes::Scalar::internal_default_instance());
  _Any_default_instance_.get_mutable()->obj_ = const_cast< ::Mysqlx::Datatypes::Object*>(
      ::Mysqlx::Datatypes::Object::internal_default_instance());
  _Any_default_instance_.get_mutable()->array_ = const_cast< ::Mysqlx::Datatypes::Array*>(
      ::Mysqlx::Datatypes::Array::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\026mysqlx_datatypes.proto\022\020Mysqlx.Datatyp"
      "es\"\306\003\n\006Scalar\022+\n\004type\030\001 \002(\0162\035.Mysqlx.Dat"
      "atypes.Scalar.Type\022\024\n\014v_signed_int\030\002 \001(\022"
      "\022\026\n\016v_unsigned_int\030\003 \001(\004\0221\n\010v_octets\030\005 \001"
      "(\0132\037.Mysqlx.Datatypes.Scalar.Octets\022\020\n\010v"
      "_double\030\006 \001(\001\022\017\n\007v_float\030\007 \001(\002\022\016\n\006v_bool"
      "\030\010 \001(\010\0221\n\010v_string\030\t \001(\0132\037.Mysqlx.Dataty"
      "pes.Scalar.String\032*\n\006String\022\r\n\005value\030\001 \002"
      "(\014\022\021\n\tcollation\030\002 \001(\004\032-\n\006Octets\022\r\n\005value"
      "\030\001 \002(\014\022\024\n\014content_type\030\002 \001(\r\"m\n\004Type\022\n\n\006"
      "V_SINT\020\001\022\n\n\006V_UINT\020\002\022\n\n\006V_NULL\020\003\022\014\n\010V_OC"
      "TETS\020\004\022\014\n\010V_DOUBLE\020\005\022\013\n\007V_FLOAT\020\006\022\n\n\006V_B"
      "OOL\020\007\022\014\n\010V_STRING\020\010\"}\n\006Object\0221\n\003fld\030\001 \003"
      "(\0132$.Mysqlx.Datatypes.Object.ObjectField"
      "\032@\n\013ObjectField\022\013\n\003key\030\001 \002(\t\022$\n\005value\030\002 "
      "\002(\0132\025.Mysqlx.Datatypes.Any\"-\n\005Array\022$\n\005v"
      "alue\030\001 \003(\0132\025.Mysqlx.Datatypes.Any\"\323\001\n\003An"
      "y\022(\n\004type\030\001 \002(\0162\032.Mysqlx.Datatypes.Any.T"
      "ype\022(\n\006scalar\030\002 \001(\0132\030.Mysqlx.Datatypes.S"
      "calar\022%\n\003obj\030\003 \001(\0132\030.Mysqlx.Datatypes.Ob"
      "ject\022&\n\005array\030\004 \001(\0132\027.Mysqlx.Datatypes.A"
      "rray\")\n\004Type\022\n\n\006SCALAR\020\001\022\n\n\006OBJECT\020\002\022\t\n\005"
      "ARRAY\020\003B\036\n\034com.mysql.cj.mysqlx.protobuf"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 919);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mysqlx_datatypes.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_mysqlx_5fdatatypes_2eproto

const ::google::protobuf::EnumDescriptor* Scalar_Type_descriptor() {
  protobuf_mysqlx_5fdatatypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fdatatypes_2eproto::file_level_enum_descriptors[0];
}
bool Scalar_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Scalar_Type Scalar::V_SINT;
const Scalar_Type Scalar::V_UINT;
const Scalar_Type Scalar::V_NULL;
const Scalar_Type Scalar::V_OCTETS;
const Scalar_Type Scalar::V_DOUBLE;
const Scalar_Type Scalar::V_FLOAT;
const Scalar_Type Scalar::V_BOOL;
const Scalar_Type Scalar::V_STRING;
const Scalar_Type Scalar::Type_MIN;
const Scalar_Type Scalar::Type_MAX;
const int Scalar::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Any_Type_descriptor() {
  protobuf_mysqlx_5fdatatypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fdatatypes_2eproto::file_level_enum_descriptors[1];
}
bool Any_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Any_Type Any::SCALAR;
const Any_Type Any::OBJECT;
const Any_Type Any::ARRAY;
const Any_Type Any::Type_MIN;
const Any_Type Any::Type_MAX;
const int Any::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Scalar_String::kValueFieldNumber;
const int Scalar_String::kCollationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Scalar_String::Scalar_String()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mysqlx_5fdatatypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Datatypes.Scalar.String)
}
Scalar_String::Scalar_String(const Scalar_String& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  collation_ = from.collation_;
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Datatypes.Scalar.String)
}

void Scalar_String::SharedCtor() {
  _cached_size_ = 0;
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collation_ = GOOGLE_ULONGLONG(0);
}

Scalar_String::~Scalar_String() {
  // @@protoc_insertion_point(destructor:Mysqlx.Datatypes.Scalar.String)
  SharedDtor();
}

void Scalar_String::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Scalar_String::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Scalar_String::descriptor() {
  protobuf_mysqlx_5fdatatypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fdatatypes_2eproto::file_level_metadata[0].descriptor;
}

const Scalar_String& Scalar_String::default_instance() {
  protobuf_mysqlx_5fdatatypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

Scalar_String* Scalar_String::New(::google::protobuf::Arena* arena) const {
  Scalar_String* n = new Scalar_String;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Scalar_String::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Datatypes.Scalar.String)
  if (has_value()) {
    GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*value_.UnsafeRawStringPointer())->clear();
  }
  collation_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Scalar_String::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Datatypes.Scalar.String)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes value = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 collation = 2;
      case 2: {
        if (tag == 16u) {
          set_has_collation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &collation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Datatypes.Scalar.String)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Datatypes.Scalar.String)
  return false;
#undef DO_
}

void Scalar_String::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Datatypes.Scalar.String)
  // required bytes value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->value(), output);
  }

  // optional uint64 collation = 2;
  if (has_collation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->collation(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Datatypes.Scalar.String)
}

::google::protobuf::uint8* Scalar_String::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Datatypes.Scalar.String)
  // required bytes value = 1;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->value(), target);
  }

  // optional uint64 collation = 2;
  if (has_collation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->collation(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Datatypes.Scalar.String)
  return target;
}

size_t Scalar_String::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Datatypes.Scalar.String)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required bytes value = 1;
  if (has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }
  // optional uint64 collation = 2;
  if (has_collation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->collation());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Scalar_String::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mysqlx.Datatypes.Scalar.String)
  GOOGLE_DCHECK_NE(&from, this);
  const Scalar_String* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Scalar_String>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mysqlx.Datatypes.Scalar.String)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mysqlx.Datatypes.Scalar.String)
    MergeFrom(*source);
  }
}

void Scalar_String::MergeFrom(const Scalar_String& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Datatypes.Scalar.String)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (from.has_collation()) {
      set_collation(from.collation());
    }
  }
}

void Scalar_String::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mysqlx.Datatypes.Scalar.String)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scalar_String::CopyFrom(const Scalar_String& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Datatypes.Scalar.String)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scalar_String::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Scalar_String::Swap(Scalar_String* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Scalar_String::InternalSwap(Scalar_String* other) {
  value_.Swap(&other->value_);
  std::swap(collation_, other->collation_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Scalar_String::GetMetadata() const {
  protobuf_mysqlx_5fdatatypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fdatatypes_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Scalar_String

// required bytes value = 1;
bool Scalar_String::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Scalar_String::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
void Scalar_String::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
void Scalar_String::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& Scalar_String::value() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Datatypes.Scalar.String.value)
  return value_.GetNoArena();
}
void Scalar_String::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Mysqlx.Datatypes.Scalar.String.value)
}
#if LANG_CXX11
void Scalar_String::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mysqlx.Datatypes.Scalar.String.value)
}
#endif
void Scalar_String::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mysqlx.Datatypes.Scalar.String.value)
}
void Scalar_String::set_value(const void* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Datatypes.Scalar.String.value)
}
::std::string* Scalar_String::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:Mysqlx.Datatypes.Scalar.String.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Scalar_String::release_value() {
  // @@protoc_insertion_point(field_release:Mysqlx.Datatypes.Scalar.String.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Scalar_String::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Datatypes.Scalar.String.value)
}

// optional uint64 collation = 2;
bool Scalar_String::has_collation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Scalar_String::set_has_collation() {
  _has_bits_[0] |= 0x00000002u;
}
void Scalar_String::clear_has_collation() {
  _has_bits_[0] &= ~0x00000002u;
}
void Scalar_String::clear_collation() {
  collation_ = GOOGLE_ULONGLONG(0);
  clear_has_collation();
}
::google::protobuf::uint64 Scalar_String::collation() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Datatypes.Scalar.String.collation)
  return collation_;
}
void Scalar_String::set_collation(::google::protobuf::uint64 value) {
  set_has_collation();
  collation_ = value;
  // @@protoc_insertion_point(field_set:Mysqlx.Datatypes.Scalar.String.collation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Scalar_Octets::kValueFieldNumber;
const int Scalar_Octets::kContentTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Scalar_Octets::Scalar_Octets()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mysqlx_5fdatatypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Datatypes.Scalar.Octets)
}
Scalar_Octets::Scalar_Octets(const Scalar_Octets& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  content_type_ = from.content_type_;
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Datatypes.Scalar.Octets)
}

void Scalar_Octets::SharedCtor() {
  _cached_size_ = 0;
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_type_ = 0u;
}

Scalar_Octets::~Scalar_Octets() {
  // @@protoc_insertion_point(destructor:Mysqlx.Datatypes.Scalar.Octets)
  SharedDtor();
}

void Scalar_Octets::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Scalar_Octets::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Scalar_Octets::descriptor() {
  protobuf_mysqlx_5fdatatypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fdatatypes_2eproto::file_level_metadata[1].descriptor;
}

const Scalar_Octets& Scalar_Octets::default_instance() {
  protobuf_mysqlx_5fdatatypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

Scalar_Octets* Scalar_Octets::New(::google::protobuf::Arena* arena) const {
  Scalar_Octets* n = new Scalar_Octets;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Scalar_Octets::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Datatypes.Scalar.Octets)
  if (has_value()) {
    GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*value_.UnsafeRawStringPointer())->clear();
  }
  content_type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Scalar_Octets::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Datatypes.Scalar.Octets)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes value = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 content_type = 2;
      case 2: {
        if (tag == 16u) {
          set_has_content_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &content_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Datatypes.Scalar.Octets)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Datatypes.Scalar.Octets)
  return false;
#undef DO_
}

void Scalar_Octets::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Datatypes.Scalar.Octets)
  // required bytes value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->value(), output);
  }

  // optional uint32 content_type = 2;
  if (has_content_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->content_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Datatypes.Scalar.Octets)
}

::google::protobuf::uint8* Scalar_Octets::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Datatypes.Scalar.Octets)
  // required bytes value = 1;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->value(), target);
  }

  // optional uint32 content_type = 2;
  if (has_content_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->content_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Datatypes.Scalar.Octets)
  return target;
}

size_t Scalar_Octets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Datatypes.Scalar.Octets)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required bytes value = 1;
  if (has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }
  // optional uint32 content_type = 2;
  if (has_content_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->content_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Scalar_Octets::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mysqlx.Datatypes.Scalar.Octets)
  GOOGLE_DCHECK_NE(&from, this);
  const Scalar_Octets* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Scalar_Octets>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mysqlx.Datatypes.Scalar.Octets)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mysqlx.Datatypes.Scalar.Octets)
    MergeFrom(*source);
  }
}

void Scalar_Octets::MergeFrom(const Scalar_Octets& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Datatypes.Scalar.Octets)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (from.has_content_type()) {
      set_content_type(from.content_type());
    }
  }
}

void Scalar_Octets::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mysqlx.Datatypes.Scalar.Octets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scalar_Octets::CopyFrom(const Scalar_Octets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Datatypes.Scalar.Octets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scalar_Octets::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Scalar_Octets::Swap(Scalar_Octets* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Scalar_Octets::InternalSwap(Scalar_Octets* other) {
  value_.Swap(&other->value_);
  std::swap(content_type_, other->content_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Scalar_Octets::GetMetadata() const {
  protobuf_mysqlx_5fdatatypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fdatatypes_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Scalar_Octets

// required bytes value = 1;
bool Scalar_Octets::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Scalar_Octets::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
void Scalar_Octets::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
void Scalar_Octets::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& Scalar_Octets::value() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Datatypes.Scalar.Octets.value)
  return value_.GetNoArena();
}
void Scalar_Octets::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Mysqlx.Datatypes.Scalar.Octets.value)
}
#if LANG_CXX11
void Scalar_Octets::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mysqlx.Datatypes.Scalar.Octets.value)
}
#endif
void Scalar_Octets::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mysqlx.Datatypes.Scalar.Octets.value)
}
void Scalar_Octets::set_value(const void* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Datatypes.Scalar.Octets.value)
}
::std::string* Scalar_Octets::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:Mysqlx.Datatypes.Scalar.Octets.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Scalar_Octets::release_value() {
  // @@protoc_insertion_point(field_release:Mysqlx.Datatypes.Scalar.Octets.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Scalar_Octets::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Datatypes.Scalar.Octets.value)
}

// optional uint32 content_type = 2;
bool Scalar_Octets::has_content_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Scalar_Octets::set_has_content_type() {
  _has_bits_[0] |= 0x00000002u;
}
void Scalar_Octets::clear_has_content_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void Scalar_Octets::clear_content_type() {
  content_type_ = 0u;
  clear_has_content_type();
}
::google::protobuf::uint32 Scalar_Octets::content_type() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Datatypes.Scalar.Octets.content_type)
  return content_type_;
}
void Scalar_Octets::set_content_type(::google::protobuf::uint32 value) {
  set_has_content_type();
  content_type_ = value;
  // @@protoc_insertion_point(field_set:Mysqlx.Datatypes.Scalar.Octets.content_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Scalar::kTypeFieldNumber;
const int Scalar::kVSignedIntFieldNumber;
const int Scalar::kVUnsignedIntFieldNumber;
const int Scalar::kVOctetsFieldNumber;
const int Scalar::kVDoubleFieldNumber;
const int Scalar::kVFloatFieldNumber;
const int Scalar::kVBoolFieldNumber;
const int Scalar::kVStringFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Scalar::Scalar()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mysqlx_5fdatatypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Datatypes.Scalar)
}
Scalar::Scalar(const Scalar& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_v_octets()) {
    v_octets_ = new ::Mysqlx::Datatypes::Scalar_Octets(*from.v_octets_);
  } else {
    v_octets_ = NULL;
  }
  if (from.has_v_string()) {
    v_string_ = new ::Mysqlx::Datatypes::Scalar_String(*from.v_string_);
  } else {
    v_string_ = NULL;
  }
  ::memcpy(&v_signed_int_, &from.v_signed_int_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&v_signed_int_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Datatypes.Scalar)
}

void Scalar::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&v_octets_, 0, reinterpret_cast<char*>(&v_bool_) -
    reinterpret_cast<char*>(&v_octets_) + sizeof(v_bool_));
  type_ = 1;
}

Scalar::~Scalar() {
  // @@protoc_insertion_point(destructor:Mysqlx.Datatypes.Scalar)
  SharedDtor();
}

void Scalar::SharedDtor() {
  if (this != internal_default_instance()) {
    delete v_octets_;
  }
  if (this != internal_default_instance()) {
    delete v_string_;
  }
}

void Scalar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Scalar::descriptor() {
  protobuf_mysqlx_5fdatatypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fdatatypes_2eproto::file_level_metadata[2].descriptor;
}

const Scalar& Scalar::default_instance() {
  protobuf_mysqlx_5fdatatypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

Scalar* Scalar::New(::google::protobuf::Arena* arena) const {
  Scalar* n = new Scalar;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Scalar::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Datatypes.Scalar)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_v_octets()) {
      GOOGLE_DCHECK(v_octets_ != NULL);
      v_octets_->::Mysqlx::Datatypes::Scalar_Octets::Clear();
    }
    if (has_v_string()) {
      GOOGLE_DCHECK(v_string_ != NULL);
      v_string_->::Mysqlx::Datatypes::Scalar_String::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&v_signed_int_, 0, reinterpret_cast<char*>(&v_bool_) -
      reinterpret_cast<char*>(&v_signed_int_) + sizeof(v_bool_));
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Scalar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Datatypes.Scalar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Mysqlx.Datatypes.Scalar.Type type = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Mysqlx::Datatypes::Scalar_Type_IsValid(value)) {
            set_type(static_cast< ::Mysqlx::Datatypes::Scalar_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 v_signed_int = 2;
      case 2: {
        if (tag == 16u) {
          set_has_v_signed_int();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &v_signed_int_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 v_unsigned_int = 3;
      case 3: {
        if (tag == 24u) {
          set_has_v_unsigned_int();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &v_unsigned_int_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Mysqlx.Datatypes.Scalar.Octets v_octets = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_v_octets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double v_double = 6;
      case 6: {
        if (tag == 49u) {
          set_has_v_double();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &v_double_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float v_float = 7;
      case 7: {
        if (tag == 61u) {
          set_has_v_float();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &v_float_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool v_bool = 8;
      case 8: {
        if (tag == 64u) {
          set_has_v_bool();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &v_bool_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Mysqlx.Datatypes.Scalar.String v_string = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_v_string()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Datatypes.Scalar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Datatypes.Scalar)
  return false;
#undef DO_
}

void Scalar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Datatypes.Scalar)
  // required .Mysqlx.Datatypes.Scalar.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional sint64 v_signed_int = 2;
  if (has_v_signed_int()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->v_signed_int(), output);
  }

  // optional uint64 v_unsigned_int = 3;
  if (has_v_unsigned_int()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->v_unsigned_int(), output);
  }

  // optional .Mysqlx.Datatypes.Scalar.Octets v_octets = 5;
  if (has_v_octets()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->v_octets_, output);
  }

  // optional double v_double = 6;
  if (has_v_double()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->v_double(), output);
  }

  // optional float v_float = 7;
  if (has_v_float()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->v_float(), output);
  }

  // optional bool v_bool = 8;
  if (has_v_bool()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->v_bool(), output);
  }

  // optional .Mysqlx.Datatypes.Scalar.String v_string = 9;
  if (has_v_string()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->v_string_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Datatypes.Scalar)
}

::google::protobuf::uint8* Scalar::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Datatypes.Scalar)
  // required .Mysqlx.Datatypes.Scalar.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional sint64 v_signed_int = 2;
  if (has_v_signed_int()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->v_signed_int(), target);
  }

  // optional uint64 v_unsigned_int = 3;
  if (has_v_unsigned_int()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->v_unsigned_int(), target);
  }

  // optional .Mysqlx.Datatypes.Scalar.Octets v_octets = 5;
  if (has_v_octets()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->v_octets_, false, target);
  }

  // optional double v_double = 6;
  if (has_v_double()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->v_double(), target);
  }

  // optional float v_float = 7;
  if (has_v_float()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->v_float(), target);
  }

  // optional bool v_bool = 8;
  if (has_v_bool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->v_bool(), target);
  }

  // optional .Mysqlx.Datatypes.Scalar.String v_string = 9;
  if (has_v_string()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->v_string_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Datatypes.Scalar)
  return target;
}

size_t Scalar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Datatypes.Scalar)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .Mysqlx.Datatypes.Scalar.Type type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional .Mysqlx.Datatypes.Scalar.Octets v_octets = 5;
    if (has_v_octets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->v_octets_);
    }

    // optional .Mysqlx.Datatypes.Scalar.String v_string = 9;
    if (has_v_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->v_string_);
    }

    // optional sint64 v_signed_int = 2;
    if (has_v_signed_int()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->v_signed_int());
    }

    // optional uint64 v_unsigned_int = 3;
    if (has_v_unsigned_int()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->v_unsigned_int());
    }

    // optional double v_double = 6;
    if (has_v_double()) {
      total_size += 1 + 8;
    }

    // optional float v_float = 7;
    if (has_v_float()) {
      total_size += 1 + 4;
    }

    // optional bool v_bool = 8;
    if (has_v_bool()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Scalar::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mysqlx.Datatypes.Scalar)
  GOOGLE_DCHECK_NE(&from, this);
  const Scalar* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Scalar>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mysqlx.Datatypes.Scalar)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mysqlx.Datatypes.Scalar)
    MergeFrom(*source);
  }
}

void Scalar::MergeFrom(const Scalar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Datatypes.Scalar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_v_octets()) {
      mutable_v_octets()->::Mysqlx::Datatypes::Scalar_Octets::MergeFrom(from.v_octets());
    }
    if (from.has_v_string()) {
      mutable_v_string()->::Mysqlx::Datatypes::Scalar_String::MergeFrom(from.v_string());
    }
    if (from.has_v_signed_int()) {
      set_v_signed_int(from.v_signed_int());
    }
    if (from.has_v_unsigned_int()) {
      set_v_unsigned_int(from.v_unsigned_int());
    }
    if (from.has_v_double()) {
      set_v_double(from.v_double());
    }
    if (from.has_v_float()) {
      set_v_float(from.v_float());
    }
    if (from.has_v_bool()) {
      set_v_bool(from.v_bool());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
}

void Scalar::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mysqlx.Datatypes.Scalar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scalar::CopyFrom(const Scalar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Datatypes.Scalar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scalar::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000080) != 0x00000080) return false;
  if (has_v_octets()) {
    if (!this->v_octets_->IsInitialized()) return false;
  }
  if (has_v_string()) {
    if (!this->v_string_->IsInitialized()) return false;
  }
  return true;
}

void Scalar::Swap(Scalar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Scalar::InternalSwap(Scalar* other) {
  std::swap(v_octets_, other->v_octets_);
  std::swap(v_string_, other->v_string_);
  std::swap(v_signed_int_, other->v_signed_int_);
  std::swap(v_unsigned_int_, other->v_unsigned_int_);
  std::swap(v_double_, other->v_double_);
  std::swap(v_float_, other->v_float_);
  std::swap(v_bool_, other->v_bool_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Scalar::GetMetadata() const {
  protobuf_mysqlx_5fdatatypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fdatatypes_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Scalar

// required .Mysqlx.Datatypes.Scalar.Type type = 1;
bool Scalar::has_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Scalar::set_has_type() {
  _has_bits_[0] |= 0x00000080u;
}
void Scalar::clear_has_type() {
  _has_bits_[0] &= ~0x00000080u;
}
void Scalar::clear_type() {
  type_ = 1;
  clear_has_type();
}
::Mysqlx::Datatypes::Scalar_Type Scalar::type() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Datatypes.Scalar.type)
  return static_cast< ::Mysqlx::Datatypes::Scalar_Type >(type_);
}
void Scalar::set_type(::Mysqlx::Datatypes::Scalar_Type value) {
  assert(::Mysqlx::Datatypes::Scalar_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Mysqlx.Datatypes.Scalar.type)
}

// optional sint64 v_signed_int = 2;
bool Scalar::has_v_signed_int() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Scalar::set_has_v_signed_int() {
  _has_bits_[0] |= 0x00000004u;
}
void Scalar::clear_has_v_signed_int() {
  _has_bits_[0] &= ~0x00000004u;
}
void Scalar::clear_v_signed_int() {
  v_signed_int_ = GOOGLE_LONGLONG(0);
  clear_has_v_signed_int();
}
::google::protobuf::int64 Scalar::v_signed_int() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Datatypes.Scalar.v_signed_int)
  return v_signed_int_;
}
void Scalar::set_v_signed_int(::google::protobuf::int64 value) {
  set_has_v_signed_int();
  v_signed_int_ = value;
  // @@protoc_insertion_point(field_set:Mysqlx.Datatypes.Scalar.v_signed_int)
}

// optional uint64 v_unsigned_int = 3;
bool Scalar::has_v_unsigned_int() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Scalar::set_has_v_unsigned_int() {
  _has_bits_[0] |= 0x00000008u;
}
void Scalar::clear_has_v_unsigned_int() {
  _has_bits_[0] &= ~0x00000008u;
}
void Scalar::clear_v_unsigned_int() {
  v_unsigned_int_ = GOOGLE_ULONGLONG(0);
  clear_has_v_unsigned_int();
}
::google::protobuf::uint64 Scalar::v_unsigned_int() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Datatypes.Scalar.v_unsigned_int)
  return v_unsigned_int_;
}
void Scalar::set_v_unsigned_int(::google::protobuf::uint64 value) {
  set_has_v_unsigned_int();
  v_unsigned_int_ = value;
  // @@protoc_insertion_point(field_set:Mysqlx.Datatypes.Scalar.v_unsigned_int)
}

// optional .Mysqlx.Datatypes.Scalar.Octets v_octets = 5;
bool Scalar::has_v_octets() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Scalar::set_has_v_octets() {
  _has_bits_[0] |= 0x00000001u;
}
void Scalar::clear_has_v_octets() {
  _has_bits_[0] &= ~0x00000001u;
}
void Scalar::clear_v_octets() {
  if (v_octets_ != NULL) v_octets_->::Mysqlx::Datatypes::Scalar_Octets::Clear();
  clear_has_v_octets();
}
const ::Mysqlx::Datatypes::Scalar_Octets& Scalar::v_octets() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Datatypes.Scalar.v_octets)
  return v_octets_ != NULL ? *v_octets_
                         : *::Mysqlx::Datatypes::Scalar_Octets::internal_default_instance();
}
::Mysqlx::Datatypes::Scalar_Octets* Scalar::mutable_v_octets() {
  set_has_v_octets();
  if (v_octets_ == NULL) {
    v_octets_ = new ::Mysqlx::Datatypes::Scalar_Octets;
  }
  // @@protoc_insertion_point(field_mutable:Mysqlx.Datatypes.Scalar.v_octets)
  return v_octets_;
}
::Mysqlx::Datatypes::Scalar_Octets* Scalar::release_v_octets() {
  // @@protoc_insertion_point(field_release:Mysqlx.Datatypes.Scalar.v_octets)
  clear_has_v_octets();
  ::Mysqlx::Datatypes::Scalar_Octets* temp = v_octets_;
  v_octets_ = NULL;
  return temp;
}
void Scalar::set_allocated_v_octets(::Mysqlx::Datatypes::Scalar_Octets* v_octets) {
  delete v_octets_;
  v_octets_ = v_octets;
  if (v_octets) {
    set_has_v_octets();
  } else {
    clear_has_v_octets();
  }
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Datatypes.Scalar.v_octets)
}

// optional double v_double = 6;
bool Scalar::has_v_double() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Scalar::set_has_v_double() {
  _has_bits_[0] |= 0x00000010u;
}
void Scalar::clear_has_v_double() {
  _has_bits_[0] &= ~0x00000010u;
}
void Scalar::clear_v_double() {
  v_double_ = 0;
  clear_has_v_double();
}
double Scalar::v_double() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Datatypes.Scalar.v_double)
  return v_double_;
}
void Scalar::set_v_double(double value) {
  set_has_v_double();
  v_double_ = value;
  // @@protoc_insertion_point(field_set:Mysqlx.Datatypes.Scalar.v_double)
}

// optional float v_float = 7;
bool Scalar::has_v_float() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Scalar::set_has_v_float() {
  _has_bits_[0] |= 0x00000020u;
}
void Scalar::clear_has_v_float() {
  _has_bits_[0] &= ~0x00000020u;
}
void Scalar::clear_v_float() {
  v_float_ = 0;
  clear_has_v_float();
}
float Scalar::v_float() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Datatypes.Scalar.v_float)
  return v_float_;
}
void Scalar::set_v_float(float value) {
  set_has_v_float();
  v_float_ = value;
  // @@protoc_insertion_point(field_set:Mysqlx.Datatypes.Scalar.v_float)
}

// optional bool v_bool = 8;
bool Scalar::has_v_bool() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Scalar::set_has_v_bool() {
  _has_bits_[0] |= 0x00000040u;
}
void Scalar::clear_has_v_bool() {
  _has_bits_[0] &= ~0x00000040u;
}
void Scalar::clear_v_bool() {
  v_bool_ = false;
  clear_has_v_bool();
}
bool Scalar::v_bool() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Datatypes.Scalar.v_bool)
  return v_bool_;
}
void Scalar::set_v_bool(bool value) {
  set_has_v_bool();
  v_bool_ = value;
  // @@protoc_insertion_point(field_set:Mysqlx.Datatypes.Scalar.v_bool)
}

// optional .Mysqlx.Datatypes.Scalar.String v_string = 9;
bool Scalar::has_v_string() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Scalar::set_has_v_string() {
  _has_bits_[0] |= 0x00000002u;
}
void Scalar::clear_has_v_string() {
  _has_bits_[0] &= ~0x00000002u;
}
void Scalar::clear_v_string() {
  if (v_string_ != NULL) v_string_->::Mysqlx::Datatypes::Scalar_String::Clear();
  clear_has_v_string();
}
const ::Mysqlx::Datatypes::Scalar_String& Scalar::v_string() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Datatypes.Scalar.v_string)
  return v_string_ != NULL ? *v_string_
                         : *::Mysqlx::Datatypes::Scalar_String::internal_default_instance();
}
::Mysqlx::Datatypes::Scalar_String* Scalar::mutable_v_string() {
  set_has_v_string();
  if (v_string_ == NULL) {
    v_string_ = new ::Mysqlx::Datatypes::Scalar_String;
  }
  // @@protoc_insertion_point(field_mutable:Mysqlx.Datatypes.Scalar.v_string)
  return v_string_;
}
::Mysqlx::Datatypes::Scalar_String* Scalar::release_v_string() {
  // @@protoc_insertion_point(field_release:Mysqlx.Datatypes.Scalar.v_string)
  clear_has_v_string();
  ::Mysqlx::Datatypes::Scalar_String* temp = v_string_;
  v_string_ = NULL;
  return temp;
}
void Scalar::set_allocated_v_string(::Mysqlx::Datatypes::Scalar_String* v_string) {
  delete v_string_;
  v_string_ = v_string;
  if (v_string) {
    set_has_v_string();
  } else {
    clear_has_v_string();
  }
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Datatypes.Scalar.v_string)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Object_ObjectField::kKeyFieldNumber;
const int Object_ObjectField::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Object_ObjectField::Object_ObjectField()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mysqlx_5fdatatypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Datatypes.Object.ObjectField)
}
Object_ObjectField::Object_ObjectField(const Object_ObjectField& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_value()) {
    value_ = new ::Mysqlx::Datatypes::Any(*from.value_);
  } else {
    value_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Datatypes.Object.ObjectField)
}

void Object_ObjectField::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = NULL;
}

Object_ObjectField::~Object_ObjectField() {
  // @@protoc_insertion_point(destructor:Mysqlx.Datatypes.Object.ObjectField)
  SharedDtor();
}

void Object_ObjectField::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete value_;
  }
}

void Object_ObjectField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Object_ObjectField::descriptor() {
  protobuf_mysqlx_5fdatatypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fdatatypes_2eproto::file_level_metadata[3].descriptor;
}

const Object_ObjectField& Object_ObjectField::default_instance() {
  protobuf_mysqlx_5fdatatypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

Object_ObjectField* Object_ObjectField::New(::google::protobuf::Arena* arena) const {
  Object_ObjectField* n = new Object_ObjectField;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Object_ObjectField::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Datatypes.Object.ObjectField)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      GOOGLE_DCHECK(!key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*key_.UnsafeRawStringPointer())->clear();
    }
    if (has_value()) {
      GOOGLE_DCHECK(value_ != NULL);
      value_->::Mysqlx::Datatypes::Any::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Object_ObjectField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Datatypes.Object.ObjectField)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Mysqlx.Datatypes.Object.ObjectField.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .Mysqlx.Datatypes.Any value = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Datatypes.Object.ObjectField)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Datatypes.Object.ObjectField)
  return false;
#undef DO_
}

void Object_ObjectField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Datatypes.Object.ObjectField)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Mysqlx.Datatypes.Object.ObjectField.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // required .Mysqlx.Datatypes.Any value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->value_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Datatypes.Object.ObjectField)
}

::google::protobuf::uint8* Object_ObjectField::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Datatypes.Object.ObjectField)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Mysqlx.Datatypes.Object.ObjectField.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required .Mysqlx.Datatypes.Any value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->value_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Datatypes.Object.ObjectField)
  return target;
}

size_t Object_ObjectField::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Mysqlx.Datatypes.Object.ObjectField)
  size_t total_size = 0;

  if (has_key()) {
    // required string key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  if (has_value()) {
    // required .Mysqlx.Datatypes.Any value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->value_);
  }

  return total_size;
}
size_t Object_ObjectField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Datatypes.Object.ObjectField)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());

    // required .Mysqlx.Datatypes.Any value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->value_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Object_ObjectField::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mysqlx.Datatypes.Object.ObjectField)
  GOOGLE_DCHECK_NE(&from, this);
  const Object_ObjectField* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Object_ObjectField>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mysqlx.Datatypes.Object.ObjectField)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mysqlx.Datatypes.Object.ObjectField)
    MergeFrom(*source);
  }
}

void Object_ObjectField::MergeFrom(const Object_ObjectField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Datatypes.Object.ObjectField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_value()) {
      mutable_value()->::Mysqlx::Datatypes::Any::MergeFrom(from.value());
    }
  }
}

void Object_ObjectField::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mysqlx.Datatypes.Object.ObjectField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Object_ObjectField::CopyFrom(const Object_ObjectField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Datatypes.Object.ObjectField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object_ObjectField::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_value()) {
    if (!this->value_->IsInitialized()) return false;
  }
  return true;
}

void Object_ObjectField::Swap(Object_ObjectField* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Object_ObjectField::InternalSwap(Object_ObjectField* other) {
  key_.Swap(&other->key_);
  std::swap(value_, other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Object_ObjectField::GetMetadata() const {
  protobuf_mysqlx_5fdatatypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fdatatypes_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Object_ObjectField

// required string key = 1;
bool Object_ObjectField::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Object_ObjectField::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void Object_ObjectField::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void Object_ObjectField::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& Object_ObjectField::key() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Datatypes.Object.ObjectField.key)
  return key_.GetNoArena();
}
void Object_ObjectField::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Mysqlx.Datatypes.Object.ObjectField.key)
}
#if LANG_CXX11
void Object_ObjectField::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mysqlx.Datatypes.Object.ObjectField.key)
}
#endif
void Object_ObjectField::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mysqlx.Datatypes.Object.ObjectField.key)
}
void Object_ObjectField::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Datatypes.Object.ObjectField.key)
}
::std::string* Object_ObjectField::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:Mysqlx.Datatypes.Object.ObjectField.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Object_ObjectField::release_key() {
  // @@protoc_insertion_point(field_release:Mysqlx.Datatypes.Object.ObjectField.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Object_ObjectField::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Datatypes.Object.ObjectField.key)
}

// required .Mysqlx.Datatypes.Any value = 2;
bool Object_ObjectField::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Object_ObjectField::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void Object_ObjectField::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void Object_ObjectField::clear_value() {
  if (value_ != NULL) value_->::Mysqlx::Datatypes::Any::Clear();
  clear_has_value();
}
const ::Mysqlx::Datatypes::Any& Object_ObjectField::value() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Datatypes.Object.ObjectField.value)
  return value_ != NULL ? *value_
                         : *::Mysqlx::Datatypes::Any::internal_default_instance();
}
::Mysqlx::Datatypes::Any* Object_ObjectField::mutable_value() {
  set_has_value();
  if (value_ == NULL) {
    value_ = new ::Mysqlx::Datatypes::Any;
  }
  // @@protoc_insertion_point(field_mutable:Mysqlx.Datatypes.Object.ObjectField.value)
  return value_;
}
::Mysqlx::Datatypes::Any* Object_ObjectField::release_value() {
  // @@protoc_insertion_point(field_release:Mysqlx.Datatypes.Object.ObjectField.value)
  clear_has_value();
  ::Mysqlx::Datatypes::Any* temp = value_;
  value_ = NULL;
  return temp;
}
void Object_ObjectField::set_allocated_value(::Mysqlx::Datatypes::Any* value) {
  delete value_;
  value_ = value;
  if (value) {
    set_has_value();
  } else {
    clear_has_value();
  }
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Datatypes.Object.ObjectField.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Object::kFldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Object::Object()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mysqlx_5fdatatypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Datatypes.Object)
}
Object::Object(const Object& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      fld_(from.fld_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Datatypes.Object)
}

void Object::SharedCtor() {
  _cached_size_ = 0;
}

Object::~Object() {
  // @@protoc_insertion_point(destructor:Mysqlx.Datatypes.Object)
  SharedDtor();
}

void Object::SharedDtor() {
}

void Object::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Object::descriptor() {
  protobuf_mysqlx_5fdatatypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fdatatypes_2eproto::file_level_metadata[4].descriptor;
}

const Object& Object::default_instance() {
  protobuf_mysqlx_5fdatatypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

Object* Object::New(::google::protobuf::Arena* arena) const {
  Object* n = new Object;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Object::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Datatypes.Object)
  fld_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Object::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Datatypes.Object)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Mysqlx.Datatypes.Object.ObjectField fld = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_fld()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Datatypes.Object)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Datatypes.Object)
  return false;
#undef DO_
}

void Object::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Datatypes.Object)
  // repeated .Mysqlx.Datatypes.Object.ObjectField fld = 1;
  for (unsigned int i = 0, n = this->fld_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fld(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Datatypes.Object)
}

::google::protobuf::uint8* Object::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Datatypes.Object)
  // repeated .Mysqlx.Datatypes.Object.ObjectField fld = 1;
  for (unsigned int i = 0, n = this->fld_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->fld(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Datatypes.Object)
  return target;
}

size_t Object::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Datatypes.Object)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .Mysqlx.Datatypes.Object.ObjectField fld = 1;
  {
    unsigned int count = this->fld_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fld(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Object::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mysqlx.Datatypes.Object)
  GOOGLE_DCHECK_NE(&from, this);
  const Object* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Object>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mysqlx.Datatypes.Object)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mysqlx.Datatypes.Object)
    MergeFrom(*source);
  }
}

void Object::MergeFrom(const Object& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Datatypes.Object)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fld_.MergeFrom(from.fld_);
}

void Object::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mysqlx.Datatypes.Object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Object::CopyFrom(const Object& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Datatypes.Object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->fld())) return false;
  return true;
}

void Object::Swap(Object* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Object::InternalSwap(Object* other) {
  fld_.UnsafeArenaSwap(&other->fld_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Object::GetMetadata() const {
  protobuf_mysqlx_5fdatatypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fdatatypes_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Object

// repeated .Mysqlx.Datatypes.Object.ObjectField fld = 1;
int Object::fld_size() const {
  return fld_.size();
}
void Object::clear_fld() {
  fld_.Clear();
}
const ::Mysqlx::Datatypes::Object_ObjectField& Object::fld(int index) const {
  // @@protoc_insertion_point(field_get:Mysqlx.Datatypes.Object.fld)
  return fld_.Get(index);
}
::Mysqlx::Datatypes::Object_ObjectField* Object::mutable_fld(int index) {
  // @@protoc_insertion_point(field_mutable:Mysqlx.Datatypes.Object.fld)
  return fld_.Mutable(index);
}
::Mysqlx::Datatypes::Object_ObjectField* Object::add_fld() {
  // @@protoc_insertion_point(field_add:Mysqlx.Datatypes.Object.fld)
  return fld_.Add();
}
::google::protobuf::RepeatedPtrField< ::Mysqlx::Datatypes::Object_ObjectField >*
Object::mutable_fld() {
  // @@protoc_insertion_point(field_mutable_list:Mysqlx.Datatypes.Object.fld)
  return &fld_;
}
const ::google::protobuf::RepeatedPtrField< ::Mysqlx::Datatypes::Object_ObjectField >&
Object::fld() const {
  // @@protoc_insertion_point(field_list:Mysqlx.Datatypes.Object.fld)
  return fld_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Array::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Array::Array()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mysqlx_5fdatatypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Datatypes.Array)
}
Array::Array(const Array& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      value_(from.value_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Datatypes.Array)
}

void Array::SharedCtor() {
  _cached_size_ = 0;
}

Array::~Array() {
  // @@protoc_insertion_point(destructor:Mysqlx.Datatypes.Array)
  SharedDtor();
}

void Array::SharedDtor() {
}

void Array::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Array::descriptor() {
  protobuf_mysqlx_5fdatatypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fdatatypes_2eproto::file_level_metadata[5].descriptor;
}

const Array& Array::default_instance() {
  protobuf_mysqlx_5fdatatypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

Array* Array::New(::google::protobuf::Arena* arena) const {
  Array* n = new Array;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Array::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Datatypes.Array)
  value_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Array::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Datatypes.Array)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Mysqlx.Datatypes.Any value = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_value()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Datatypes.Array)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Datatypes.Array)
  return false;
#undef DO_
}

void Array::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Datatypes.Array)
  // repeated .Mysqlx.Datatypes.Any value = 1;
  for (unsigned int i = 0, n = this->value_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->value(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Datatypes.Array)
}

::google::protobuf::uint8* Array::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Datatypes.Array)
  // repeated .Mysqlx.Datatypes.Any value = 1;
  for (unsigned int i = 0, n = this->value_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->value(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Datatypes.Array)
  return target;
}

size_t Array::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Datatypes.Array)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .Mysqlx.Datatypes.Any value = 1;
  {
    unsigned int count = this->value_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Array::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mysqlx.Datatypes.Array)
  GOOGLE_DCHECK_NE(&from, this);
  const Array* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Array>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mysqlx.Datatypes.Array)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mysqlx.Datatypes.Array)
    MergeFrom(*source);
  }
}

void Array::MergeFrom(const Array& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Datatypes.Array)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.MergeFrom(from.value_);
}

void Array::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mysqlx.Datatypes.Array)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Array::CopyFrom(const Array& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Datatypes.Array)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Array::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->value())) return false;
  return true;
}

void Array::Swap(Array* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Array::InternalSwap(Array* other) {
  value_.UnsafeArenaSwap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Array::GetMetadata() const {
  protobuf_mysqlx_5fdatatypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fdatatypes_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Array

// repeated .Mysqlx.Datatypes.Any value = 1;
int Array::value_size() const {
  return value_.size();
}
void Array::clear_value() {
  value_.Clear();
}
const ::Mysqlx::Datatypes::Any& Array::value(int index) const {
  // @@protoc_insertion_point(field_get:Mysqlx.Datatypes.Array.value)
  return value_.Get(index);
}
::Mysqlx::Datatypes::Any* Array::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:Mysqlx.Datatypes.Array.value)
  return value_.Mutable(index);
}
::Mysqlx::Datatypes::Any* Array::add_value() {
  // @@protoc_insertion_point(field_add:Mysqlx.Datatypes.Array.value)
  return value_.Add();
}
::google::protobuf::RepeatedPtrField< ::Mysqlx::Datatypes::Any >*
Array::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:Mysqlx.Datatypes.Array.value)
  return &value_;
}
const ::google::protobuf::RepeatedPtrField< ::Mysqlx::Datatypes::Any >&
Array::value() const {
  // @@protoc_insertion_point(field_list:Mysqlx.Datatypes.Array.value)
  return value_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Any::kTypeFieldNumber;
const int Any::kScalarFieldNumber;
const int Any::kObjFieldNumber;
const int Any::kArrayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Any::Any()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mysqlx_5fdatatypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Datatypes.Any)
}
Any::Any(const Any& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_scalar()) {
    scalar_ = new ::Mysqlx::Datatypes::Scalar(*from.scalar_);
  } else {
    scalar_ = NULL;
  }
  if (from.has_obj()) {
    obj_ = new ::Mysqlx::Datatypes::Object(*from.obj_);
  } else {
    obj_ = NULL;
  }
  if (from.has_array()) {
    array_ = new ::Mysqlx::Datatypes::Array(*from.array_);
  } else {
    array_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Datatypes.Any)
}

void Any::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&scalar_, 0, reinterpret_cast<char*>(&array_) -
    reinterpret_cast<char*>(&scalar_) + sizeof(array_));
  type_ = 1;
}

Any::~Any() {
  // @@protoc_insertion_point(destructor:Mysqlx.Datatypes.Any)
  SharedDtor();
}

void Any::SharedDtor() {
  if (this != internal_default_instance()) {
    delete scalar_;
  }
  if (this != internal_default_instance()) {
    delete obj_;
  }
  if (this != internal_default_instance()) {
    delete array_;
  }
}

void Any::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Any::descriptor() {
  protobuf_mysqlx_5fdatatypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fdatatypes_2eproto::file_level_metadata[6].descriptor;
}

const Any& Any::default_instance() {
  protobuf_mysqlx_5fdatatypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

Any* Any::New(::google::protobuf::Arena* arena) const {
  Any* n = new Any;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Any::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Datatypes.Any)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_scalar()) {
      GOOGLE_DCHECK(scalar_ != NULL);
      scalar_->::Mysqlx::Datatypes::Scalar::Clear();
    }
    if (has_obj()) {
      GOOGLE_DCHECK(obj_ != NULL);
      obj_->::Mysqlx::Datatypes::Object::Clear();
    }
    if (has_array()) {
      GOOGLE_DCHECK(array_ != NULL);
      array_->::Mysqlx::Datatypes::Array::Clear();
    }
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Any::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Datatypes.Any)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Mysqlx.Datatypes.Any.Type type = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Mysqlx::Datatypes::Any_Type_IsValid(value)) {
            set_type(static_cast< ::Mysqlx::Datatypes::Any_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Mysqlx.Datatypes.Scalar scalar = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scalar()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Mysqlx.Datatypes.Object obj = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_obj()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Mysqlx.Datatypes.Array array = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_array()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Datatypes.Any)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Datatypes.Any)
  return false;
#undef DO_
}

void Any::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Datatypes.Any)
  // required .Mysqlx.Datatypes.Any.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .Mysqlx.Datatypes.Scalar scalar = 2;
  if (has_scalar()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->scalar_, output);
  }

  // optional .Mysqlx.Datatypes.Object obj = 3;
  if (has_obj()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->obj_, output);
  }

  // optional .Mysqlx.Datatypes.Array array = 4;
  if (has_array()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->array_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Datatypes.Any)
}

::google::protobuf::uint8* Any::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Datatypes.Any)
  // required .Mysqlx.Datatypes.Any.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .Mysqlx.Datatypes.Scalar scalar = 2;
  if (has_scalar()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->scalar_, false, target);
  }

  // optional .Mysqlx.Datatypes.Object obj = 3;
  if (has_obj()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->obj_, false, target);
  }

  // optional .Mysqlx.Datatypes.Array array = 4;
  if (has_array()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->array_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Datatypes.Any)
  return target;
}

size_t Any::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Datatypes.Any)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .Mysqlx.Datatypes.Any.Type type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .Mysqlx.Datatypes.Scalar scalar = 2;
    if (has_scalar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->scalar_);
    }

    // optional .Mysqlx.Datatypes.Object obj = 3;
    if (has_obj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->obj_);
    }

    // optional .Mysqlx.Datatypes.Array array = 4;
    if (has_array()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->array_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Any::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mysqlx.Datatypes.Any)
  GOOGLE_DCHECK_NE(&from, this);
  const Any* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Any>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mysqlx.Datatypes.Any)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mysqlx.Datatypes.Any)
    MergeFrom(*source);
  }
}

void Any::MergeFrom(const Any& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Datatypes.Any)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_scalar()) {
      mutable_scalar()->::Mysqlx::Datatypes::Scalar::MergeFrom(from.scalar());
    }
    if (from.has_obj()) {
      mutable_obj()->::Mysqlx::Datatypes::Object::MergeFrom(from.obj());
    }
    if (from.has_array()) {
      mutable_array()->::Mysqlx::Datatypes::Array::MergeFrom(from.array());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
}

void Any::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mysqlx.Datatypes.Any)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Any::CopyFrom(const Any& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Datatypes.Any)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Any::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  if (has_scalar()) {
    if (!this->scalar_->IsInitialized()) return false;
  }
  if (has_obj()) {
    if (!this->obj_->IsInitialized()) return false;
  }
  if (has_array()) {
    if (!this->array_->IsInitialized()) return false;
  }
  return true;
}

void Any::Swap(Any* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Any::InternalSwap(Any* other) {
  std::swap(scalar_, other->scalar_);
  std::swap(obj_, other->obj_);
  std::swap(array_, other->array_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Any::GetMetadata() const {
  protobuf_mysqlx_5fdatatypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fdatatypes_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Any

// required .Mysqlx.Datatypes.Any.Type type = 1;
bool Any::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Any::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
void Any::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void Any::clear_type() {
  type_ = 1;
  clear_has_type();
}
::Mysqlx::Datatypes::Any_Type Any::type() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Datatypes.Any.type)
  return static_cast< ::Mysqlx::Datatypes::Any_Type >(type_);
}
void Any::set_type(::Mysqlx::Datatypes::Any_Type value) {
  assert(::Mysqlx::Datatypes::Any_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Mysqlx.Datatypes.Any.type)
}

// optional .Mysqlx.Datatypes.Scalar scalar = 2;
bool Any::has_scalar() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Any::set_has_scalar() {
  _has_bits_[0] |= 0x00000001u;
}
void Any::clear_has_scalar() {
  _has_bits_[0] &= ~0x00000001u;
}
void Any::clear_scalar() {
  if (scalar_ != NULL) scalar_->::Mysqlx::Datatypes::Scalar::Clear();
  clear_has_scalar();
}
const ::Mysqlx::Datatypes::Scalar& Any::scalar() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Datatypes.Any.scalar)
  return scalar_ != NULL ? *scalar_
                         : *::Mysqlx::Datatypes::Scalar::internal_default_instance();
}
::Mysqlx::Datatypes::Scalar* Any::mutable_scalar() {
  set_has_scalar();
  if (scalar_ == NULL) {
    scalar_ = new ::Mysqlx::Datatypes::Scalar;
  }
  // @@protoc_insertion_point(field_mutable:Mysqlx.Datatypes.Any.scalar)
  return scalar_;
}
::Mysqlx::Datatypes::Scalar* Any::release_scalar() {
  // @@protoc_insertion_point(field_release:Mysqlx.Datatypes.Any.scalar)
  clear_has_scalar();
  ::Mysqlx::Datatypes::Scalar* temp = scalar_;
  scalar_ = NULL;
  return temp;
}
void Any::set_allocated_scalar(::Mysqlx::Datatypes::Scalar* scalar) {
  delete scalar_;
  scalar_ = scalar;
  if (scalar) {
    set_has_scalar();
  } else {
    clear_has_scalar();
  }
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Datatypes.Any.scalar)
}

// optional .Mysqlx.Datatypes.Object obj = 3;
bool Any::has_obj() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Any::set_has_obj() {
  _has_bits_[0] |= 0x00000002u;
}
void Any::clear_has_obj() {
  _has_bits_[0] &= ~0x00000002u;
}
void Any::clear_obj() {
  if (obj_ != NULL) obj_->::Mysqlx::Datatypes::Object::Clear();
  clear_has_obj();
}
const ::Mysqlx::Datatypes::Object& Any::obj() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Datatypes.Any.obj)
  return obj_ != NULL ? *obj_
                         : *::Mysqlx::Datatypes::Object::internal_default_instance();
}
::Mysqlx::Datatypes::Object* Any::mutable_obj() {
  set_has_obj();
  if (obj_ == NULL) {
    obj_ = new ::Mysqlx::Datatypes::Object;
  }
  // @@protoc_insertion_point(field_mutable:Mysqlx.Datatypes.Any.obj)
  return obj_;
}
::Mysqlx::Datatypes::Object* Any::release_obj() {
  // @@protoc_insertion_point(field_release:Mysqlx.Datatypes.Any.obj)
  clear_has_obj();
  ::Mysqlx::Datatypes::Object* temp = obj_;
  obj_ = NULL;
  return temp;
}
void Any::set_allocated_obj(::Mysqlx::Datatypes::Object* obj) {
  delete obj_;
  obj_ = obj;
  if (obj) {
    set_has_obj();
  } else {
    clear_has_obj();
  }
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Datatypes.Any.obj)
}

// optional .Mysqlx.Datatypes.Array array = 4;
bool Any::has_array() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Any::set_has_array() {
  _has_bits_[0] |= 0x00000004u;
}
void Any::clear_has_array() {
  _has_bits_[0] &= ~0x00000004u;
}
void Any::clear_array() {
  if (array_ != NULL) array_->::Mysqlx::Datatypes::Array::Clear();
  clear_has_array();
}
const ::Mysqlx::Datatypes::Array& Any::array() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Datatypes.Any.array)
  return array_ != NULL ? *array_
                         : *::Mysqlx::Datatypes::Array::internal_default_instance();
}
::Mysqlx::Datatypes::Array* Any::mutable_array() {
  set_has_array();
  if (array_ == NULL) {
    array_ = new ::Mysqlx::Datatypes::Array;
  }
  // @@protoc_insertion_point(field_mutable:Mysqlx.Datatypes.Any.array)
  return array_;
}
::Mysqlx::Datatypes::Array* Any::release_array() {
  // @@protoc_insertion_point(field_release:Mysqlx.Datatypes.Any.array)
  clear_has_array();
  ::Mysqlx::Datatypes::Array* temp = array_;
  array_ = NULL;
  return temp;
}
void Any::set_allocated_array(::Mysqlx::Datatypes::Array* array) {
  delete array_;
  array_ = array;
  if (array) {
    set_has_array();
  } else {
    clear_has_array();
  }
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Datatypes.Any.array)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Datatypes
}  // namespace Mysqlx

// @@protoc_insertion_point(global_scope)
