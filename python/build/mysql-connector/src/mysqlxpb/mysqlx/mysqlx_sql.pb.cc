// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysqlx_sql.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mysqlx_sql.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Mysqlx {
namespace Sql {
class StmtExecuteDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StmtExecute> {
} _StmtExecute_default_instance_;
class StmtExecuteOkDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StmtExecuteOk> {
} _StmtExecuteOk_default_instance_;

namespace protobuf_mysqlx_5fsql_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StmtExecute, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StmtExecute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StmtExecute, namespace__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StmtExecute, stmt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StmtExecute, args_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StmtExecute, compact_metadata_),
  0,
  1,
  ~0u,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StmtExecuteOk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StmtExecuteOk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 8, sizeof(StmtExecute)},
  { 12, 16, sizeof(StmtExecuteOk)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_StmtExecute_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StmtExecuteOk_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "mysqlx_sql.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _StmtExecute_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  StmtExecute::_default_namespace__.Shutdown();
  _StmtExecuteOk_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::Mysqlx::Datatypes::protobuf_mysqlx_5fdatatypes_2eproto::InitDefaults();
  StmtExecute::_default_namespace__.DefaultConstruct();
  *StmtExecute::_default_namespace__.get_mutable() = ::std::string("sql", 3);
  _StmtExecute_default_instance_.DefaultConstruct();
  _StmtExecuteOk_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\020mysqlx_sql.proto\022\nMysqlx.Sql\032\026mysqlx_d"
      "atatypes.proto\"y\n\013StmtExecute\022\026\n\tnamespa"
      "ce\030\003 \001(\t:\003sql\022\014\n\004stmt\030\001 \002(\014\022#\n\004args\030\002 \003("
      "\0132\025.Mysqlx.Datatypes.Any\022\037\n\020compact_meta"
      "data\030\004 \001(\010:\005false\"\017\n\rStmtExecuteOkB\036\n\034co"
      "m.mysql.cj.mysqlx.protobuf"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 226);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mysqlx_sql.proto", &protobuf_RegisterTypes);
  ::Mysqlx::Datatypes::protobuf_mysqlx_5fdatatypes_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_mysqlx_5fsql_2eproto


// ===================================================================

::google::protobuf::internal::ExplicitlyConstructed< ::std::string> StmtExecute::_default_namespace__;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StmtExecute::kNamespaceFieldNumber;
const int StmtExecute::kStmtFieldNumber;
const int StmtExecute::kArgsFieldNumber;
const int StmtExecute::kCompactMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StmtExecute::StmtExecute()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mysqlx_5fsql_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Sql.StmtExecute)
}
StmtExecute::StmtExecute(const StmtExecute& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      args_(from.args_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&StmtExecute::_default_namespace__.get());
  if (from.has_namespace_()) {
    namespace__.AssignWithDefault(&StmtExecute::_default_namespace__.get(), from.namespace__);
  }
  stmt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_stmt()) {
    stmt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stmt_);
  }
  compact_metadata_ = from.compact_metadata_;
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Sql.StmtExecute)
}

void StmtExecute::SharedCtor() {
  _cached_size_ = 0;
  namespace__.UnsafeSetDefault(&StmtExecute::_default_namespace__.get());
  stmt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  compact_metadata_ = false;
}

StmtExecute::~StmtExecute() {
  // @@protoc_insertion_point(destructor:Mysqlx.Sql.StmtExecute)
  SharedDtor();
}

void StmtExecute::SharedDtor() {
  namespace__.DestroyNoArena(&StmtExecute::_default_namespace__.get());
  stmt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StmtExecute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StmtExecute::descriptor() {
  protobuf_mysqlx_5fsql_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fsql_2eproto::file_level_metadata[0].descriptor;
}

const StmtExecute& StmtExecute::default_instance() {
  protobuf_mysqlx_5fsql_2eproto::InitDefaults();
  return *internal_default_instance();
}

StmtExecute* StmtExecute::New(::google::protobuf::Arena* arena) const {
  StmtExecute* n = new StmtExecute;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StmtExecute::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Sql.StmtExecute)
  args_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_namespace_()) {
      GOOGLE_DCHECK(!namespace__.IsDefault(&StmtExecute::_default_namespace__.get()));
      (*namespace__.UnsafeRawStringPointer())->assign(*&StmtExecute::_default_namespace__.get());
    }
    if (has_stmt()) {
      GOOGLE_DCHECK(!stmt_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*stmt_.UnsafeRawStringPointer())->clear();
    }
  }
  compact_metadata_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StmtExecute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Sql.StmtExecute)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes stmt = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stmt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Mysqlx.Datatypes.Any args = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_args()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // optional string namespace = 3 [default = "sql"];
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_namespace_()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->namespace_().data(), this->namespace_().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Mysqlx.Sql.StmtExecute.namespace");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool compact_metadata = 4 [default = false];
      case 4: {
        if (tag == 32u) {
          set_has_compact_metadata();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &compact_metadata_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Sql.StmtExecute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Sql.StmtExecute)
  return false;
#undef DO_
}

void StmtExecute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Sql.StmtExecute)
  // required bytes stmt = 1;
  if (has_stmt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->stmt(), output);
  }

  // repeated .Mysqlx.Datatypes.Any args = 2;
  for (unsigned int i = 0, n = this->args_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->args(i), output);
  }

  // optional string namespace = 3 [default = "sql"];
  if (has_namespace_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->namespace_().data(), this->namespace_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Mysqlx.Sql.StmtExecute.namespace");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->namespace_(), output);
  }

  // optional bool compact_metadata = 4 [default = false];
  if (has_compact_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->compact_metadata(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Sql.StmtExecute)
}

::google::protobuf::uint8* StmtExecute::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Sql.StmtExecute)
  // required bytes stmt = 1;
  if (has_stmt()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->stmt(), target);
  }

  // repeated .Mysqlx.Datatypes.Any args = 2;
  for (unsigned int i = 0, n = this->args_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->args(i), false, target);
  }

  // optional string namespace = 3 [default = "sql"];
  if (has_namespace_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->namespace_().data(), this->namespace_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Mysqlx.Sql.StmtExecute.namespace");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->namespace_(), target);
  }

  // optional bool compact_metadata = 4 [default = false];
  if (has_compact_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->compact_metadata(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Sql.StmtExecute)
  return target;
}

size_t StmtExecute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Sql.StmtExecute)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required bytes stmt = 1;
  if (has_stmt()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->stmt());
  }
  // repeated .Mysqlx.Datatypes.Any args = 2;
  {
    unsigned int count = this->args_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->args(i));
    }
  }

  // optional string namespace = 3 [default = "sql"];
  if (has_namespace_()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->namespace_());
  }

  // optional bool compact_metadata = 4 [default = false];
  if (has_compact_metadata()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StmtExecute::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mysqlx.Sql.StmtExecute)
  GOOGLE_DCHECK_NE(&from, this);
  const StmtExecute* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StmtExecute>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mysqlx.Sql.StmtExecute)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mysqlx.Sql.StmtExecute)
    MergeFrom(*source);
  }
}

void StmtExecute::MergeFrom(const StmtExecute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Sql.StmtExecute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  args_.MergeFrom(from.args_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_namespace_()) {
      set_has_namespace_();
      namespace__.AssignWithDefault(&StmtExecute::_default_namespace__.get(), from.namespace__);
    }
    if (from.has_stmt()) {
      set_has_stmt();
      stmt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stmt_);
    }
    if (from.has_compact_metadata()) {
      set_compact_metadata(from.compact_metadata());
    }
  }
}

void StmtExecute::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mysqlx.Sql.StmtExecute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StmtExecute::CopyFrom(const StmtExecute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Sql.StmtExecute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StmtExecute::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->args())) return false;
  return true;
}

void StmtExecute::Swap(StmtExecute* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StmtExecute::InternalSwap(StmtExecute* other) {
  args_.UnsafeArenaSwap(&other->args_);
  namespace__.Swap(&other->namespace__);
  stmt_.Swap(&other->stmt_);
  std::swap(compact_metadata_, other->compact_metadata_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StmtExecute::GetMetadata() const {
  protobuf_mysqlx_5fsql_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fsql_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StmtExecute

// optional string namespace = 3 [default = "sql"];
bool StmtExecute::has_namespace_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StmtExecute::set_has_namespace_() {
  _has_bits_[0] |= 0x00000001u;
}
void StmtExecute::clear_has_namespace_() {
  _has_bits_[0] &= ~0x00000001u;
}
void StmtExecute::clear_namespace_() {
  namespace__.ClearToDefaultNoArena(&StmtExecute::_default_namespace__.get());
  clear_has_namespace_();
}
const ::std::string& StmtExecute::namespace_() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Sql.StmtExecute.namespace)
  return namespace__.GetNoArena();
}
void StmtExecute::set_namespace_(const ::std::string& value) {
  set_has_namespace_();
  namespace__.SetNoArena(&StmtExecute::_default_namespace__.get(), value);
  // @@protoc_insertion_point(field_set:Mysqlx.Sql.StmtExecute.namespace)
}
#if LANG_CXX11
void StmtExecute::set_namespace_(::std::string&& value) {
  set_has_namespace_();
  namespace__.SetNoArena(
    &StmtExecute::_default_namespace__.get(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mysqlx.Sql.StmtExecute.namespace)
}
#endif
void StmtExecute::set_namespace_(const char* value) {
  set_has_namespace_();
  namespace__.SetNoArena(&StmtExecute::_default_namespace__.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mysqlx.Sql.StmtExecute.namespace)
}
void StmtExecute::set_namespace_(const char* value, size_t size) {
  set_has_namespace_();
  namespace__.SetNoArena(&StmtExecute::_default_namespace__.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Sql.StmtExecute.namespace)
}
::std::string* StmtExecute::mutable_namespace_() {
  set_has_namespace_();
  // @@protoc_insertion_point(field_mutable:Mysqlx.Sql.StmtExecute.namespace)
  return namespace__.MutableNoArena(&StmtExecute::_default_namespace__.get());
}
::std::string* StmtExecute::release_namespace_() {
  // @@protoc_insertion_point(field_release:Mysqlx.Sql.StmtExecute.namespace)
  clear_has_namespace_();
  return namespace__.ReleaseNoArena(&StmtExecute::_default_namespace__.get());
}
void StmtExecute::set_allocated_namespace_(::std::string* namespace_) {
  if (namespace_ != NULL) {
    set_has_namespace_();
  } else {
    clear_has_namespace_();
  }
  namespace__.SetAllocatedNoArena(&StmtExecute::_default_namespace__.get(), namespace_);
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Sql.StmtExecute.namespace)
}

// required bytes stmt = 1;
bool StmtExecute::has_stmt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StmtExecute::set_has_stmt() {
  _has_bits_[0] |= 0x00000002u;
}
void StmtExecute::clear_has_stmt() {
  _has_bits_[0] &= ~0x00000002u;
}
void StmtExecute::clear_stmt() {
  stmt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stmt();
}
const ::std::string& StmtExecute::stmt() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Sql.StmtExecute.stmt)
  return stmt_.GetNoArena();
}
void StmtExecute::set_stmt(const ::std::string& value) {
  set_has_stmt();
  stmt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Mysqlx.Sql.StmtExecute.stmt)
}
#if LANG_CXX11
void StmtExecute::set_stmt(::std::string&& value) {
  set_has_stmt();
  stmt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mysqlx.Sql.StmtExecute.stmt)
}
#endif
void StmtExecute::set_stmt(const char* value) {
  set_has_stmt();
  stmt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mysqlx.Sql.StmtExecute.stmt)
}
void StmtExecute::set_stmt(const void* value, size_t size) {
  set_has_stmt();
  stmt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Sql.StmtExecute.stmt)
}
::std::string* StmtExecute::mutable_stmt() {
  set_has_stmt();
  // @@protoc_insertion_point(field_mutable:Mysqlx.Sql.StmtExecute.stmt)
  return stmt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StmtExecute::release_stmt() {
  // @@protoc_insertion_point(field_release:Mysqlx.Sql.StmtExecute.stmt)
  clear_has_stmt();
  return stmt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StmtExecute::set_allocated_stmt(::std::string* stmt) {
  if (stmt != NULL) {
    set_has_stmt();
  } else {
    clear_has_stmt();
  }
  stmt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stmt);
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Sql.StmtExecute.stmt)
}

// repeated .Mysqlx.Datatypes.Any args = 2;
int StmtExecute::args_size() const {
  return args_.size();
}
void StmtExecute::clear_args() {
  args_.Clear();
}
const ::Mysqlx::Datatypes::Any& StmtExecute::args(int index) const {
  // @@protoc_insertion_point(field_get:Mysqlx.Sql.StmtExecute.args)
  return args_.Get(index);
}
::Mysqlx::Datatypes::Any* StmtExecute::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:Mysqlx.Sql.StmtExecute.args)
  return args_.Mutable(index);
}
::Mysqlx::Datatypes::Any* StmtExecute::add_args() {
  // @@protoc_insertion_point(field_add:Mysqlx.Sql.StmtExecute.args)
  return args_.Add();
}
::google::protobuf::RepeatedPtrField< ::Mysqlx::Datatypes::Any >*
StmtExecute::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:Mysqlx.Sql.StmtExecute.args)
  return &args_;
}
const ::google::protobuf::RepeatedPtrField< ::Mysqlx::Datatypes::Any >&
StmtExecute::args() const {
  // @@protoc_insertion_point(field_list:Mysqlx.Sql.StmtExecute.args)
  return args_;
}

// optional bool compact_metadata = 4 [default = false];
bool StmtExecute::has_compact_metadata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StmtExecute::set_has_compact_metadata() {
  _has_bits_[0] |= 0x00000004u;
}
void StmtExecute::clear_has_compact_metadata() {
  _has_bits_[0] &= ~0x00000004u;
}
void StmtExecute::clear_compact_metadata() {
  compact_metadata_ = false;
  clear_has_compact_metadata();
}
bool StmtExecute::compact_metadata() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Sql.StmtExecute.compact_metadata)
  return compact_metadata_;
}
void StmtExecute::set_compact_metadata(bool value) {
  set_has_compact_metadata();
  compact_metadata_ = value;
  // @@protoc_insertion_point(field_set:Mysqlx.Sql.StmtExecute.compact_metadata)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StmtExecuteOk::StmtExecuteOk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mysqlx_5fsql_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Sql.StmtExecuteOk)
}
StmtExecuteOk::StmtExecuteOk(const StmtExecuteOk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Sql.StmtExecuteOk)
}

void StmtExecuteOk::SharedCtor() {
  _cached_size_ = 0;
}

StmtExecuteOk::~StmtExecuteOk() {
  // @@protoc_insertion_point(destructor:Mysqlx.Sql.StmtExecuteOk)
  SharedDtor();
}

void StmtExecuteOk::SharedDtor() {
}

void StmtExecuteOk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StmtExecuteOk::descriptor() {
  protobuf_mysqlx_5fsql_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fsql_2eproto::file_level_metadata[1].descriptor;
}

const StmtExecuteOk& StmtExecuteOk::default_instance() {
  protobuf_mysqlx_5fsql_2eproto::InitDefaults();
  return *internal_default_instance();
}

StmtExecuteOk* StmtExecuteOk::New(::google::protobuf::Arena* arena) const {
  StmtExecuteOk* n = new StmtExecuteOk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StmtExecuteOk::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Sql.StmtExecuteOk)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StmtExecuteOk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Sql.StmtExecuteOk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Sql.StmtExecuteOk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Sql.StmtExecuteOk)
  return false;
#undef DO_
}

void StmtExecuteOk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Sql.StmtExecuteOk)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Sql.StmtExecuteOk)
}

::google::protobuf::uint8* StmtExecuteOk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Sql.StmtExecuteOk)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Sql.StmtExecuteOk)
  return target;
}

size_t StmtExecuteOk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Sql.StmtExecuteOk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StmtExecuteOk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mysqlx.Sql.StmtExecuteOk)
  GOOGLE_DCHECK_NE(&from, this);
  const StmtExecuteOk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StmtExecuteOk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mysqlx.Sql.StmtExecuteOk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mysqlx.Sql.StmtExecuteOk)
    MergeFrom(*source);
  }
}

void StmtExecuteOk::MergeFrom(const StmtExecuteOk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Sql.StmtExecuteOk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void StmtExecuteOk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mysqlx.Sql.StmtExecuteOk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StmtExecuteOk::CopyFrom(const StmtExecuteOk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Sql.StmtExecuteOk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StmtExecuteOk::IsInitialized() const {
  return true;
}

void StmtExecuteOk::Swap(StmtExecuteOk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StmtExecuteOk::InternalSwap(StmtExecuteOk* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StmtExecuteOk::GetMetadata() const {
  protobuf_mysqlx_5fsql_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fsql_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StmtExecuteOk

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Sql
}  // namespace Mysqlx

// @@protoc_insertion_point(global_scope)
