// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysqlx_resultset.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mysqlx_resultset.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Mysqlx {
namespace Resultset {
class FetchDoneMoreOutParamsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FetchDoneMoreOutParams> {
} _FetchDoneMoreOutParams_default_instance_;
class FetchDoneMoreResultsetsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FetchDoneMoreResultsets> {
} _FetchDoneMoreResultsets_default_instance_;
class FetchDoneDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FetchDone> {
} _FetchDone_default_instance_;
class ColumnMetaDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ColumnMetaData> {
} _ColumnMetaData_default_instance_;
class RowDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Row> {
} _Row_default_instance_;

namespace protobuf_mysqlx_5fresultset_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchDoneMoreOutParams, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchDoneMoreOutParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchDoneMoreResultsets, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchDoneMoreResultsets, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchDone, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchDone, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnMetaData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnMetaData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnMetaData, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnMetaData, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnMetaData, original_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnMetaData, table_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnMetaData, original_table_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnMetaData, schema_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnMetaData, catalog_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnMetaData, collation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnMetaData, fractional_digits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnMetaData, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnMetaData, flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnMetaData, content_type_),
  11,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Row, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Row, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Row, field_),
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 4, sizeof(FetchDoneMoreOutParams)},
  { 4, 8, sizeof(FetchDoneMoreResultsets)},
  { 8, 12, sizeof(FetchDone)},
  { 12, 28, sizeof(ColumnMetaData)},
  { 40, 45, sizeof(Row)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_FetchDoneMoreOutParams_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FetchDoneMoreResultsets_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FetchDone_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ColumnMetaData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Row_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "mysqlx_resultset.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace

void TableStruct::Shutdown() {
  _FetchDoneMoreOutParams_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _FetchDoneMoreResultsets_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _FetchDone_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _ColumnMetaData_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Row_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _FetchDoneMoreOutParams_default_instance_.DefaultConstruct();
  _FetchDoneMoreResultsets_default_instance_.DefaultConstruct();
  _FetchDone_default_instance_.DefaultConstruct();
  _ColumnMetaData_default_instance_.DefaultConstruct();
  _Row_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\026mysqlx_resultset.proto\022\020Mysqlx.Results"
      "et\"\030\n\026FetchDoneMoreOutParams\"\031\n\027FetchDon"
      "eMoreResultsets\"\013\n\tFetchDone\"\237\003\n\016ColumnM"
      "etaData\0228\n\004type\030\001 \002(\0162*.Mysqlx.Resultset"
      ".ColumnMetaData.FieldType\022\014\n\004name\030\002 \001(\014\022"
      "\025\n\roriginal_name\030\003 \001(\014\022\r\n\005table\030\004 \001(\014\022\026\n"
      "\016original_table\030\005 \001(\014\022\016\n\006schema\030\006 \001(\014\022\017\n"
      "\007catalog\030\007 \001(\014\022\021\n\tcollation\030\010 \001(\004\022\031\n\021fra"
      "ctional_digits\030\t \001(\r\022\016\n\006length\030\n \001(\r\022\r\n\005"
      "flags\030\013 \001(\r\022\024\n\014content_type\030\014 \001(\r\"\202\001\n\tFi"
      "eldType\022\010\n\004SINT\020\001\022\010\n\004UINT\020\002\022\n\n\006DOUBLE\020\005\022"
      "\t\n\005FLOAT\020\006\022\t\n\005BYTES\020\007\022\010\n\004TIME\020\n\022\014\n\010DATET"
      "IME\020\014\022\007\n\003SET\020\017\022\010\n\004ENUM\020\020\022\007\n\003BIT\020\021\022\013\n\007DEC"
      "IMAL\020\022\"\024\n\003Row\022\r\n\005field\030\001 \003(\014B\036\n\034com.mysq"
      "l.cj.mysqlx.protobuf"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 580);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mysqlx_resultset.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_mysqlx_5fresultset_2eproto

const ::google::protobuf::EnumDescriptor* ColumnMetaData_FieldType_descriptor() {
  protobuf_mysqlx_5fresultset_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fresultset_2eproto::file_level_enum_descriptors[0];
}
bool ColumnMetaData_FieldType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 5:
    case 6:
    case 7:
    case 10:
    case 12:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ColumnMetaData_FieldType ColumnMetaData::SINT;
const ColumnMetaData_FieldType ColumnMetaData::UINT;
const ColumnMetaData_FieldType ColumnMetaData::DOUBLE;
const ColumnMetaData_FieldType ColumnMetaData::FLOAT;
const ColumnMetaData_FieldType ColumnMetaData::BYTES;
const ColumnMetaData_FieldType ColumnMetaData::TIME;
const ColumnMetaData_FieldType ColumnMetaData::DATETIME;
const ColumnMetaData_FieldType ColumnMetaData::SET;
const ColumnMetaData_FieldType ColumnMetaData::ENUM;
const ColumnMetaData_FieldType ColumnMetaData::BIT;
const ColumnMetaData_FieldType ColumnMetaData::DECIMAL;
const ColumnMetaData_FieldType ColumnMetaData::FieldType_MIN;
const ColumnMetaData_FieldType ColumnMetaData::FieldType_MAX;
const int ColumnMetaData::FieldType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FetchDoneMoreOutParams::FetchDoneMoreOutParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mysqlx_5fresultset_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Resultset.FetchDoneMoreOutParams)
}
FetchDoneMoreOutParams::FetchDoneMoreOutParams(const FetchDoneMoreOutParams& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Resultset.FetchDoneMoreOutParams)
}

void FetchDoneMoreOutParams::SharedCtor() {
  _cached_size_ = 0;
}

FetchDoneMoreOutParams::~FetchDoneMoreOutParams() {
  // @@protoc_insertion_point(destructor:Mysqlx.Resultset.FetchDoneMoreOutParams)
  SharedDtor();
}

void FetchDoneMoreOutParams::SharedDtor() {
}

void FetchDoneMoreOutParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FetchDoneMoreOutParams::descriptor() {
  protobuf_mysqlx_5fresultset_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fresultset_2eproto::file_level_metadata[0].descriptor;
}

const FetchDoneMoreOutParams& FetchDoneMoreOutParams::default_instance() {
  protobuf_mysqlx_5fresultset_2eproto::InitDefaults();
  return *internal_default_instance();
}

FetchDoneMoreOutParams* FetchDoneMoreOutParams::New(::google::protobuf::Arena* arena) const {
  FetchDoneMoreOutParams* n = new FetchDoneMoreOutParams;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FetchDoneMoreOutParams::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Resultset.FetchDoneMoreOutParams)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FetchDoneMoreOutParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Resultset.FetchDoneMoreOutParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Resultset.FetchDoneMoreOutParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Resultset.FetchDoneMoreOutParams)
  return false;
#undef DO_
}

void FetchDoneMoreOutParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Resultset.FetchDoneMoreOutParams)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Resultset.FetchDoneMoreOutParams)
}

::google::protobuf::uint8* FetchDoneMoreOutParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Resultset.FetchDoneMoreOutParams)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Resultset.FetchDoneMoreOutParams)
  return target;
}

size_t FetchDoneMoreOutParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Resultset.FetchDoneMoreOutParams)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FetchDoneMoreOutParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mysqlx.Resultset.FetchDoneMoreOutParams)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchDoneMoreOutParams* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FetchDoneMoreOutParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mysqlx.Resultset.FetchDoneMoreOutParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mysqlx.Resultset.FetchDoneMoreOutParams)
    MergeFrom(*source);
  }
}

void FetchDoneMoreOutParams::MergeFrom(const FetchDoneMoreOutParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Resultset.FetchDoneMoreOutParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void FetchDoneMoreOutParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mysqlx.Resultset.FetchDoneMoreOutParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchDoneMoreOutParams::CopyFrom(const FetchDoneMoreOutParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Resultset.FetchDoneMoreOutParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchDoneMoreOutParams::IsInitialized() const {
  return true;
}

void FetchDoneMoreOutParams::Swap(FetchDoneMoreOutParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FetchDoneMoreOutParams::InternalSwap(FetchDoneMoreOutParams* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FetchDoneMoreOutParams::GetMetadata() const {
  protobuf_mysqlx_5fresultset_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fresultset_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FetchDoneMoreOutParams

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FetchDoneMoreResultsets::FetchDoneMoreResultsets()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mysqlx_5fresultset_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Resultset.FetchDoneMoreResultsets)
}
FetchDoneMoreResultsets::FetchDoneMoreResultsets(const FetchDoneMoreResultsets& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Resultset.FetchDoneMoreResultsets)
}

void FetchDoneMoreResultsets::SharedCtor() {
  _cached_size_ = 0;
}

FetchDoneMoreResultsets::~FetchDoneMoreResultsets() {
  // @@protoc_insertion_point(destructor:Mysqlx.Resultset.FetchDoneMoreResultsets)
  SharedDtor();
}

void FetchDoneMoreResultsets::SharedDtor() {
}

void FetchDoneMoreResultsets::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FetchDoneMoreResultsets::descriptor() {
  protobuf_mysqlx_5fresultset_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fresultset_2eproto::file_level_metadata[1].descriptor;
}

const FetchDoneMoreResultsets& FetchDoneMoreResultsets::default_instance() {
  protobuf_mysqlx_5fresultset_2eproto::InitDefaults();
  return *internal_default_instance();
}

FetchDoneMoreResultsets* FetchDoneMoreResultsets::New(::google::protobuf::Arena* arena) const {
  FetchDoneMoreResultsets* n = new FetchDoneMoreResultsets;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FetchDoneMoreResultsets::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Resultset.FetchDoneMoreResultsets)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FetchDoneMoreResultsets::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Resultset.FetchDoneMoreResultsets)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Resultset.FetchDoneMoreResultsets)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Resultset.FetchDoneMoreResultsets)
  return false;
#undef DO_
}

void FetchDoneMoreResultsets::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Resultset.FetchDoneMoreResultsets)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Resultset.FetchDoneMoreResultsets)
}

::google::protobuf::uint8* FetchDoneMoreResultsets::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Resultset.FetchDoneMoreResultsets)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Resultset.FetchDoneMoreResultsets)
  return target;
}

size_t FetchDoneMoreResultsets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Resultset.FetchDoneMoreResultsets)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FetchDoneMoreResultsets::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mysqlx.Resultset.FetchDoneMoreResultsets)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchDoneMoreResultsets* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FetchDoneMoreResultsets>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mysqlx.Resultset.FetchDoneMoreResultsets)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mysqlx.Resultset.FetchDoneMoreResultsets)
    MergeFrom(*source);
  }
}

void FetchDoneMoreResultsets::MergeFrom(const FetchDoneMoreResultsets& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Resultset.FetchDoneMoreResultsets)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void FetchDoneMoreResultsets::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mysqlx.Resultset.FetchDoneMoreResultsets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchDoneMoreResultsets::CopyFrom(const FetchDoneMoreResultsets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Resultset.FetchDoneMoreResultsets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchDoneMoreResultsets::IsInitialized() const {
  return true;
}

void FetchDoneMoreResultsets::Swap(FetchDoneMoreResultsets* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FetchDoneMoreResultsets::InternalSwap(FetchDoneMoreResultsets* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FetchDoneMoreResultsets::GetMetadata() const {
  protobuf_mysqlx_5fresultset_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fresultset_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FetchDoneMoreResultsets

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FetchDone::FetchDone()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mysqlx_5fresultset_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Resultset.FetchDone)
}
FetchDone::FetchDone(const FetchDone& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Resultset.FetchDone)
}

void FetchDone::SharedCtor() {
  _cached_size_ = 0;
}

FetchDone::~FetchDone() {
  // @@protoc_insertion_point(destructor:Mysqlx.Resultset.FetchDone)
  SharedDtor();
}

void FetchDone::SharedDtor() {
}

void FetchDone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FetchDone::descriptor() {
  protobuf_mysqlx_5fresultset_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fresultset_2eproto::file_level_metadata[2].descriptor;
}

const FetchDone& FetchDone::default_instance() {
  protobuf_mysqlx_5fresultset_2eproto::InitDefaults();
  return *internal_default_instance();
}

FetchDone* FetchDone::New(::google::protobuf::Arena* arena) const {
  FetchDone* n = new FetchDone;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FetchDone::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Resultset.FetchDone)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FetchDone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Resultset.FetchDone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Resultset.FetchDone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Resultset.FetchDone)
  return false;
#undef DO_
}

void FetchDone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Resultset.FetchDone)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Resultset.FetchDone)
}

::google::protobuf::uint8* FetchDone::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Resultset.FetchDone)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Resultset.FetchDone)
  return target;
}

size_t FetchDone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Resultset.FetchDone)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FetchDone::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mysqlx.Resultset.FetchDone)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchDone* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FetchDone>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mysqlx.Resultset.FetchDone)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mysqlx.Resultset.FetchDone)
    MergeFrom(*source);
  }
}

void FetchDone::MergeFrom(const FetchDone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Resultset.FetchDone)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void FetchDone::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mysqlx.Resultset.FetchDone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchDone::CopyFrom(const FetchDone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Resultset.FetchDone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchDone::IsInitialized() const {
  return true;
}

void FetchDone::Swap(FetchDone* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FetchDone::InternalSwap(FetchDone* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FetchDone::GetMetadata() const {
  protobuf_mysqlx_5fresultset_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fresultset_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FetchDone

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ColumnMetaData::kTypeFieldNumber;
const int ColumnMetaData::kNameFieldNumber;
const int ColumnMetaData::kOriginalNameFieldNumber;
const int ColumnMetaData::kTableFieldNumber;
const int ColumnMetaData::kOriginalTableFieldNumber;
const int ColumnMetaData::kSchemaFieldNumber;
const int ColumnMetaData::kCatalogFieldNumber;
const int ColumnMetaData::kCollationFieldNumber;
const int ColumnMetaData::kFractionalDigitsFieldNumber;
const int ColumnMetaData::kLengthFieldNumber;
const int ColumnMetaData::kFlagsFieldNumber;
const int ColumnMetaData::kContentTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ColumnMetaData::ColumnMetaData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mysqlx_5fresultset_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Resultset.ColumnMetaData)
}
ColumnMetaData::ColumnMetaData(const ColumnMetaData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  original_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_original_name()) {
    original_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.original_name_);
  }
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_table()) {
    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  original_table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_original_table()) {
    original_table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.original_table_);
  }
  schema_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_schema()) {
    schema_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.schema_);
  }
  catalog_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_catalog()) {
    catalog_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.catalog_);
  }
  ::memcpy(&collation_, &from.collation_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&collation_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Resultset.ColumnMetaData)
}

void ColumnMetaData::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  original_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  original_table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  schema_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  catalog_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&collation_, 0, reinterpret_cast<char*>(&content_type_) -
    reinterpret_cast<char*>(&collation_) + sizeof(content_type_));
  type_ = 1;
}

ColumnMetaData::~ColumnMetaData() {
  // @@protoc_insertion_point(destructor:Mysqlx.Resultset.ColumnMetaData)
  SharedDtor();
}

void ColumnMetaData::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  original_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  original_table_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  schema_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  catalog_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ColumnMetaData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ColumnMetaData::descriptor() {
  protobuf_mysqlx_5fresultset_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fresultset_2eproto::file_level_metadata[3].descriptor;
}

const ColumnMetaData& ColumnMetaData::default_instance() {
  protobuf_mysqlx_5fresultset_2eproto::InitDefaults();
  return *internal_default_instance();
}

ColumnMetaData* ColumnMetaData::New(::google::protobuf::Arena* arena) const {
  ColumnMetaData* n = new ColumnMetaData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ColumnMetaData::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Resultset.ColumnMetaData)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_original_name()) {
      GOOGLE_DCHECK(!original_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*original_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_table()) {
      GOOGLE_DCHECK(!table_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*table_.UnsafeRawStringPointer())->clear();
    }
    if (has_original_table()) {
      GOOGLE_DCHECK(!original_table_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*original_table_.UnsafeRawStringPointer())->clear();
    }
    if (has_schema()) {
      GOOGLE_DCHECK(!schema_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*schema_.UnsafeRawStringPointer())->clear();
    }
    if (has_catalog()) {
      GOOGLE_DCHECK(!catalog_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*catalog_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 192u) {
    ::memset(&collation_, 0, reinterpret_cast<char*>(&fractional_digits_) -
      reinterpret_cast<char*>(&collation_) + sizeof(fractional_digits_));
  }
  if (_has_bits_[8 / 32] & 3840u) {
    ::memset(&length_, 0, reinterpret_cast<char*>(&content_type_) -
      reinterpret_cast<char*>(&length_) + sizeof(content_type_));
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ColumnMetaData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Resultset.ColumnMetaData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Mysqlx.Resultset.ColumnMetaData.FieldType type = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Mysqlx::Resultset::ColumnMetaData_FieldType_IsValid(value)) {
            set_type(static_cast< ::Mysqlx::Resultset::ColumnMetaData_FieldType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes original_name = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_original_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes table = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes original_table = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_original_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes schema = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_schema()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes catalog = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_catalog()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 collation = 8;
      case 8: {
        if (tag == 64u) {
          set_has_collation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &collation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fractional_digits = 9;
      case 9: {
        if (tag == 72u) {
          set_has_fractional_digits();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fractional_digits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 length = 10;
      case 10: {
        if (tag == 80u) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 flags = 11;
      case 11: {
        if (tag == 88u) {
          set_has_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 content_type = 12;
      case 12: {
        if (tag == 96u) {
          set_has_content_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &content_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Resultset.ColumnMetaData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Resultset.ColumnMetaData)
  return false;
#undef DO_
}

void ColumnMetaData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Resultset.ColumnMetaData)
  // required .Mysqlx.Resultset.ColumnMetaData.FieldType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // optional bytes original_name = 3;
  if (has_original_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->original_name(), output);
  }

  // optional bytes table = 4;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->table(), output);
  }

  // optional bytes original_table = 5;
  if (has_original_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->original_table(), output);
  }

  // optional bytes schema = 6;
  if (has_schema()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->schema(), output);
  }

  // optional bytes catalog = 7;
  if (has_catalog()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->catalog(), output);
  }

  // optional uint64 collation = 8;
  if (has_collation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->collation(), output);
  }

  // optional uint32 fractional_digits = 9;
  if (has_fractional_digits()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->fractional_digits(), output);
  }

  // optional uint32 length = 10;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->length(), output);
  }

  // optional uint32 flags = 11;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->flags(), output);
  }

  // optional uint32 content_type = 12;
  if (has_content_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->content_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Resultset.ColumnMetaData)
}

::google::protobuf::uint8* ColumnMetaData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Resultset.ColumnMetaData)
  // required .Mysqlx.Resultset.ColumnMetaData.FieldType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional bytes original_name = 3;
  if (has_original_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->original_name(), target);
  }

  // optional bytes table = 4;
  if (has_table()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->table(), target);
  }

  // optional bytes original_table = 5;
  if (has_original_table()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->original_table(), target);
  }

  // optional bytes schema = 6;
  if (has_schema()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->schema(), target);
  }

  // optional bytes catalog = 7;
  if (has_catalog()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->catalog(), target);
  }

  // optional uint64 collation = 8;
  if (has_collation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->collation(), target);
  }

  // optional uint32 fractional_digits = 9;
  if (has_fractional_digits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->fractional_digits(), target);
  }

  // optional uint32 length = 10;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->length(), target);
  }

  // optional uint32 flags = 11;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->flags(), target);
  }

  // optional uint32 content_type = 12;
  if (has_content_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->content_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Resultset.ColumnMetaData)
  return target;
}

size_t ColumnMetaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Resultset.ColumnMetaData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .Mysqlx.Resultset.ColumnMetaData.FieldType type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional bytes original_name = 3;
    if (has_original_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->original_name());
    }

    // optional bytes table = 4;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->table());
    }

    // optional bytes original_table = 5;
    if (has_original_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->original_table());
    }

    // optional bytes schema = 6;
    if (has_schema()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->schema());
    }

    // optional bytes catalog = 7;
    if (has_catalog()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->catalog());
    }

    // optional uint64 collation = 8;
    if (has_collation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->collation());
    }

    // optional uint32 fractional_digits = 9;
    if (has_fractional_digits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fractional_digits());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional uint32 length = 10;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->length());
    }

    // optional uint32 flags = 11;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional uint32 content_type = 12;
    if (has_content_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->content_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ColumnMetaData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mysqlx.Resultset.ColumnMetaData)
  GOOGLE_DCHECK_NE(&from, this);
  const ColumnMetaData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ColumnMetaData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mysqlx.Resultset.ColumnMetaData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mysqlx.Resultset.ColumnMetaData)
    MergeFrom(*source);
  }
}

void ColumnMetaData::MergeFrom(const ColumnMetaData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Resultset.ColumnMetaData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_original_name()) {
      set_has_original_name();
      original_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.original_name_);
    }
    if (from.has_table()) {
      set_has_table();
      table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
    }
    if (from.has_original_table()) {
      set_has_original_table();
      original_table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.original_table_);
    }
    if (from.has_schema()) {
      set_has_schema();
      schema_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.schema_);
    }
    if (from.has_catalog()) {
      set_has_catalog();
      catalog_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.catalog_);
    }
    if (from.has_collation()) {
      set_collation(from.collation());
    }
    if (from.has_fractional_digits()) {
      set_fractional_digits(from.fractional_digits());
    }
  }
  if (from._has_bits_[8 / 32] & 3840u) {
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_content_type()) {
      set_content_type(from.content_type());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
}

void ColumnMetaData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mysqlx.Resultset.ColumnMetaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColumnMetaData::CopyFrom(const ColumnMetaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Resultset.ColumnMetaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnMetaData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000800) != 0x00000800) return false;
  return true;
}

void ColumnMetaData::Swap(ColumnMetaData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ColumnMetaData::InternalSwap(ColumnMetaData* other) {
  name_.Swap(&other->name_);
  original_name_.Swap(&other->original_name_);
  table_.Swap(&other->table_);
  original_table_.Swap(&other->original_table_);
  schema_.Swap(&other->schema_);
  catalog_.Swap(&other->catalog_);
  std::swap(collation_, other->collation_);
  std::swap(fractional_digits_, other->fractional_digits_);
  std::swap(length_, other->length_);
  std::swap(flags_, other->flags_);
  std::swap(content_type_, other->content_type_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ColumnMetaData::GetMetadata() const {
  protobuf_mysqlx_5fresultset_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fresultset_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ColumnMetaData

// required .Mysqlx.Resultset.ColumnMetaData.FieldType type = 1;
bool ColumnMetaData::has_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ColumnMetaData::set_has_type() {
  _has_bits_[0] |= 0x00000800u;
}
void ColumnMetaData::clear_has_type() {
  _has_bits_[0] &= ~0x00000800u;
}
void ColumnMetaData::clear_type() {
  type_ = 1;
  clear_has_type();
}
::Mysqlx::Resultset::ColumnMetaData_FieldType ColumnMetaData::type() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Resultset.ColumnMetaData.type)
  return static_cast< ::Mysqlx::Resultset::ColumnMetaData_FieldType >(type_);
}
void ColumnMetaData::set_type(::Mysqlx::Resultset::ColumnMetaData_FieldType value) {
  assert(::Mysqlx::Resultset::ColumnMetaData_FieldType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Mysqlx.Resultset.ColumnMetaData.type)
}

// optional bytes name = 2;
bool ColumnMetaData::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ColumnMetaData::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ColumnMetaData::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ColumnMetaData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& ColumnMetaData::name() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Resultset.ColumnMetaData.name)
  return name_.GetNoArena();
}
void ColumnMetaData::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Mysqlx.Resultset.ColumnMetaData.name)
}
#if LANG_CXX11
void ColumnMetaData::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mysqlx.Resultset.ColumnMetaData.name)
}
#endif
void ColumnMetaData::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mysqlx.Resultset.ColumnMetaData.name)
}
void ColumnMetaData::set_name(const void* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Resultset.ColumnMetaData.name)
}
::std::string* ColumnMetaData::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:Mysqlx.Resultset.ColumnMetaData.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ColumnMetaData::release_name() {
  // @@protoc_insertion_point(field_release:Mysqlx.Resultset.ColumnMetaData.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ColumnMetaData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Resultset.ColumnMetaData.name)
}

// optional bytes original_name = 3;
bool ColumnMetaData::has_original_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ColumnMetaData::set_has_original_name() {
  _has_bits_[0] |= 0x00000002u;
}
void ColumnMetaData::clear_has_original_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void ColumnMetaData::clear_original_name() {
  original_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_original_name();
}
const ::std::string& ColumnMetaData::original_name() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Resultset.ColumnMetaData.original_name)
  return original_name_.GetNoArena();
}
void ColumnMetaData::set_original_name(const ::std::string& value) {
  set_has_original_name();
  original_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Mysqlx.Resultset.ColumnMetaData.original_name)
}
#if LANG_CXX11
void ColumnMetaData::set_original_name(::std::string&& value) {
  set_has_original_name();
  original_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mysqlx.Resultset.ColumnMetaData.original_name)
}
#endif
void ColumnMetaData::set_original_name(const char* value) {
  set_has_original_name();
  original_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mysqlx.Resultset.ColumnMetaData.original_name)
}
void ColumnMetaData::set_original_name(const void* value, size_t size) {
  set_has_original_name();
  original_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Resultset.ColumnMetaData.original_name)
}
::std::string* ColumnMetaData::mutable_original_name() {
  set_has_original_name();
  // @@protoc_insertion_point(field_mutable:Mysqlx.Resultset.ColumnMetaData.original_name)
  return original_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ColumnMetaData::release_original_name() {
  // @@protoc_insertion_point(field_release:Mysqlx.Resultset.ColumnMetaData.original_name)
  clear_has_original_name();
  return original_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ColumnMetaData::set_allocated_original_name(::std::string* original_name) {
  if (original_name != NULL) {
    set_has_original_name();
  } else {
    clear_has_original_name();
  }
  original_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), original_name);
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Resultset.ColumnMetaData.original_name)
}

// optional bytes table = 4;
bool ColumnMetaData::has_table() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ColumnMetaData::set_has_table() {
  _has_bits_[0] |= 0x00000004u;
}
void ColumnMetaData::clear_has_table() {
  _has_bits_[0] &= ~0x00000004u;
}
void ColumnMetaData::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_table();
}
const ::std::string& ColumnMetaData::table() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Resultset.ColumnMetaData.table)
  return table_.GetNoArena();
}
void ColumnMetaData::set_table(const ::std::string& value) {
  set_has_table();
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Mysqlx.Resultset.ColumnMetaData.table)
}
#if LANG_CXX11
void ColumnMetaData::set_table(::std::string&& value) {
  set_has_table();
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mysqlx.Resultset.ColumnMetaData.table)
}
#endif
void ColumnMetaData::set_table(const char* value) {
  set_has_table();
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mysqlx.Resultset.ColumnMetaData.table)
}
void ColumnMetaData::set_table(const void* value, size_t size) {
  set_has_table();
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Resultset.ColumnMetaData.table)
}
::std::string* ColumnMetaData::mutable_table() {
  set_has_table();
  // @@protoc_insertion_point(field_mutable:Mysqlx.Resultset.ColumnMetaData.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ColumnMetaData::release_table() {
  // @@protoc_insertion_point(field_release:Mysqlx.Resultset.ColumnMetaData.table)
  clear_has_table();
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ColumnMetaData::set_allocated_table(::std::string* table) {
  if (table != NULL) {
    set_has_table();
  } else {
    clear_has_table();
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Resultset.ColumnMetaData.table)
}

// optional bytes original_table = 5;
bool ColumnMetaData::has_original_table() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ColumnMetaData::set_has_original_table() {
  _has_bits_[0] |= 0x00000008u;
}
void ColumnMetaData::clear_has_original_table() {
  _has_bits_[0] &= ~0x00000008u;
}
void ColumnMetaData::clear_original_table() {
  original_table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_original_table();
}
const ::std::string& ColumnMetaData::original_table() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Resultset.ColumnMetaData.original_table)
  return original_table_.GetNoArena();
}
void ColumnMetaData::set_original_table(const ::std::string& value) {
  set_has_original_table();
  original_table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Mysqlx.Resultset.ColumnMetaData.original_table)
}
#if LANG_CXX11
void ColumnMetaData::set_original_table(::std::string&& value) {
  set_has_original_table();
  original_table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mysqlx.Resultset.ColumnMetaData.original_table)
}
#endif
void ColumnMetaData::set_original_table(const char* value) {
  set_has_original_table();
  original_table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mysqlx.Resultset.ColumnMetaData.original_table)
}
void ColumnMetaData::set_original_table(const void* value, size_t size) {
  set_has_original_table();
  original_table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Resultset.ColumnMetaData.original_table)
}
::std::string* ColumnMetaData::mutable_original_table() {
  set_has_original_table();
  // @@protoc_insertion_point(field_mutable:Mysqlx.Resultset.ColumnMetaData.original_table)
  return original_table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ColumnMetaData::release_original_table() {
  // @@protoc_insertion_point(field_release:Mysqlx.Resultset.ColumnMetaData.original_table)
  clear_has_original_table();
  return original_table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ColumnMetaData::set_allocated_original_table(::std::string* original_table) {
  if (original_table != NULL) {
    set_has_original_table();
  } else {
    clear_has_original_table();
  }
  original_table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), original_table);
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Resultset.ColumnMetaData.original_table)
}

// optional bytes schema = 6;
bool ColumnMetaData::has_schema() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ColumnMetaData::set_has_schema() {
  _has_bits_[0] |= 0x00000010u;
}
void ColumnMetaData::clear_has_schema() {
  _has_bits_[0] &= ~0x00000010u;
}
void ColumnMetaData::clear_schema() {
  schema_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_schema();
}
const ::std::string& ColumnMetaData::schema() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Resultset.ColumnMetaData.schema)
  return schema_.GetNoArena();
}
void ColumnMetaData::set_schema(const ::std::string& value) {
  set_has_schema();
  schema_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Mysqlx.Resultset.ColumnMetaData.schema)
}
#if LANG_CXX11
void ColumnMetaData::set_schema(::std::string&& value) {
  set_has_schema();
  schema_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mysqlx.Resultset.ColumnMetaData.schema)
}
#endif
void ColumnMetaData::set_schema(const char* value) {
  set_has_schema();
  schema_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mysqlx.Resultset.ColumnMetaData.schema)
}
void ColumnMetaData::set_schema(const void* value, size_t size) {
  set_has_schema();
  schema_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Resultset.ColumnMetaData.schema)
}
::std::string* ColumnMetaData::mutable_schema() {
  set_has_schema();
  // @@protoc_insertion_point(field_mutable:Mysqlx.Resultset.ColumnMetaData.schema)
  return schema_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ColumnMetaData::release_schema() {
  // @@protoc_insertion_point(field_release:Mysqlx.Resultset.ColumnMetaData.schema)
  clear_has_schema();
  return schema_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ColumnMetaData::set_allocated_schema(::std::string* schema) {
  if (schema != NULL) {
    set_has_schema();
  } else {
    clear_has_schema();
  }
  schema_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), schema);
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Resultset.ColumnMetaData.schema)
}

// optional bytes catalog = 7;
bool ColumnMetaData::has_catalog() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ColumnMetaData::set_has_catalog() {
  _has_bits_[0] |= 0x00000020u;
}
void ColumnMetaData::clear_has_catalog() {
  _has_bits_[0] &= ~0x00000020u;
}
void ColumnMetaData::clear_catalog() {
  catalog_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_catalog();
}
const ::std::string& ColumnMetaData::catalog() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Resultset.ColumnMetaData.catalog)
  return catalog_.GetNoArena();
}
void ColumnMetaData::set_catalog(const ::std::string& value) {
  set_has_catalog();
  catalog_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Mysqlx.Resultset.ColumnMetaData.catalog)
}
#if LANG_CXX11
void ColumnMetaData::set_catalog(::std::string&& value) {
  set_has_catalog();
  catalog_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mysqlx.Resultset.ColumnMetaData.catalog)
}
#endif
void ColumnMetaData::set_catalog(const char* value) {
  set_has_catalog();
  catalog_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mysqlx.Resultset.ColumnMetaData.catalog)
}
void ColumnMetaData::set_catalog(const void* value, size_t size) {
  set_has_catalog();
  catalog_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Resultset.ColumnMetaData.catalog)
}
::std::string* ColumnMetaData::mutable_catalog() {
  set_has_catalog();
  // @@protoc_insertion_point(field_mutable:Mysqlx.Resultset.ColumnMetaData.catalog)
  return catalog_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ColumnMetaData::release_catalog() {
  // @@protoc_insertion_point(field_release:Mysqlx.Resultset.ColumnMetaData.catalog)
  clear_has_catalog();
  return catalog_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ColumnMetaData::set_allocated_catalog(::std::string* catalog) {
  if (catalog != NULL) {
    set_has_catalog();
  } else {
    clear_has_catalog();
  }
  catalog_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), catalog);
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Resultset.ColumnMetaData.catalog)
}

// optional uint64 collation = 8;
bool ColumnMetaData::has_collation() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ColumnMetaData::set_has_collation() {
  _has_bits_[0] |= 0x00000040u;
}
void ColumnMetaData::clear_has_collation() {
  _has_bits_[0] &= ~0x00000040u;
}
void ColumnMetaData::clear_collation() {
  collation_ = GOOGLE_ULONGLONG(0);
  clear_has_collation();
}
::google::protobuf::uint64 ColumnMetaData::collation() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Resultset.ColumnMetaData.collation)
  return collation_;
}
void ColumnMetaData::set_collation(::google::protobuf::uint64 value) {
  set_has_collation();
  collation_ = value;
  // @@protoc_insertion_point(field_set:Mysqlx.Resultset.ColumnMetaData.collation)
}

// optional uint32 fractional_digits = 9;
bool ColumnMetaData::has_fractional_digits() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ColumnMetaData::set_has_fractional_digits() {
  _has_bits_[0] |= 0x00000080u;
}
void ColumnMetaData::clear_has_fractional_digits() {
  _has_bits_[0] &= ~0x00000080u;
}
void ColumnMetaData::clear_fractional_digits() {
  fractional_digits_ = 0u;
  clear_has_fractional_digits();
}
::google::protobuf::uint32 ColumnMetaData::fractional_digits() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Resultset.ColumnMetaData.fractional_digits)
  return fractional_digits_;
}
void ColumnMetaData::set_fractional_digits(::google::protobuf::uint32 value) {
  set_has_fractional_digits();
  fractional_digits_ = value;
  // @@protoc_insertion_point(field_set:Mysqlx.Resultset.ColumnMetaData.fractional_digits)
}

// optional uint32 length = 10;
bool ColumnMetaData::has_length() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ColumnMetaData::set_has_length() {
  _has_bits_[0] |= 0x00000100u;
}
void ColumnMetaData::clear_has_length() {
  _has_bits_[0] &= ~0x00000100u;
}
void ColumnMetaData::clear_length() {
  length_ = 0u;
  clear_has_length();
}
::google::protobuf::uint32 ColumnMetaData::length() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Resultset.ColumnMetaData.length)
  return length_;
}
void ColumnMetaData::set_length(::google::protobuf::uint32 value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:Mysqlx.Resultset.ColumnMetaData.length)
}

// optional uint32 flags = 11;
bool ColumnMetaData::has_flags() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ColumnMetaData::set_has_flags() {
  _has_bits_[0] |= 0x00000200u;
}
void ColumnMetaData::clear_has_flags() {
  _has_bits_[0] &= ~0x00000200u;
}
void ColumnMetaData::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
::google::protobuf::uint32 ColumnMetaData::flags() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Resultset.ColumnMetaData.flags)
  return flags_;
}
void ColumnMetaData::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:Mysqlx.Resultset.ColumnMetaData.flags)
}

// optional uint32 content_type = 12;
bool ColumnMetaData::has_content_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ColumnMetaData::set_has_content_type() {
  _has_bits_[0] |= 0x00000400u;
}
void ColumnMetaData::clear_has_content_type() {
  _has_bits_[0] &= ~0x00000400u;
}
void ColumnMetaData::clear_content_type() {
  content_type_ = 0u;
  clear_has_content_type();
}
::google::protobuf::uint32 ColumnMetaData::content_type() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Resultset.ColumnMetaData.content_type)
  return content_type_;
}
void ColumnMetaData::set_content_type(::google::protobuf::uint32 value) {
  set_has_content_type();
  content_type_ = value;
  // @@protoc_insertion_point(field_set:Mysqlx.Resultset.ColumnMetaData.content_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Row::kFieldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Row::Row()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mysqlx_5fresultset_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Resultset.Row)
}
Row::Row(const Row& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      field_(from.field_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Resultset.Row)
}

void Row::SharedCtor() {
  _cached_size_ = 0;
}

Row::~Row() {
  // @@protoc_insertion_point(destructor:Mysqlx.Resultset.Row)
  SharedDtor();
}

void Row::SharedDtor() {
}

void Row::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Row::descriptor() {
  protobuf_mysqlx_5fresultset_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fresultset_2eproto::file_level_metadata[4].descriptor;
}

const Row& Row::default_instance() {
  protobuf_mysqlx_5fresultset_2eproto::InitDefaults();
  return *internal_default_instance();
}

Row* Row::New(::google::protobuf::Arena* arena) const {
  Row* n = new Row;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Row::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Resultset.Row)
  field_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Row::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Resultset.Row)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes field = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Resultset.Row)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Resultset.Row)
  return false;
#undef DO_
}

void Row::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Resultset.Row)
  // repeated bytes field = 1;
  for (int i = 0; i < this->field_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->field(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Resultset.Row)
}

::google::protobuf::uint8* Row::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Resultset.Row)
  // repeated bytes field = 1;
  for (int i = 0; i < this->field_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->field(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Resultset.Row)
  return target;
}

size_t Row::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Resultset.Row)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated bytes field = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->field_size());
  for (int i = 0; i < this->field_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->field(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Row::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mysqlx.Resultset.Row)
  GOOGLE_DCHECK_NE(&from, this);
  const Row* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Row>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mysqlx.Resultset.Row)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mysqlx.Resultset.Row)
    MergeFrom(*source);
  }
}

void Row::MergeFrom(const Row& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Resultset.Row)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  field_.MergeFrom(from.field_);
}

void Row::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mysqlx.Resultset.Row)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Row::CopyFrom(const Row& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Resultset.Row)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Row::IsInitialized() const {
  return true;
}

void Row::Swap(Row* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Row::InternalSwap(Row* other) {
  field_.UnsafeArenaSwap(&other->field_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Row::GetMetadata() const {
  protobuf_mysqlx_5fresultset_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fresultset_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Row

// repeated bytes field = 1;
int Row::field_size() const {
  return field_.size();
}
void Row::clear_field() {
  field_.Clear();
}
const ::std::string& Row::field(int index) const {
  // @@protoc_insertion_point(field_get:Mysqlx.Resultset.Row.field)
  return field_.Get(index);
}
::std::string* Row::mutable_field(int index) {
  // @@protoc_insertion_point(field_mutable:Mysqlx.Resultset.Row.field)
  return field_.Mutable(index);
}
void Row::set_field(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Mysqlx.Resultset.Row.field)
  field_.Mutable(index)->assign(value);
}
void Row::set_field(int index, const char* value) {
  field_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Mysqlx.Resultset.Row.field)
}
void Row::set_field(int index, const void* value, size_t size) {
  field_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Resultset.Row.field)
}
::std::string* Row::add_field() {
  // @@protoc_insertion_point(field_add_mutable:Mysqlx.Resultset.Row.field)
  return field_.Add();
}
void Row::add_field(const ::std::string& value) {
  field_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Mysqlx.Resultset.Row.field)
}
void Row::add_field(const char* value) {
  field_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Mysqlx.Resultset.Row.field)
}
void Row::add_field(const void* value, size_t size) {
  field_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Mysqlx.Resultset.Row.field)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Row::field() const {
  // @@protoc_insertion_point(field_list:Mysqlx.Resultset.Row.field)
  return field_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Row::mutable_field() {
  // @@protoc_insertion_point(field_mutable_list:Mysqlx.Resultset.Row.field)
  return &field_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Resultset
}  // namespace Mysqlx

// @@protoc_insertion_point(global_scope)
