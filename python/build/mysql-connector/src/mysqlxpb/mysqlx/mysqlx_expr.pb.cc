// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysqlx_expr.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mysqlx_expr.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Mysqlx {
namespace Expr {
class ExprDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Expr> {
} _Expr_default_instance_;
class IdentifierDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Identifier> {
} _Identifier_default_instance_;
class DocumentPathItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DocumentPathItem> {
} _DocumentPathItem_default_instance_;
class ColumnIdentifierDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ColumnIdentifier> {
} _ColumnIdentifier_default_instance_;
class FunctionCallDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FunctionCall> {
} _FunctionCall_default_instance_;
class OperatorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Operator> {
} _Operator_default_instance_;
class Object_ObjectFieldDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Object_ObjectField> {
} _Object_ObjectField_default_instance_;
class ObjectDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Object> {
} _Object_default_instance_;
class ArrayDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Array> {
} _Array_default_instance_;

namespace protobuf_mysqlx_5fexpr_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[9];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expr, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expr, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expr, identifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expr, variable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expr, literal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expr, function_call_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expr, operator__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expr, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expr, object_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expr, array_),
  8,
  1,
  0,
  2,
  3,
  4,
  7,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Identifier, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Identifier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Identifier, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Identifier, schema_name_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentPathItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentPathItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentPathItem, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentPathItem, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentPathItem, index_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnIdentifier, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnIdentifier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnIdentifier, document_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnIdentifier, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnIdentifier, table_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnIdentifier, schema_name_),
  ~0u,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionCall, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionCall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionCall, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionCall, param_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operator, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operator, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operator, param_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object_ObjectField, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object_ObjectField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object_ObjectField, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object_ObjectField, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, fld_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array, value_),
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 13, sizeof(Expr)},
  { 22, 28, sizeof(Identifier)},
  { 30, 37, sizeof(DocumentPathItem)},
  { 40, 48, sizeof(ColumnIdentifier)},
  { 52, 58, sizeof(FunctionCall)},
  { 60, 66, sizeof(Operator)},
  { 68, 74, sizeof(Object_ObjectField)},
  { 76, 81, sizeof(Object)},
  { 82, 87, sizeof(Array)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Expr_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Identifier_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocumentPathItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ColumnIdentifier_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FunctionCall_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Operator_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Object_ObjectField_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Object_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Array_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "mysqlx_expr.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

}  // namespace

void TableStruct::Shutdown() {
  _Expr_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Identifier_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _DocumentPathItem_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _ColumnIdentifier_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _FunctionCall_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _Operator_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _Object_ObjectField_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _Object_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _Array_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::Mysqlx::Datatypes::protobuf_mysqlx_5fdatatypes_2eproto::InitDefaults();
  _Expr_default_instance_.DefaultConstruct();
  _Identifier_default_instance_.DefaultConstruct();
  _DocumentPathItem_default_instance_.DefaultConstruct();
  _ColumnIdentifier_default_instance_.DefaultConstruct();
  _FunctionCall_default_instance_.DefaultConstruct();
  _Operator_default_instance_.DefaultConstruct();
  _Object_ObjectField_default_instance_.DefaultConstruct();
  _Object_default_instance_.DefaultConstruct();
  _Array_default_instance_.DefaultConstruct();
  _Expr_default_instance_.get_mutable()->identifier_ = const_cast< ::Mysqlx::Expr::ColumnIdentifier*>(
      ::Mysqlx::Expr::ColumnIdentifier::internal_default_instance());
  _Expr_default_instance_.get_mutable()->literal_ = const_cast< ::Mysqlx::Datatypes::Scalar*>(
      ::Mysqlx::Datatypes::Scalar::internal_default_instance());
  _Expr_default_instance_.get_mutable()->function_call_ = const_cast< ::Mysqlx::Expr::FunctionCall*>(
      ::Mysqlx::Expr::FunctionCall::internal_default_instance());
  _Expr_default_instance_.get_mutable()->operator__ = const_cast< ::Mysqlx::Expr::Operator*>(
      ::Mysqlx::Expr::Operator::internal_default_instance());
  _Expr_default_instance_.get_mutable()->object_ = const_cast< ::Mysqlx::Expr::Object*>(
      ::Mysqlx::Expr::Object::internal_default_instance());
  _Expr_default_instance_.get_mutable()->array_ = const_cast< ::Mysqlx::Expr::Array*>(
      ::Mysqlx::Expr::Array::internal_default_instance());
  _FunctionCall_default_instance_.get_mutable()->name_ = const_cast< ::Mysqlx::Expr::Identifier*>(
      ::Mysqlx::Expr::Identifier::internal_default_instance());
  _Object_ObjectField_default_instance_.get_mutable()->value_ = const_cast< ::Mysqlx::Expr::Expr*>(
      ::Mysqlx::Expr::Expr::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\021mysqlx_expr.proto\022\013Mysqlx.Expr\032\026mysqlx"
      "_datatypes.proto\"\304\003\n\004Expr\022$\n\004type\030\001 \002(\0162"
      "\026.Mysqlx.Expr.Expr.Type\0221\n\nidentifier\030\002 "
      "\001(\0132\035.Mysqlx.Expr.ColumnIdentifier\022\020\n\010va"
      "riable\030\003 \001(\t\022)\n\007literal\030\004 \001(\0132\030.Mysqlx.D"
      "atatypes.Scalar\0220\n\rfunction_call\030\005 \001(\0132\031"
      ".Mysqlx.Expr.FunctionCall\022\'\n\010operator\030\006 "
      "\001(\0132\025.Mysqlx.Expr.Operator\022\020\n\010position\030\007"
      " \001(\r\022#\n\006object\030\010 \001(\0132\023.Mysqlx.Expr.Objec"
      "t\022!\n\005array\030\t \001(\0132\022.Mysqlx.Expr.Array\"q\n\004"
      "Type\022\t\n\005IDENT\020\001\022\013\n\007LITERAL\020\002\022\014\n\010VARIABLE"
      "\020\003\022\r\n\tFUNC_CALL\020\004\022\014\n\010OPERATOR\020\005\022\017\n\013PLACE"
      "HOLDER\020\006\022\n\n\006OBJECT\020\007\022\t\n\005ARRAY\020\010\"/\n\nIdent"
      "ifier\022\014\n\004name\030\001 \002(\t\022\023\n\013schema_name\030\002 \001(\t"
      "\"\313\001\n\020DocumentPathItem\0220\n\004type\030\001 \002(\0162\".My"
      "sqlx.Expr.DocumentPathItem.Type\022\r\n\005value"
      "\030\002 \001(\t\022\r\n\005index\030\003 \001(\r\"g\n\004Type\022\n\n\006MEMBER\020"
      "\001\022\023\n\017MEMBER_ASTERISK\020\002\022\017\n\013ARRAY_INDEX\020\003\022"
      "\030\n\024ARRAY_INDEX_ASTERISK\020\004\022\023\n\017DOUBLE_ASTE"
      "RISK\020\005\"\177\n\020ColumnIdentifier\0224\n\rdocument_p"
      "ath\030\001 \003(\0132\035.Mysqlx.Expr.DocumentPathItem"
      "\022\014\n\004name\030\002 \001(\t\022\022\n\ntable_name\030\003 \001(\t\022\023\n\013sc"
      "hema_name\030\004 \001(\t\"W\n\014FunctionCall\022%\n\004name\030"
      "\001 \002(\0132\027.Mysqlx.Expr.Identifier\022 \n\005param\030"
      "\002 \003(\0132\021.Mysqlx.Expr.Expr\":\n\010Operator\022\014\n\004"
      "name\030\001 \002(\t\022 \n\005param\030\002 \003(\0132\021.Mysqlx.Expr."
      "Expr\"t\n\006Object\022,\n\003fld\030\001 \003(\0132\037.Mysqlx.Exp"
      "r.Object.ObjectField\032<\n\013ObjectField\022\013\n\003k"
      "ey\030\001 \002(\t\022 \n\005value\030\002 \002(\0132\021.Mysqlx.Expr.Ex"
      "pr\")\n\005Array\022 \n\005value\030\001 \003(\0132\021.Mysqlx.Expr"
      ".ExprB\036\n\034com.mysql.cj.mysqlx.protobuf"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1237);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mysqlx_expr.proto", &protobuf_RegisterTypes);
  ::Mysqlx::Datatypes::protobuf_mysqlx_5fdatatypes_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_mysqlx_5fexpr_2eproto

const ::google::protobuf::EnumDescriptor* Expr_Type_descriptor() {
  protobuf_mysqlx_5fexpr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fexpr_2eproto::file_level_enum_descriptors[0];
}
bool Expr_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Expr_Type Expr::IDENT;
const Expr_Type Expr::LITERAL;
const Expr_Type Expr::VARIABLE;
const Expr_Type Expr::FUNC_CALL;
const Expr_Type Expr::OPERATOR;
const Expr_Type Expr::PLACEHOLDER;
const Expr_Type Expr::OBJECT;
const Expr_Type Expr::ARRAY;
const Expr_Type Expr::Type_MIN;
const Expr_Type Expr::Type_MAX;
const int Expr::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DocumentPathItem_Type_descriptor() {
  protobuf_mysqlx_5fexpr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fexpr_2eproto::file_level_enum_descriptors[1];
}
bool DocumentPathItem_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DocumentPathItem_Type DocumentPathItem::MEMBER;
const DocumentPathItem_Type DocumentPathItem::MEMBER_ASTERISK;
const DocumentPathItem_Type DocumentPathItem::ARRAY_INDEX;
const DocumentPathItem_Type DocumentPathItem::ARRAY_INDEX_ASTERISK;
const DocumentPathItem_Type DocumentPathItem::DOUBLE_ASTERISK;
const DocumentPathItem_Type DocumentPathItem::Type_MIN;
const DocumentPathItem_Type DocumentPathItem::Type_MAX;
const int DocumentPathItem::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Expr::kTypeFieldNumber;
const int Expr::kIdentifierFieldNumber;
const int Expr::kVariableFieldNumber;
const int Expr::kLiteralFieldNumber;
const int Expr::kFunctionCallFieldNumber;
const int Expr::kOperatorFieldNumber;
const int Expr::kPositionFieldNumber;
const int Expr::kObjectFieldNumber;
const int Expr::kArrayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Expr::Expr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mysqlx_5fexpr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Expr.Expr)
}
Expr::Expr(const Expr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  variable_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_variable()) {
    variable_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.variable_);
  }
  if (from.has_identifier()) {
    identifier_ = new ::Mysqlx::Expr::ColumnIdentifier(*from.identifier_);
  } else {
    identifier_ = NULL;
  }
  if (from.has_literal()) {
    literal_ = new ::Mysqlx::Datatypes::Scalar(*from.literal_);
  } else {
    literal_ = NULL;
  }
  if (from.has_function_call()) {
    function_call_ = new ::Mysqlx::Expr::FunctionCall(*from.function_call_);
  } else {
    function_call_ = NULL;
  }
  if (from.has_operator_()) {
    operator__ = new ::Mysqlx::Expr::Operator(*from.operator__);
  } else {
    operator__ = NULL;
  }
  if (from.has_object()) {
    object_ = new ::Mysqlx::Expr::Object(*from.object_);
  } else {
    object_ = NULL;
  }
  if (from.has_array()) {
    array_ = new ::Mysqlx::Expr::Array(*from.array_);
  } else {
    array_ = NULL;
  }
  ::memcpy(&position_, &from.position_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&position_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Expr.Expr)
}

void Expr::SharedCtor() {
  _cached_size_ = 0;
  variable_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&identifier_, 0, reinterpret_cast<char*>(&position_) -
    reinterpret_cast<char*>(&identifier_) + sizeof(position_));
  type_ = 1;
}

Expr::~Expr() {
  // @@protoc_insertion_point(destructor:Mysqlx.Expr.Expr)
  SharedDtor();
}

void Expr::SharedDtor() {
  variable_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete identifier_;
  }
  if (this != internal_default_instance()) {
    delete literal_;
  }
  if (this != internal_default_instance()) {
    delete function_call_;
  }
  if (this != internal_default_instance()) {
    delete operator__;
  }
  if (this != internal_default_instance()) {
    delete object_;
  }
  if (this != internal_default_instance()) {
    delete array_;
  }
}

void Expr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Expr::descriptor() {
  protobuf_mysqlx_5fexpr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fexpr_2eproto::file_level_metadata[0].descriptor;
}

const Expr& Expr::default_instance() {
  protobuf_mysqlx_5fexpr_2eproto::InitDefaults();
  return *internal_default_instance();
}

Expr* Expr::New(::google::protobuf::Arena* arena) const {
  Expr* n = new Expr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Expr::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Expr.Expr)
  if (_has_bits_[0 / 32] & 127u) {
    if (has_variable()) {
      GOOGLE_DCHECK(!variable_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*variable_.UnsafeRawStringPointer())->clear();
    }
    if (has_identifier()) {
      GOOGLE_DCHECK(identifier_ != NULL);
      identifier_->::Mysqlx::Expr::ColumnIdentifier::Clear();
    }
    if (has_literal()) {
      GOOGLE_DCHECK(literal_ != NULL);
      literal_->::Mysqlx::Datatypes::Scalar::Clear();
    }
    if (has_function_call()) {
      GOOGLE_DCHECK(function_call_ != NULL);
      function_call_->::Mysqlx::Expr::FunctionCall::Clear();
    }
    if (has_operator_()) {
      GOOGLE_DCHECK(operator__ != NULL);
      operator__->::Mysqlx::Expr::Operator::Clear();
    }
    if (has_object()) {
      GOOGLE_DCHECK(object_ != NULL);
      object_->::Mysqlx::Expr::Object::Clear();
    }
    if (has_array()) {
      GOOGLE_DCHECK(array_ != NULL);
      array_->::Mysqlx::Expr::Array::Clear();
    }
  }
  position_ = 0u;
  type_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Expr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Expr.Expr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Mysqlx.Expr.Expr.Type type = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Mysqlx::Expr::Expr_Type_IsValid(value)) {
            set_type(static_cast< ::Mysqlx::Expr::Expr_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Mysqlx.Expr.ColumnIdentifier identifier = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_identifier()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string variable = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_variable()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->variable().data(), this->variable().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Mysqlx.Expr.Expr.variable");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Mysqlx.Datatypes.Scalar literal = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_literal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Mysqlx.Expr.FunctionCall function_call = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_function_call()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Mysqlx.Expr.Operator operator = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_operator_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 position = 7;
      case 7: {
        if (tag == 56u) {
          set_has_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Mysqlx.Expr.Object object = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_object()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Mysqlx.Expr.Array array = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_array()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Expr.Expr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Expr.Expr)
  return false;
#undef DO_
}

void Expr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Expr.Expr)
  // required .Mysqlx.Expr.Expr.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .Mysqlx.Expr.ColumnIdentifier identifier = 2;
  if (has_identifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->identifier_, output);
  }

  // optional string variable = 3;
  if (has_variable()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->variable().data(), this->variable().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Mysqlx.Expr.Expr.variable");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->variable(), output);
  }

  // optional .Mysqlx.Datatypes.Scalar literal = 4;
  if (has_literal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->literal_, output);
  }

  // optional .Mysqlx.Expr.FunctionCall function_call = 5;
  if (has_function_call()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->function_call_, output);
  }

  // optional .Mysqlx.Expr.Operator operator = 6;
  if (has_operator_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->operator__, output);
  }

  // optional uint32 position = 7;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->position(), output);
  }

  // optional .Mysqlx.Expr.Object object = 8;
  if (has_object()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->object_, output);
  }

  // optional .Mysqlx.Expr.Array array = 9;
  if (has_array()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->array_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Expr.Expr)
}

::google::protobuf::uint8* Expr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Expr.Expr)
  // required .Mysqlx.Expr.Expr.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .Mysqlx.Expr.ColumnIdentifier identifier = 2;
  if (has_identifier()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->identifier_, false, target);
  }

  // optional string variable = 3;
  if (has_variable()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->variable().data(), this->variable().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Mysqlx.Expr.Expr.variable");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->variable(), target);
  }

  // optional .Mysqlx.Datatypes.Scalar literal = 4;
  if (has_literal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->literal_, false, target);
  }

  // optional .Mysqlx.Expr.FunctionCall function_call = 5;
  if (has_function_call()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->function_call_, false, target);
  }

  // optional .Mysqlx.Expr.Operator operator = 6;
  if (has_operator_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->operator__, false, target);
  }

  // optional uint32 position = 7;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->position(), target);
  }

  // optional .Mysqlx.Expr.Object object = 8;
  if (has_object()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->object_, false, target);
  }

  // optional .Mysqlx.Expr.Array array = 9;
  if (has_array()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->array_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Expr.Expr)
  return target;
}

size_t Expr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Expr.Expr)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .Mysqlx.Expr.Expr.Type type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string variable = 3;
    if (has_variable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->variable());
    }

    // optional .Mysqlx.Expr.ColumnIdentifier identifier = 2;
    if (has_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->identifier_);
    }

    // optional .Mysqlx.Datatypes.Scalar literal = 4;
    if (has_literal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->literal_);
    }

    // optional .Mysqlx.Expr.FunctionCall function_call = 5;
    if (has_function_call()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->function_call_);
    }

    // optional .Mysqlx.Expr.Operator operator = 6;
    if (has_operator_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->operator__);
    }

    // optional .Mysqlx.Expr.Object object = 8;
    if (has_object()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->object_);
    }

    // optional .Mysqlx.Expr.Array array = 9;
    if (has_array()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->array_);
    }

    // optional uint32 position = 7;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Expr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mysqlx.Expr.Expr)
  GOOGLE_DCHECK_NE(&from, this);
  const Expr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Expr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mysqlx.Expr.Expr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mysqlx.Expr.Expr)
    MergeFrom(*source);
  }
}

void Expr::MergeFrom(const Expr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Expr.Expr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_variable()) {
      set_has_variable();
      variable_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.variable_);
    }
    if (from.has_identifier()) {
      mutable_identifier()->::Mysqlx::Expr::ColumnIdentifier::MergeFrom(from.identifier());
    }
    if (from.has_literal()) {
      mutable_literal()->::Mysqlx::Datatypes::Scalar::MergeFrom(from.literal());
    }
    if (from.has_function_call()) {
      mutable_function_call()->::Mysqlx::Expr::FunctionCall::MergeFrom(from.function_call());
    }
    if (from.has_operator_()) {
      mutable_operator_()->::Mysqlx::Expr::Operator::MergeFrom(from.operator_());
    }
    if (from.has_object()) {
      mutable_object()->::Mysqlx::Expr::Object::MergeFrom(from.object());
    }
    if (from.has_array()) {
      mutable_array()->::Mysqlx::Expr::Array::MergeFrom(from.array());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
  }
  if (from.has_type()) {
    set_type(from.type());
  }
}

void Expr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mysqlx.Expr.Expr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expr::CopyFrom(const Expr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Expr.Expr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000100) != 0x00000100) return false;
  if (has_identifier()) {
    if (!this->identifier_->IsInitialized()) return false;
  }
  if (has_literal()) {
    if (!this->literal_->IsInitialized()) return false;
  }
  if (has_function_call()) {
    if (!this->function_call_->IsInitialized()) return false;
  }
  if (has_operator_()) {
    if (!this->operator__->IsInitialized()) return false;
  }
  if (has_object()) {
    if (!this->object_->IsInitialized()) return false;
  }
  if (has_array()) {
    if (!this->array_->IsInitialized()) return false;
  }
  return true;
}

void Expr::Swap(Expr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Expr::InternalSwap(Expr* other) {
  variable_.Swap(&other->variable_);
  std::swap(identifier_, other->identifier_);
  std::swap(literal_, other->literal_);
  std::swap(function_call_, other->function_call_);
  std::swap(operator__, other->operator__);
  std::swap(object_, other->object_);
  std::swap(array_, other->array_);
  std::swap(position_, other->position_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Expr::GetMetadata() const {
  protobuf_mysqlx_5fexpr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fexpr_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Expr

// required .Mysqlx.Expr.Expr.Type type = 1;
bool Expr::has_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Expr::set_has_type() {
  _has_bits_[0] |= 0x00000100u;
}
void Expr::clear_has_type() {
  _has_bits_[0] &= ~0x00000100u;
}
void Expr::clear_type() {
  type_ = 1;
  clear_has_type();
}
::Mysqlx::Expr::Expr_Type Expr::type() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Expr.Expr.type)
  return static_cast< ::Mysqlx::Expr::Expr_Type >(type_);
}
void Expr::set_type(::Mysqlx::Expr::Expr_Type value) {
  assert(::Mysqlx::Expr::Expr_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Mysqlx.Expr.Expr.type)
}

// optional .Mysqlx.Expr.ColumnIdentifier identifier = 2;
bool Expr::has_identifier() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Expr::set_has_identifier() {
  _has_bits_[0] |= 0x00000002u;
}
void Expr::clear_has_identifier() {
  _has_bits_[0] &= ~0x00000002u;
}
void Expr::clear_identifier() {
  if (identifier_ != NULL) identifier_->::Mysqlx::Expr::ColumnIdentifier::Clear();
  clear_has_identifier();
}
const ::Mysqlx::Expr::ColumnIdentifier& Expr::identifier() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Expr.Expr.identifier)
  return identifier_ != NULL ? *identifier_
                         : *::Mysqlx::Expr::ColumnIdentifier::internal_default_instance();
}
::Mysqlx::Expr::ColumnIdentifier* Expr::mutable_identifier() {
  set_has_identifier();
  if (identifier_ == NULL) {
    identifier_ = new ::Mysqlx::Expr::ColumnIdentifier;
  }
  // @@protoc_insertion_point(field_mutable:Mysqlx.Expr.Expr.identifier)
  return identifier_;
}
::Mysqlx::Expr::ColumnIdentifier* Expr::release_identifier() {
  // @@protoc_insertion_point(field_release:Mysqlx.Expr.Expr.identifier)
  clear_has_identifier();
  ::Mysqlx::Expr::ColumnIdentifier* temp = identifier_;
  identifier_ = NULL;
  return temp;
}
void Expr::set_allocated_identifier(::Mysqlx::Expr::ColumnIdentifier* identifier) {
  delete identifier_;
  identifier_ = identifier;
  if (identifier) {
    set_has_identifier();
  } else {
    clear_has_identifier();
  }
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Expr.Expr.identifier)
}

// optional string variable = 3;
bool Expr::has_variable() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Expr::set_has_variable() {
  _has_bits_[0] |= 0x00000001u;
}
void Expr::clear_has_variable() {
  _has_bits_[0] &= ~0x00000001u;
}
void Expr::clear_variable() {
  variable_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_variable();
}
const ::std::string& Expr::variable() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Expr.Expr.variable)
  return variable_.GetNoArena();
}
void Expr::set_variable(const ::std::string& value) {
  set_has_variable();
  variable_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Mysqlx.Expr.Expr.variable)
}
#if LANG_CXX11
void Expr::set_variable(::std::string&& value) {
  set_has_variable();
  variable_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mysqlx.Expr.Expr.variable)
}
#endif
void Expr::set_variable(const char* value) {
  set_has_variable();
  variable_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mysqlx.Expr.Expr.variable)
}
void Expr::set_variable(const char* value, size_t size) {
  set_has_variable();
  variable_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Expr.Expr.variable)
}
::std::string* Expr::mutable_variable() {
  set_has_variable();
  // @@protoc_insertion_point(field_mutable:Mysqlx.Expr.Expr.variable)
  return variable_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Expr::release_variable() {
  // @@protoc_insertion_point(field_release:Mysqlx.Expr.Expr.variable)
  clear_has_variable();
  return variable_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Expr::set_allocated_variable(::std::string* variable) {
  if (variable != NULL) {
    set_has_variable();
  } else {
    clear_has_variable();
  }
  variable_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), variable);
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Expr.Expr.variable)
}

// optional .Mysqlx.Datatypes.Scalar literal = 4;
bool Expr::has_literal() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Expr::set_has_literal() {
  _has_bits_[0] |= 0x00000004u;
}
void Expr::clear_has_literal() {
  _has_bits_[0] &= ~0x00000004u;
}
void Expr::clear_literal() {
  if (literal_ != NULL) literal_->::Mysqlx::Datatypes::Scalar::Clear();
  clear_has_literal();
}
const ::Mysqlx::Datatypes::Scalar& Expr::literal() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Expr.Expr.literal)
  return literal_ != NULL ? *literal_
                         : *::Mysqlx::Datatypes::Scalar::internal_default_instance();
}
::Mysqlx::Datatypes::Scalar* Expr::mutable_literal() {
  set_has_literal();
  if (literal_ == NULL) {
    literal_ = new ::Mysqlx::Datatypes::Scalar;
  }
  // @@protoc_insertion_point(field_mutable:Mysqlx.Expr.Expr.literal)
  return literal_;
}
::Mysqlx::Datatypes::Scalar* Expr::release_literal() {
  // @@protoc_insertion_point(field_release:Mysqlx.Expr.Expr.literal)
  clear_has_literal();
  ::Mysqlx::Datatypes::Scalar* temp = literal_;
  literal_ = NULL;
  return temp;
}
void Expr::set_allocated_literal(::Mysqlx::Datatypes::Scalar* literal) {
  delete literal_;
  literal_ = literal;
  if (literal) {
    set_has_literal();
  } else {
    clear_has_literal();
  }
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Expr.Expr.literal)
}

// optional .Mysqlx.Expr.FunctionCall function_call = 5;
bool Expr::has_function_call() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Expr::set_has_function_call() {
  _has_bits_[0] |= 0x00000008u;
}
void Expr::clear_has_function_call() {
  _has_bits_[0] &= ~0x00000008u;
}
void Expr::clear_function_call() {
  if (function_call_ != NULL) function_call_->::Mysqlx::Expr::FunctionCall::Clear();
  clear_has_function_call();
}
const ::Mysqlx::Expr::FunctionCall& Expr::function_call() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Expr.Expr.function_call)
  return function_call_ != NULL ? *function_call_
                         : *::Mysqlx::Expr::FunctionCall::internal_default_instance();
}
::Mysqlx::Expr::FunctionCall* Expr::mutable_function_call() {
  set_has_function_call();
  if (function_call_ == NULL) {
    function_call_ = new ::Mysqlx::Expr::FunctionCall;
  }
  // @@protoc_insertion_point(field_mutable:Mysqlx.Expr.Expr.function_call)
  return function_call_;
}
::Mysqlx::Expr::FunctionCall* Expr::release_function_call() {
  // @@protoc_insertion_point(field_release:Mysqlx.Expr.Expr.function_call)
  clear_has_function_call();
  ::Mysqlx::Expr::FunctionCall* temp = function_call_;
  function_call_ = NULL;
  return temp;
}
void Expr::set_allocated_function_call(::Mysqlx::Expr::FunctionCall* function_call) {
  delete function_call_;
  function_call_ = function_call;
  if (function_call) {
    set_has_function_call();
  } else {
    clear_has_function_call();
  }
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Expr.Expr.function_call)
}

// optional .Mysqlx.Expr.Operator operator = 6;
bool Expr::has_operator_() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Expr::set_has_operator_() {
  _has_bits_[0] |= 0x00000010u;
}
void Expr::clear_has_operator_() {
  _has_bits_[0] &= ~0x00000010u;
}
void Expr::clear_operator_() {
  if (operator__ != NULL) operator__->::Mysqlx::Expr::Operator::Clear();
  clear_has_operator_();
}
const ::Mysqlx::Expr::Operator& Expr::operator_() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Expr.Expr.operator)
  return operator__ != NULL ? *operator__
                         : *::Mysqlx::Expr::Operator::internal_default_instance();
}
::Mysqlx::Expr::Operator* Expr::mutable_operator_() {
  set_has_operator_();
  if (operator__ == NULL) {
    operator__ = new ::Mysqlx::Expr::Operator;
  }
  // @@protoc_insertion_point(field_mutable:Mysqlx.Expr.Expr.operator)
  return operator__;
}
::Mysqlx::Expr::Operator* Expr::release_operator_() {
  // @@protoc_insertion_point(field_release:Mysqlx.Expr.Expr.operator)
  clear_has_operator_();
  ::Mysqlx::Expr::Operator* temp = operator__;
  operator__ = NULL;
  return temp;
}
void Expr::set_allocated_operator_(::Mysqlx::Expr::Operator* operator_) {
  delete operator__;
  operator__ = operator_;
  if (operator_) {
    set_has_operator_();
  } else {
    clear_has_operator_();
  }
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Expr.Expr.operator)
}

// optional uint32 position = 7;
bool Expr::has_position() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Expr::set_has_position() {
  _has_bits_[0] |= 0x00000080u;
}
void Expr::clear_has_position() {
  _has_bits_[0] &= ~0x00000080u;
}
void Expr::clear_position() {
  position_ = 0u;
  clear_has_position();
}
::google::protobuf::uint32 Expr::position() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Expr.Expr.position)
  return position_;
}
void Expr::set_position(::google::protobuf::uint32 value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:Mysqlx.Expr.Expr.position)
}

// optional .Mysqlx.Expr.Object object = 8;
bool Expr::has_object() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Expr::set_has_object() {
  _has_bits_[0] |= 0x00000020u;
}
void Expr::clear_has_object() {
  _has_bits_[0] &= ~0x00000020u;
}
void Expr::clear_object() {
  if (object_ != NULL) object_->::Mysqlx::Expr::Object::Clear();
  clear_has_object();
}
const ::Mysqlx::Expr::Object& Expr::object() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Expr.Expr.object)
  return object_ != NULL ? *object_
                         : *::Mysqlx::Expr::Object::internal_default_instance();
}
::Mysqlx::Expr::Object* Expr::mutable_object() {
  set_has_object();
  if (object_ == NULL) {
    object_ = new ::Mysqlx::Expr::Object;
  }
  // @@protoc_insertion_point(field_mutable:Mysqlx.Expr.Expr.object)
  return object_;
}
::Mysqlx::Expr::Object* Expr::release_object() {
  // @@protoc_insertion_point(field_release:Mysqlx.Expr.Expr.object)
  clear_has_object();
  ::Mysqlx::Expr::Object* temp = object_;
  object_ = NULL;
  return temp;
}
void Expr::set_allocated_object(::Mysqlx::Expr::Object* object) {
  delete object_;
  object_ = object;
  if (object) {
    set_has_object();
  } else {
    clear_has_object();
  }
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Expr.Expr.object)
}

// optional .Mysqlx.Expr.Array array = 9;
bool Expr::has_array() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Expr::set_has_array() {
  _has_bits_[0] |= 0x00000040u;
}
void Expr::clear_has_array() {
  _has_bits_[0] &= ~0x00000040u;
}
void Expr::clear_array() {
  if (array_ != NULL) array_->::Mysqlx::Expr::Array::Clear();
  clear_has_array();
}
const ::Mysqlx::Expr::Array& Expr::array() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Expr.Expr.array)
  return array_ != NULL ? *array_
                         : *::Mysqlx::Expr::Array::internal_default_instance();
}
::Mysqlx::Expr::Array* Expr::mutable_array() {
  set_has_array();
  if (array_ == NULL) {
    array_ = new ::Mysqlx::Expr::Array;
  }
  // @@protoc_insertion_point(field_mutable:Mysqlx.Expr.Expr.array)
  return array_;
}
::Mysqlx::Expr::Array* Expr::release_array() {
  // @@protoc_insertion_point(field_release:Mysqlx.Expr.Expr.array)
  clear_has_array();
  ::Mysqlx::Expr::Array* temp = array_;
  array_ = NULL;
  return temp;
}
void Expr::set_allocated_array(::Mysqlx::Expr::Array* array) {
  delete array_;
  array_ = array;
  if (array) {
    set_has_array();
  } else {
    clear_has_array();
  }
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Expr.Expr.array)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Identifier::kNameFieldNumber;
const int Identifier::kSchemaNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Identifier::Identifier()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mysqlx_5fexpr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Expr.Identifier)
}
Identifier::Identifier(const Identifier& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  schema_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_schema_name()) {
    schema_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.schema_name_);
  }
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Expr.Identifier)
}

void Identifier::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  schema_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Identifier::~Identifier() {
  // @@protoc_insertion_point(destructor:Mysqlx.Expr.Identifier)
  SharedDtor();
}

void Identifier::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  schema_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Identifier::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Identifier::descriptor() {
  protobuf_mysqlx_5fexpr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fexpr_2eproto::file_level_metadata[1].descriptor;
}

const Identifier& Identifier::default_instance() {
  protobuf_mysqlx_5fexpr_2eproto::InitDefaults();
  return *internal_default_instance();
}

Identifier* Identifier::New(::google::protobuf::Arena* arena) const {
  Identifier* n = new Identifier;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Identifier::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Expr.Identifier)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_schema_name()) {
      GOOGLE_DCHECK(!schema_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*schema_name_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Identifier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Expr.Identifier)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Mysqlx.Expr.Identifier.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string schema_name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_schema_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->schema_name().data(), this->schema_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Mysqlx.Expr.Identifier.schema_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Expr.Identifier)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Expr.Identifier)
  return false;
#undef DO_
}

void Identifier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Expr.Identifier)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Mysqlx.Expr.Identifier.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string schema_name = 2;
  if (has_schema_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->schema_name().data(), this->schema_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Mysqlx.Expr.Identifier.schema_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->schema_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Expr.Identifier)
}

::google::protobuf::uint8* Identifier::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Expr.Identifier)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Mysqlx.Expr.Identifier.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string schema_name = 2;
  if (has_schema_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->schema_name().data(), this->schema_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Mysqlx.Expr.Identifier.schema_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->schema_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Expr.Identifier)
  return target;
}

size_t Identifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Expr.Identifier)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }
  // optional string schema_name = 2;
  if (has_schema_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->schema_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Identifier::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mysqlx.Expr.Identifier)
  GOOGLE_DCHECK_NE(&from, this);
  const Identifier* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Identifier>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mysqlx.Expr.Identifier)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mysqlx.Expr.Identifier)
    MergeFrom(*source);
  }
}

void Identifier::MergeFrom(const Identifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Expr.Identifier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_schema_name()) {
      set_has_schema_name();
      schema_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.schema_name_);
    }
  }
}

void Identifier::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mysqlx.Expr.Identifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Identifier::CopyFrom(const Identifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Expr.Identifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Identifier::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Identifier::Swap(Identifier* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Identifier::InternalSwap(Identifier* other) {
  name_.Swap(&other->name_);
  schema_name_.Swap(&other->schema_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Identifier::GetMetadata() const {
  protobuf_mysqlx_5fexpr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fexpr_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Identifier

// required string name = 1;
bool Identifier::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Identifier::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Identifier::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Identifier::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& Identifier::name() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Expr.Identifier.name)
  return name_.GetNoArena();
}
void Identifier::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Mysqlx.Expr.Identifier.name)
}
#if LANG_CXX11
void Identifier::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mysqlx.Expr.Identifier.name)
}
#endif
void Identifier::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mysqlx.Expr.Identifier.name)
}
void Identifier::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Expr.Identifier.name)
}
::std::string* Identifier::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:Mysqlx.Expr.Identifier.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Identifier::release_name() {
  // @@protoc_insertion_point(field_release:Mysqlx.Expr.Identifier.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Identifier::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Expr.Identifier.name)
}

// optional string schema_name = 2;
bool Identifier::has_schema_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Identifier::set_has_schema_name() {
  _has_bits_[0] |= 0x00000002u;
}
void Identifier::clear_has_schema_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void Identifier::clear_schema_name() {
  schema_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_schema_name();
}
const ::std::string& Identifier::schema_name() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Expr.Identifier.schema_name)
  return schema_name_.GetNoArena();
}
void Identifier::set_schema_name(const ::std::string& value) {
  set_has_schema_name();
  schema_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Mysqlx.Expr.Identifier.schema_name)
}
#if LANG_CXX11
void Identifier::set_schema_name(::std::string&& value) {
  set_has_schema_name();
  schema_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mysqlx.Expr.Identifier.schema_name)
}
#endif
void Identifier::set_schema_name(const char* value) {
  set_has_schema_name();
  schema_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mysqlx.Expr.Identifier.schema_name)
}
void Identifier::set_schema_name(const char* value, size_t size) {
  set_has_schema_name();
  schema_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Expr.Identifier.schema_name)
}
::std::string* Identifier::mutable_schema_name() {
  set_has_schema_name();
  // @@protoc_insertion_point(field_mutable:Mysqlx.Expr.Identifier.schema_name)
  return schema_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Identifier::release_schema_name() {
  // @@protoc_insertion_point(field_release:Mysqlx.Expr.Identifier.schema_name)
  clear_has_schema_name();
  return schema_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Identifier::set_allocated_schema_name(::std::string* schema_name) {
  if (schema_name != NULL) {
    set_has_schema_name();
  } else {
    clear_has_schema_name();
  }
  schema_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), schema_name);
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Expr.Identifier.schema_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocumentPathItem::kTypeFieldNumber;
const int DocumentPathItem::kValueFieldNumber;
const int DocumentPathItem::kIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocumentPathItem::DocumentPathItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mysqlx_5fexpr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Expr.DocumentPathItem)
}
DocumentPathItem::DocumentPathItem(const DocumentPathItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  ::memcpy(&index_, &from.index_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&index_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Expr.DocumentPathItem)
}

void DocumentPathItem::SharedCtor() {
  _cached_size_ = 0;
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_ = 0u;
  type_ = 1;
}

DocumentPathItem::~DocumentPathItem() {
  // @@protoc_insertion_point(destructor:Mysqlx.Expr.DocumentPathItem)
  SharedDtor();
}

void DocumentPathItem::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DocumentPathItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentPathItem::descriptor() {
  protobuf_mysqlx_5fexpr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fexpr_2eproto::file_level_metadata[2].descriptor;
}

const DocumentPathItem& DocumentPathItem::default_instance() {
  protobuf_mysqlx_5fexpr_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocumentPathItem* DocumentPathItem::New(::google::protobuf::Arena* arena) const {
  DocumentPathItem* n = new DocumentPathItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DocumentPathItem::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Expr.DocumentPathItem)
  if (has_value()) {
    GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*value_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    index_ = 0u;
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DocumentPathItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Expr.DocumentPathItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Mysqlx.Expr.DocumentPathItem.Type type = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Mysqlx::Expr::DocumentPathItem_Type_IsValid(value)) {
            set_type(static_cast< ::Mysqlx::Expr::DocumentPathItem_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Mysqlx.Expr.DocumentPathItem.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 index = 3;
      case 3: {
        if (tag == 24u) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Expr.DocumentPathItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Expr.DocumentPathItem)
  return false;
#undef DO_
}

void DocumentPathItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Expr.DocumentPathItem)
  // required .Mysqlx.Expr.DocumentPathItem.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Mysqlx.Expr.DocumentPathItem.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // optional uint32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Expr.DocumentPathItem)
}

::google::protobuf::uint8* DocumentPathItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Expr.DocumentPathItem)
  // required .Mysqlx.Expr.DocumentPathItem.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Mysqlx.Expr.DocumentPathItem.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // optional uint32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Expr.DocumentPathItem)
  return target;
}

size_t DocumentPathItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Expr.DocumentPathItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .Mysqlx.Expr.DocumentPathItem.Type type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional uint32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentPathItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mysqlx.Expr.DocumentPathItem)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentPathItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocumentPathItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mysqlx.Expr.DocumentPathItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mysqlx.Expr.DocumentPathItem)
    MergeFrom(*source);
  }
}

void DocumentPathItem::MergeFrom(const DocumentPathItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Expr.DocumentPathItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
}

void DocumentPathItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mysqlx.Expr.DocumentPathItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentPathItem::CopyFrom(const DocumentPathItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Expr.DocumentPathItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentPathItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  return true;
}

void DocumentPathItem::Swap(DocumentPathItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DocumentPathItem::InternalSwap(DocumentPathItem* other) {
  value_.Swap(&other->value_);
  std::swap(index_, other->index_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocumentPathItem::GetMetadata() const {
  protobuf_mysqlx_5fexpr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fexpr_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocumentPathItem

// required .Mysqlx.Expr.DocumentPathItem.Type type = 1;
bool DocumentPathItem::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DocumentPathItem::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void DocumentPathItem::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void DocumentPathItem::clear_type() {
  type_ = 1;
  clear_has_type();
}
::Mysqlx::Expr::DocumentPathItem_Type DocumentPathItem::type() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Expr.DocumentPathItem.type)
  return static_cast< ::Mysqlx::Expr::DocumentPathItem_Type >(type_);
}
void DocumentPathItem::set_type(::Mysqlx::Expr::DocumentPathItem_Type value) {
  assert(::Mysqlx::Expr::DocumentPathItem_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Mysqlx.Expr.DocumentPathItem.type)
}

// optional string value = 2;
bool DocumentPathItem::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DocumentPathItem::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
void DocumentPathItem::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
void DocumentPathItem::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& DocumentPathItem::value() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Expr.DocumentPathItem.value)
  return value_.GetNoArena();
}
void DocumentPathItem::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Mysqlx.Expr.DocumentPathItem.value)
}
#if LANG_CXX11
void DocumentPathItem::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mysqlx.Expr.DocumentPathItem.value)
}
#endif
void DocumentPathItem::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mysqlx.Expr.DocumentPathItem.value)
}
void DocumentPathItem::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Expr.DocumentPathItem.value)
}
::std::string* DocumentPathItem::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:Mysqlx.Expr.DocumentPathItem.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DocumentPathItem::release_value() {
  // @@protoc_insertion_point(field_release:Mysqlx.Expr.DocumentPathItem.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DocumentPathItem::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Expr.DocumentPathItem.value)
}

// optional uint32 index = 3;
bool DocumentPathItem::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DocumentPathItem::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
void DocumentPathItem::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void DocumentPathItem::clear_index() {
  index_ = 0u;
  clear_has_index();
}
::google::protobuf::uint32 DocumentPathItem::index() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Expr.DocumentPathItem.index)
  return index_;
}
void DocumentPathItem::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:Mysqlx.Expr.DocumentPathItem.index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ColumnIdentifier::kDocumentPathFieldNumber;
const int ColumnIdentifier::kNameFieldNumber;
const int ColumnIdentifier::kTableNameFieldNumber;
const int ColumnIdentifier::kSchemaNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ColumnIdentifier::ColumnIdentifier()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mysqlx_5fexpr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Expr.ColumnIdentifier)
}
ColumnIdentifier::ColumnIdentifier(const ColumnIdentifier& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      document_path_(from.document_path_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_table_name()) {
    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  schema_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_schema_name()) {
    schema_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.schema_name_);
  }
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Expr.ColumnIdentifier)
}

void ColumnIdentifier::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  schema_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ColumnIdentifier::~ColumnIdentifier() {
  // @@protoc_insertion_point(destructor:Mysqlx.Expr.ColumnIdentifier)
  SharedDtor();
}

void ColumnIdentifier::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  schema_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ColumnIdentifier::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ColumnIdentifier::descriptor() {
  protobuf_mysqlx_5fexpr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fexpr_2eproto::file_level_metadata[3].descriptor;
}

const ColumnIdentifier& ColumnIdentifier::default_instance() {
  protobuf_mysqlx_5fexpr_2eproto::InitDefaults();
  return *internal_default_instance();
}

ColumnIdentifier* ColumnIdentifier::New(::google::protobuf::Arena* arena) const {
  ColumnIdentifier* n = new ColumnIdentifier;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ColumnIdentifier::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Expr.ColumnIdentifier)
  document_path_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_table_name()) {
      GOOGLE_DCHECK(!table_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*table_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_schema_name()) {
      GOOGLE_DCHECK(!schema_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*schema_name_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ColumnIdentifier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Expr.ColumnIdentifier)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Mysqlx.Expr.DocumentPathItem document_path = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_document_path()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Mysqlx.Expr.ColumnIdentifier.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string table_name = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Mysqlx.Expr.ColumnIdentifier.table_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string schema_name = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_schema_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->schema_name().data(), this->schema_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Mysqlx.Expr.ColumnIdentifier.schema_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Expr.ColumnIdentifier)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Expr.ColumnIdentifier)
  return false;
#undef DO_
}

void ColumnIdentifier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Expr.ColumnIdentifier)
  // repeated .Mysqlx.Expr.DocumentPathItem document_path = 1;
  for (unsigned int i = 0, n = this->document_path_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->document_path(i), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Mysqlx.Expr.ColumnIdentifier.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string table_name = 3;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Mysqlx.Expr.ColumnIdentifier.table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->table_name(), output);
  }

  // optional string schema_name = 4;
  if (has_schema_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->schema_name().data(), this->schema_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Mysqlx.Expr.ColumnIdentifier.schema_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->schema_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Expr.ColumnIdentifier)
}

::google::protobuf::uint8* ColumnIdentifier::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Expr.ColumnIdentifier)
  // repeated .Mysqlx.Expr.DocumentPathItem document_path = 1;
  for (unsigned int i = 0, n = this->document_path_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->document_path(i), false, target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Mysqlx.Expr.ColumnIdentifier.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string table_name = 3;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Mysqlx.Expr.ColumnIdentifier.table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->table_name(), target);
  }

  // optional string schema_name = 4;
  if (has_schema_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->schema_name().data(), this->schema_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Mysqlx.Expr.ColumnIdentifier.schema_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->schema_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Expr.ColumnIdentifier)
  return target;
}

size_t ColumnIdentifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Expr.ColumnIdentifier)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .Mysqlx.Expr.DocumentPathItem document_path = 1;
  {
    unsigned int count = this->document_path_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->document_path(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string table_name = 3;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_name());
    }

    // optional string schema_name = 4;
    if (has_schema_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->schema_name());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ColumnIdentifier::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mysqlx.Expr.ColumnIdentifier)
  GOOGLE_DCHECK_NE(&from, this);
  const ColumnIdentifier* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ColumnIdentifier>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mysqlx.Expr.ColumnIdentifier)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mysqlx.Expr.ColumnIdentifier)
    MergeFrom(*source);
  }
}

void ColumnIdentifier::MergeFrom(const ColumnIdentifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Expr.ColumnIdentifier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  document_path_.MergeFrom(from.document_path_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_table_name()) {
      set_has_table_name();
      table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
    }
    if (from.has_schema_name()) {
      set_has_schema_name();
      schema_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.schema_name_);
    }
  }
}

void ColumnIdentifier::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mysqlx.Expr.ColumnIdentifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColumnIdentifier::CopyFrom(const ColumnIdentifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Expr.ColumnIdentifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnIdentifier::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->document_path())) return false;
  return true;
}

void ColumnIdentifier::Swap(ColumnIdentifier* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ColumnIdentifier::InternalSwap(ColumnIdentifier* other) {
  document_path_.UnsafeArenaSwap(&other->document_path_);
  name_.Swap(&other->name_);
  table_name_.Swap(&other->table_name_);
  schema_name_.Swap(&other->schema_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ColumnIdentifier::GetMetadata() const {
  protobuf_mysqlx_5fexpr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fexpr_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ColumnIdentifier

// repeated .Mysqlx.Expr.DocumentPathItem document_path = 1;
int ColumnIdentifier::document_path_size() const {
  return document_path_.size();
}
void ColumnIdentifier::clear_document_path() {
  document_path_.Clear();
}
const ::Mysqlx::Expr::DocumentPathItem& ColumnIdentifier::document_path(int index) const {
  // @@protoc_insertion_point(field_get:Mysqlx.Expr.ColumnIdentifier.document_path)
  return document_path_.Get(index);
}
::Mysqlx::Expr::DocumentPathItem* ColumnIdentifier::mutable_document_path(int index) {
  // @@protoc_insertion_point(field_mutable:Mysqlx.Expr.ColumnIdentifier.document_path)
  return document_path_.Mutable(index);
}
::Mysqlx::Expr::DocumentPathItem* ColumnIdentifier::add_document_path() {
  // @@protoc_insertion_point(field_add:Mysqlx.Expr.ColumnIdentifier.document_path)
  return document_path_.Add();
}
::google::protobuf::RepeatedPtrField< ::Mysqlx::Expr::DocumentPathItem >*
ColumnIdentifier::mutable_document_path() {
  // @@protoc_insertion_point(field_mutable_list:Mysqlx.Expr.ColumnIdentifier.document_path)
  return &document_path_;
}
const ::google::protobuf::RepeatedPtrField< ::Mysqlx::Expr::DocumentPathItem >&
ColumnIdentifier::document_path() const {
  // @@protoc_insertion_point(field_list:Mysqlx.Expr.ColumnIdentifier.document_path)
  return document_path_;
}

// optional string name = 2;
bool ColumnIdentifier::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ColumnIdentifier::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ColumnIdentifier::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ColumnIdentifier::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& ColumnIdentifier::name() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Expr.ColumnIdentifier.name)
  return name_.GetNoArena();
}
void ColumnIdentifier::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Mysqlx.Expr.ColumnIdentifier.name)
}
#if LANG_CXX11
void ColumnIdentifier::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mysqlx.Expr.ColumnIdentifier.name)
}
#endif
void ColumnIdentifier::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mysqlx.Expr.ColumnIdentifier.name)
}
void ColumnIdentifier::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Expr.ColumnIdentifier.name)
}
::std::string* ColumnIdentifier::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:Mysqlx.Expr.ColumnIdentifier.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ColumnIdentifier::release_name() {
  // @@protoc_insertion_point(field_release:Mysqlx.Expr.ColumnIdentifier.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ColumnIdentifier::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Expr.ColumnIdentifier.name)
}

// optional string table_name = 3;
bool ColumnIdentifier::has_table_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ColumnIdentifier::set_has_table_name() {
  _has_bits_[0] |= 0x00000002u;
}
void ColumnIdentifier::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void ColumnIdentifier::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_table_name();
}
const ::std::string& ColumnIdentifier::table_name() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Expr.ColumnIdentifier.table_name)
  return table_name_.GetNoArena();
}
void ColumnIdentifier::set_table_name(const ::std::string& value) {
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Mysqlx.Expr.ColumnIdentifier.table_name)
}
#if LANG_CXX11
void ColumnIdentifier::set_table_name(::std::string&& value) {
  set_has_table_name();
  table_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mysqlx.Expr.ColumnIdentifier.table_name)
}
#endif
void ColumnIdentifier::set_table_name(const char* value) {
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mysqlx.Expr.ColumnIdentifier.table_name)
}
void ColumnIdentifier::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Expr.ColumnIdentifier.table_name)
}
::std::string* ColumnIdentifier::mutable_table_name() {
  set_has_table_name();
  // @@protoc_insertion_point(field_mutable:Mysqlx.Expr.ColumnIdentifier.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ColumnIdentifier::release_table_name() {
  // @@protoc_insertion_point(field_release:Mysqlx.Expr.ColumnIdentifier.table_name)
  clear_has_table_name();
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ColumnIdentifier::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    set_has_table_name();
  } else {
    clear_has_table_name();
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Expr.ColumnIdentifier.table_name)
}

// optional string schema_name = 4;
bool ColumnIdentifier::has_schema_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ColumnIdentifier::set_has_schema_name() {
  _has_bits_[0] |= 0x00000004u;
}
void ColumnIdentifier::clear_has_schema_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void ColumnIdentifier::clear_schema_name() {
  schema_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_schema_name();
}
const ::std::string& ColumnIdentifier::schema_name() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Expr.ColumnIdentifier.schema_name)
  return schema_name_.GetNoArena();
}
void ColumnIdentifier::set_schema_name(const ::std::string& value) {
  set_has_schema_name();
  schema_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Mysqlx.Expr.ColumnIdentifier.schema_name)
}
#if LANG_CXX11
void ColumnIdentifier::set_schema_name(::std::string&& value) {
  set_has_schema_name();
  schema_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mysqlx.Expr.ColumnIdentifier.schema_name)
}
#endif
void ColumnIdentifier::set_schema_name(const char* value) {
  set_has_schema_name();
  schema_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mysqlx.Expr.ColumnIdentifier.schema_name)
}
void ColumnIdentifier::set_schema_name(const char* value, size_t size) {
  set_has_schema_name();
  schema_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Expr.ColumnIdentifier.schema_name)
}
::std::string* ColumnIdentifier::mutable_schema_name() {
  set_has_schema_name();
  // @@protoc_insertion_point(field_mutable:Mysqlx.Expr.ColumnIdentifier.schema_name)
  return schema_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ColumnIdentifier::release_schema_name() {
  // @@protoc_insertion_point(field_release:Mysqlx.Expr.ColumnIdentifier.schema_name)
  clear_has_schema_name();
  return schema_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ColumnIdentifier::set_allocated_schema_name(::std::string* schema_name) {
  if (schema_name != NULL) {
    set_has_schema_name();
  } else {
    clear_has_schema_name();
  }
  schema_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), schema_name);
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Expr.ColumnIdentifier.schema_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FunctionCall::kNameFieldNumber;
const int FunctionCall::kParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FunctionCall::FunctionCall()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mysqlx_5fexpr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Expr.FunctionCall)
}
FunctionCall::FunctionCall(const FunctionCall& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      param_(from.param_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_name()) {
    name_ = new ::Mysqlx::Expr::Identifier(*from.name_);
  } else {
    name_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Expr.FunctionCall)
}

void FunctionCall::SharedCtor() {
  _cached_size_ = 0;
  name_ = NULL;
}

FunctionCall::~FunctionCall() {
  // @@protoc_insertion_point(destructor:Mysqlx.Expr.FunctionCall)
  SharedDtor();
}

void FunctionCall::SharedDtor() {
  if (this != internal_default_instance()) {
    delete name_;
  }
}

void FunctionCall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FunctionCall::descriptor() {
  protobuf_mysqlx_5fexpr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fexpr_2eproto::file_level_metadata[4].descriptor;
}

const FunctionCall& FunctionCall::default_instance() {
  protobuf_mysqlx_5fexpr_2eproto::InitDefaults();
  return *internal_default_instance();
}

FunctionCall* FunctionCall::New(::google::protobuf::Arena* arena) const {
  FunctionCall* n = new FunctionCall;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FunctionCall::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Expr.FunctionCall)
  param_.Clear();
  if (has_name()) {
    GOOGLE_DCHECK(name_ != NULL);
    name_->::Mysqlx::Expr::Identifier::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FunctionCall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Expr.FunctionCall)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Mysqlx.Expr.Identifier name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Mysqlx.Expr.Expr param = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_param()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Expr.FunctionCall)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Expr.FunctionCall)
  return false;
#undef DO_
}

void FunctionCall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Expr.FunctionCall)
  // required .Mysqlx.Expr.Identifier name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->name_, output);
  }

  // repeated .Mysqlx.Expr.Expr param = 2;
  for (unsigned int i = 0, n = this->param_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->param(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Expr.FunctionCall)
}

::google::protobuf::uint8* FunctionCall::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Expr.FunctionCall)
  // required .Mysqlx.Expr.Identifier name = 1;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->name_, false, target);
  }

  // repeated .Mysqlx.Expr.Expr param = 2;
  for (unsigned int i = 0, n = this->param_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->param(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Expr.FunctionCall)
  return target;
}

size_t FunctionCall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Expr.FunctionCall)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .Mysqlx.Expr.Identifier name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->name_);
  }
  // repeated .Mysqlx.Expr.Expr param = 2;
  {
    unsigned int count = this->param_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->param(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FunctionCall::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mysqlx.Expr.FunctionCall)
  GOOGLE_DCHECK_NE(&from, this);
  const FunctionCall* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FunctionCall>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mysqlx.Expr.FunctionCall)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mysqlx.Expr.FunctionCall)
    MergeFrom(*source);
  }
}

void FunctionCall::MergeFrom(const FunctionCall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Expr.FunctionCall)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  param_.MergeFrom(from.param_);
  if (from.has_name()) {
    mutable_name()->::Mysqlx::Expr::Identifier::MergeFrom(from.name());
  }
}

void FunctionCall::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mysqlx.Expr.FunctionCall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunctionCall::CopyFrom(const FunctionCall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Expr.FunctionCall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionCall::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->param())) return false;
  if (has_name()) {
    if (!this->name_->IsInitialized()) return false;
  }
  return true;
}

void FunctionCall::Swap(FunctionCall* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FunctionCall::InternalSwap(FunctionCall* other) {
  param_.UnsafeArenaSwap(&other->param_);
  std::swap(name_, other->name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FunctionCall::GetMetadata() const {
  protobuf_mysqlx_5fexpr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fexpr_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FunctionCall

// required .Mysqlx.Expr.Identifier name = 1;
bool FunctionCall::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FunctionCall::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void FunctionCall::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void FunctionCall::clear_name() {
  if (name_ != NULL) name_->::Mysqlx::Expr::Identifier::Clear();
  clear_has_name();
}
const ::Mysqlx::Expr::Identifier& FunctionCall::name() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Expr.FunctionCall.name)
  return name_ != NULL ? *name_
                         : *::Mysqlx::Expr::Identifier::internal_default_instance();
}
::Mysqlx::Expr::Identifier* FunctionCall::mutable_name() {
  set_has_name();
  if (name_ == NULL) {
    name_ = new ::Mysqlx::Expr::Identifier;
  }
  // @@protoc_insertion_point(field_mutable:Mysqlx.Expr.FunctionCall.name)
  return name_;
}
::Mysqlx::Expr::Identifier* FunctionCall::release_name() {
  // @@protoc_insertion_point(field_release:Mysqlx.Expr.FunctionCall.name)
  clear_has_name();
  ::Mysqlx::Expr::Identifier* temp = name_;
  name_ = NULL;
  return temp;
}
void FunctionCall::set_allocated_name(::Mysqlx::Expr::Identifier* name) {
  delete name_;
  name_ = name;
  if (name) {
    set_has_name();
  } else {
    clear_has_name();
  }
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Expr.FunctionCall.name)
}

// repeated .Mysqlx.Expr.Expr param = 2;
int FunctionCall::param_size() const {
  return param_.size();
}
void FunctionCall::clear_param() {
  param_.Clear();
}
const ::Mysqlx::Expr::Expr& FunctionCall::param(int index) const {
  // @@protoc_insertion_point(field_get:Mysqlx.Expr.FunctionCall.param)
  return param_.Get(index);
}
::Mysqlx::Expr::Expr* FunctionCall::mutable_param(int index) {
  // @@protoc_insertion_point(field_mutable:Mysqlx.Expr.FunctionCall.param)
  return param_.Mutable(index);
}
::Mysqlx::Expr::Expr* FunctionCall::add_param() {
  // @@protoc_insertion_point(field_add:Mysqlx.Expr.FunctionCall.param)
  return param_.Add();
}
::google::protobuf::RepeatedPtrField< ::Mysqlx::Expr::Expr >*
FunctionCall::mutable_param() {
  // @@protoc_insertion_point(field_mutable_list:Mysqlx.Expr.FunctionCall.param)
  return &param_;
}
const ::google::protobuf::RepeatedPtrField< ::Mysqlx::Expr::Expr >&
FunctionCall::param() const {
  // @@protoc_insertion_point(field_list:Mysqlx.Expr.FunctionCall.param)
  return param_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Operator::kNameFieldNumber;
const int Operator::kParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Operator::Operator()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mysqlx_5fexpr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Expr.Operator)
}
Operator::Operator(const Operator& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      param_(from.param_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Expr.Operator)
}

void Operator::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Operator::~Operator() {
  // @@protoc_insertion_point(destructor:Mysqlx.Expr.Operator)
  SharedDtor();
}

void Operator::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Operator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Operator::descriptor() {
  protobuf_mysqlx_5fexpr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fexpr_2eproto::file_level_metadata[5].descriptor;
}

const Operator& Operator::default_instance() {
  protobuf_mysqlx_5fexpr_2eproto::InitDefaults();
  return *internal_default_instance();
}

Operator* Operator::New(::google::protobuf::Arena* arena) const {
  Operator* n = new Operator;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Operator::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Expr.Operator)
  param_.Clear();
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Operator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Expr.Operator)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Mysqlx.Expr.Operator.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Mysqlx.Expr.Expr param = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_param()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Expr.Operator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Expr.Operator)
  return false;
#undef DO_
}

void Operator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Expr.Operator)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Mysqlx.Expr.Operator.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .Mysqlx.Expr.Expr param = 2;
  for (unsigned int i = 0, n = this->param_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->param(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Expr.Operator)
}

::google::protobuf::uint8* Operator::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Expr.Operator)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Mysqlx.Expr.Operator.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .Mysqlx.Expr.Expr param = 2;
  for (unsigned int i = 0, n = this->param_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->param(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Expr.Operator)
  return target;
}

size_t Operator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Expr.Operator)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }
  // repeated .Mysqlx.Expr.Expr param = 2;
  {
    unsigned int count = this->param_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->param(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Operator::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mysqlx.Expr.Operator)
  GOOGLE_DCHECK_NE(&from, this);
  const Operator* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Operator>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mysqlx.Expr.Operator)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mysqlx.Expr.Operator)
    MergeFrom(*source);
  }
}

void Operator::MergeFrom(const Operator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Expr.Operator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  param_.MergeFrom(from.param_);
  if (from.has_name()) {
    set_has_name();
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void Operator::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mysqlx.Expr.Operator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Operator::CopyFrom(const Operator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Expr.Operator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Operator::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->param())) return false;
  return true;
}

void Operator::Swap(Operator* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Operator::InternalSwap(Operator* other) {
  param_.UnsafeArenaSwap(&other->param_);
  name_.Swap(&other->name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Operator::GetMetadata() const {
  protobuf_mysqlx_5fexpr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fexpr_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Operator

// required string name = 1;
bool Operator::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Operator::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Operator::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Operator::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& Operator::name() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Expr.Operator.name)
  return name_.GetNoArena();
}
void Operator::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Mysqlx.Expr.Operator.name)
}
#if LANG_CXX11
void Operator::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mysqlx.Expr.Operator.name)
}
#endif
void Operator::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mysqlx.Expr.Operator.name)
}
void Operator::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Expr.Operator.name)
}
::std::string* Operator::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:Mysqlx.Expr.Operator.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Operator::release_name() {
  // @@protoc_insertion_point(field_release:Mysqlx.Expr.Operator.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Operator::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Expr.Operator.name)
}

// repeated .Mysqlx.Expr.Expr param = 2;
int Operator::param_size() const {
  return param_.size();
}
void Operator::clear_param() {
  param_.Clear();
}
const ::Mysqlx::Expr::Expr& Operator::param(int index) const {
  // @@protoc_insertion_point(field_get:Mysqlx.Expr.Operator.param)
  return param_.Get(index);
}
::Mysqlx::Expr::Expr* Operator::mutable_param(int index) {
  // @@protoc_insertion_point(field_mutable:Mysqlx.Expr.Operator.param)
  return param_.Mutable(index);
}
::Mysqlx::Expr::Expr* Operator::add_param() {
  // @@protoc_insertion_point(field_add:Mysqlx.Expr.Operator.param)
  return param_.Add();
}
::google::protobuf::RepeatedPtrField< ::Mysqlx::Expr::Expr >*
Operator::mutable_param() {
  // @@protoc_insertion_point(field_mutable_list:Mysqlx.Expr.Operator.param)
  return &param_;
}
const ::google::protobuf::RepeatedPtrField< ::Mysqlx::Expr::Expr >&
Operator::param() const {
  // @@protoc_insertion_point(field_list:Mysqlx.Expr.Operator.param)
  return param_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Object_ObjectField::kKeyFieldNumber;
const int Object_ObjectField::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Object_ObjectField::Object_ObjectField()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mysqlx_5fexpr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Expr.Object.ObjectField)
}
Object_ObjectField::Object_ObjectField(const Object_ObjectField& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_value()) {
    value_ = new ::Mysqlx::Expr::Expr(*from.value_);
  } else {
    value_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Expr.Object.ObjectField)
}

void Object_ObjectField::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = NULL;
}

Object_ObjectField::~Object_ObjectField() {
  // @@protoc_insertion_point(destructor:Mysqlx.Expr.Object.ObjectField)
  SharedDtor();
}

void Object_ObjectField::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete value_;
  }
}

void Object_ObjectField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Object_ObjectField::descriptor() {
  protobuf_mysqlx_5fexpr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fexpr_2eproto::file_level_metadata[6].descriptor;
}

const Object_ObjectField& Object_ObjectField::default_instance() {
  protobuf_mysqlx_5fexpr_2eproto::InitDefaults();
  return *internal_default_instance();
}

Object_ObjectField* Object_ObjectField::New(::google::protobuf::Arena* arena) const {
  Object_ObjectField* n = new Object_ObjectField;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Object_ObjectField::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Expr.Object.ObjectField)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      GOOGLE_DCHECK(!key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*key_.UnsafeRawStringPointer())->clear();
    }
    if (has_value()) {
      GOOGLE_DCHECK(value_ != NULL);
      value_->::Mysqlx::Expr::Expr::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Object_ObjectField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Expr.Object.ObjectField)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Mysqlx.Expr.Object.ObjectField.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .Mysqlx.Expr.Expr value = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Expr.Object.ObjectField)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Expr.Object.ObjectField)
  return false;
#undef DO_
}

void Object_ObjectField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Expr.Object.ObjectField)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Mysqlx.Expr.Object.ObjectField.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // required .Mysqlx.Expr.Expr value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->value_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Expr.Object.ObjectField)
}

::google::protobuf::uint8* Object_ObjectField::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Expr.Object.ObjectField)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Mysqlx.Expr.Object.ObjectField.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required .Mysqlx.Expr.Expr value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->value_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Expr.Object.ObjectField)
  return target;
}

size_t Object_ObjectField::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Mysqlx.Expr.Object.ObjectField)
  size_t total_size = 0;

  if (has_key()) {
    // required string key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  if (has_value()) {
    // required .Mysqlx.Expr.Expr value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->value_);
  }

  return total_size;
}
size_t Object_ObjectField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Expr.Object.ObjectField)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());

    // required .Mysqlx.Expr.Expr value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->value_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Object_ObjectField::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mysqlx.Expr.Object.ObjectField)
  GOOGLE_DCHECK_NE(&from, this);
  const Object_ObjectField* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Object_ObjectField>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mysqlx.Expr.Object.ObjectField)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mysqlx.Expr.Object.ObjectField)
    MergeFrom(*source);
  }
}

void Object_ObjectField::MergeFrom(const Object_ObjectField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Expr.Object.ObjectField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_value()) {
      mutable_value()->::Mysqlx::Expr::Expr::MergeFrom(from.value());
    }
  }
}

void Object_ObjectField::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mysqlx.Expr.Object.ObjectField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Object_ObjectField::CopyFrom(const Object_ObjectField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Expr.Object.ObjectField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object_ObjectField::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_value()) {
    if (!this->value_->IsInitialized()) return false;
  }
  return true;
}

void Object_ObjectField::Swap(Object_ObjectField* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Object_ObjectField::InternalSwap(Object_ObjectField* other) {
  key_.Swap(&other->key_);
  std::swap(value_, other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Object_ObjectField::GetMetadata() const {
  protobuf_mysqlx_5fexpr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fexpr_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Object_ObjectField

// required string key = 1;
bool Object_ObjectField::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Object_ObjectField::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void Object_ObjectField::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void Object_ObjectField::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& Object_ObjectField::key() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Expr.Object.ObjectField.key)
  return key_.GetNoArena();
}
void Object_ObjectField::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Mysqlx.Expr.Object.ObjectField.key)
}
#if LANG_CXX11
void Object_ObjectField::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mysqlx.Expr.Object.ObjectField.key)
}
#endif
void Object_ObjectField::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mysqlx.Expr.Object.ObjectField.key)
}
void Object_ObjectField::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Expr.Object.ObjectField.key)
}
::std::string* Object_ObjectField::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:Mysqlx.Expr.Object.ObjectField.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Object_ObjectField::release_key() {
  // @@protoc_insertion_point(field_release:Mysqlx.Expr.Object.ObjectField.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Object_ObjectField::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Expr.Object.ObjectField.key)
}

// required .Mysqlx.Expr.Expr value = 2;
bool Object_ObjectField::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Object_ObjectField::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void Object_ObjectField::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void Object_ObjectField::clear_value() {
  if (value_ != NULL) value_->::Mysqlx::Expr::Expr::Clear();
  clear_has_value();
}
const ::Mysqlx::Expr::Expr& Object_ObjectField::value() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Expr.Object.ObjectField.value)
  return value_ != NULL ? *value_
                         : *::Mysqlx::Expr::Expr::internal_default_instance();
}
::Mysqlx::Expr::Expr* Object_ObjectField::mutable_value() {
  set_has_value();
  if (value_ == NULL) {
    value_ = new ::Mysqlx::Expr::Expr;
  }
  // @@protoc_insertion_point(field_mutable:Mysqlx.Expr.Object.ObjectField.value)
  return value_;
}
::Mysqlx::Expr::Expr* Object_ObjectField::release_value() {
  // @@protoc_insertion_point(field_release:Mysqlx.Expr.Object.ObjectField.value)
  clear_has_value();
  ::Mysqlx::Expr::Expr* temp = value_;
  value_ = NULL;
  return temp;
}
void Object_ObjectField::set_allocated_value(::Mysqlx::Expr::Expr* value) {
  delete value_;
  value_ = value;
  if (value) {
    set_has_value();
  } else {
    clear_has_value();
  }
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Expr.Object.ObjectField.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Object::kFldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Object::Object()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mysqlx_5fexpr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Expr.Object)
}
Object::Object(const Object& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      fld_(from.fld_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Expr.Object)
}

void Object::SharedCtor() {
  _cached_size_ = 0;
}

Object::~Object() {
  // @@protoc_insertion_point(destructor:Mysqlx.Expr.Object)
  SharedDtor();
}

void Object::SharedDtor() {
}

void Object::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Object::descriptor() {
  protobuf_mysqlx_5fexpr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fexpr_2eproto::file_level_metadata[7].descriptor;
}

const Object& Object::default_instance() {
  protobuf_mysqlx_5fexpr_2eproto::InitDefaults();
  return *internal_default_instance();
}

Object* Object::New(::google::protobuf::Arena* arena) const {
  Object* n = new Object;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Object::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Expr.Object)
  fld_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Object::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Expr.Object)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Mysqlx.Expr.Object.ObjectField fld = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_fld()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Expr.Object)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Expr.Object)
  return false;
#undef DO_
}

void Object::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Expr.Object)
  // repeated .Mysqlx.Expr.Object.ObjectField fld = 1;
  for (unsigned int i = 0, n = this->fld_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fld(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Expr.Object)
}

::google::protobuf::uint8* Object::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Expr.Object)
  // repeated .Mysqlx.Expr.Object.ObjectField fld = 1;
  for (unsigned int i = 0, n = this->fld_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->fld(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Expr.Object)
  return target;
}

size_t Object::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Expr.Object)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .Mysqlx.Expr.Object.ObjectField fld = 1;
  {
    unsigned int count = this->fld_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fld(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Object::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mysqlx.Expr.Object)
  GOOGLE_DCHECK_NE(&from, this);
  const Object* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Object>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mysqlx.Expr.Object)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mysqlx.Expr.Object)
    MergeFrom(*source);
  }
}

void Object::MergeFrom(const Object& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Expr.Object)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fld_.MergeFrom(from.fld_);
}

void Object::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mysqlx.Expr.Object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Object::CopyFrom(const Object& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Expr.Object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->fld())) return false;
  return true;
}

void Object::Swap(Object* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Object::InternalSwap(Object* other) {
  fld_.UnsafeArenaSwap(&other->fld_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Object::GetMetadata() const {
  protobuf_mysqlx_5fexpr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fexpr_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Object

// repeated .Mysqlx.Expr.Object.ObjectField fld = 1;
int Object::fld_size() const {
  return fld_.size();
}
void Object::clear_fld() {
  fld_.Clear();
}
const ::Mysqlx::Expr::Object_ObjectField& Object::fld(int index) const {
  // @@protoc_insertion_point(field_get:Mysqlx.Expr.Object.fld)
  return fld_.Get(index);
}
::Mysqlx::Expr::Object_ObjectField* Object::mutable_fld(int index) {
  // @@protoc_insertion_point(field_mutable:Mysqlx.Expr.Object.fld)
  return fld_.Mutable(index);
}
::Mysqlx::Expr::Object_ObjectField* Object::add_fld() {
  // @@protoc_insertion_point(field_add:Mysqlx.Expr.Object.fld)
  return fld_.Add();
}
::google::protobuf::RepeatedPtrField< ::Mysqlx::Expr::Object_ObjectField >*
Object::mutable_fld() {
  // @@protoc_insertion_point(field_mutable_list:Mysqlx.Expr.Object.fld)
  return &fld_;
}
const ::google::protobuf::RepeatedPtrField< ::Mysqlx::Expr::Object_ObjectField >&
Object::fld() const {
  // @@protoc_insertion_point(field_list:Mysqlx.Expr.Object.fld)
  return fld_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Array::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Array::Array()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mysqlx_5fexpr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Expr.Array)
}
Array::Array(const Array& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      value_(from.value_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Expr.Array)
}

void Array::SharedCtor() {
  _cached_size_ = 0;
}

Array::~Array() {
  // @@protoc_insertion_point(destructor:Mysqlx.Expr.Array)
  SharedDtor();
}

void Array::SharedDtor() {
}

void Array::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Array::descriptor() {
  protobuf_mysqlx_5fexpr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fexpr_2eproto::file_level_metadata[8].descriptor;
}

const Array& Array::default_instance() {
  protobuf_mysqlx_5fexpr_2eproto::InitDefaults();
  return *internal_default_instance();
}

Array* Array::New(::google::protobuf::Arena* arena) const {
  Array* n = new Array;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Array::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Expr.Array)
  value_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Array::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Expr.Array)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Mysqlx.Expr.Expr value = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_value()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Expr.Array)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Expr.Array)
  return false;
#undef DO_
}

void Array::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Expr.Array)
  // repeated .Mysqlx.Expr.Expr value = 1;
  for (unsigned int i = 0, n = this->value_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->value(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Expr.Array)
}

::google::protobuf::uint8* Array::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Expr.Array)
  // repeated .Mysqlx.Expr.Expr value = 1;
  for (unsigned int i = 0, n = this->value_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->value(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Expr.Array)
  return target;
}

size_t Array::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Expr.Array)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .Mysqlx.Expr.Expr value = 1;
  {
    unsigned int count = this->value_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Array::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mysqlx.Expr.Array)
  GOOGLE_DCHECK_NE(&from, this);
  const Array* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Array>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mysqlx.Expr.Array)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mysqlx.Expr.Array)
    MergeFrom(*source);
  }
}

void Array::MergeFrom(const Array& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Expr.Array)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.MergeFrom(from.value_);
}

void Array::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mysqlx.Expr.Array)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Array::CopyFrom(const Array& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Expr.Array)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Array::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->value())) return false;
  return true;
}

void Array::Swap(Array* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Array::InternalSwap(Array* other) {
  value_.UnsafeArenaSwap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Array::GetMetadata() const {
  protobuf_mysqlx_5fexpr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fexpr_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Array

// repeated .Mysqlx.Expr.Expr value = 1;
int Array::value_size() const {
  return value_.size();
}
void Array::clear_value() {
  value_.Clear();
}
const ::Mysqlx::Expr::Expr& Array::value(int index) const {
  // @@protoc_insertion_point(field_get:Mysqlx.Expr.Array.value)
  return value_.Get(index);
}
::Mysqlx::Expr::Expr* Array::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:Mysqlx.Expr.Array.value)
  return value_.Mutable(index);
}
::Mysqlx::Expr::Expr* Array::add_value() {
  // @@protoc_insertion_point(field_add:Mysqlx.Expr.Array.value)
  return value_.Add();
}
::google::protobuf::RepeatedPtrField< ::Mysqlx::Expr::Expr >*
Array::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:Mysqlx.Expr.Array.value)
  return &value_;
}
const ::google::protobuf::RepeatedPtrField< ::Mysqlx::Expr::Expr >&
Array::value() const {
  // @@protoc_insertion_point(field_list:Mysqlx.Expr.Array.value)
  return value_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Expr
}  // namespace Mysqlx

// @@protoc_insertion_point(global_scope)
