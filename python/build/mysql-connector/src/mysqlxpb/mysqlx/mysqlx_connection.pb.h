// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysqlx_connection.proto

#ifndef PROTOBUF_mysqlx_5fconnection_2eproto__INCLUDED
#define PROTOBUF_mysqlx_5fconnection_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "mysqlx_datatypes.pb.h"
// @@protoc_insertion_point(includes)
namespace Mysqlx {
namespace Connection {
class Capabilities;
class CapabilitiesDefaultTypeInternal;
extern CapabilitiesDefaultTypeInternal _Capabilities_default_instance_;
class CapabilitiesGet;
class CapabilitiesGetDefaultTypeInternal;
extern CapabilitiesGetDefaultTypeInternal _CapabilitiesGet_default_instance_;
class CapabilitiesSet;
class CapabilitiesSetDefaultTypeInternal;
extern CapabilitiesSetDefaultTypeInternal _CapabilitiesSet_default_instance_;
class Capability;
class CapabilityDefaultTypeInternal;
extern CapabilityDefaultTypeInternal _Capability_default_instance_;
class Close;
class CloseDefaultTypeInternal;
extern CloseDefaultTypeInternal _Close_default_instance_;
}  // namespace Connection
namespace Datatypes {
class Any;
class AnyDefaultTypeInternal;
extern AnyDefaultTypeInternal _Any_default_instance_;
class Array;
class ArrayDefaultTypeInternal;
extern ArrayDefaultTypeInternal _Array_default_instance_;
class Object;
class ObjectDefaultTypeInternal;
extern ObjectDefaultTypeInternal _Object_default_instance_;
class Object_ObjectField;
class Object_ObjectFieldDefaultTypeInternal;
extern Object_ObjectFieldDefaultTypeInternal _Object_ObjectField_default_instance_;
class Scalar;
class ScalarDefaultTypeInternal;
extern ScalarDefaultTypeInternal _Scalar_default_instance_;
class Scalar_Octets;
class Scalar_OctetsDefaultTypeInternal;
extern Scalar_OctetsDefaultTypeInternal _Scalar_Octets_default_instance_;
class Scalar_String;
class Scalar_StringDefaultTypeInternal;
extern Scalar_StringDefaultTypeInternal _Scalar_String_default_instance_;
}  // namespace Datatypes
}  // namespace Mysqlx

namespace Mysqlx {
namespace Connection {

namespace protobuf_mysqlx_5fconnection_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_mysqlx_5fconnection_2eproto

// ===================================================================

class Capability : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Mysqlx.Connection.Capability) */ {
 public:
  Capability();
  virtual ~Capability();

  Capability(const Capability& from);

  inline Capability& operator=(const Capability& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Capability& default_instance();

  static inline const Capability* internal_default_instance() {
    return reinterpret_cast<const Capability*>(
               &_Capability_default_instance_);
  }

  void Swap(Capability* other);

  // implements Message ----------------------------------------------

  inline Capability* New() const PROTOBUF_FINAL { return New(NULL); }

  Capability* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Capability& from);
  void MergeFrom(const Capability& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Capability* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required .Mysqlx.Datatypes.Any value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::Mysqlx::Datatypes::Any& value() const;
  ::Mysqlx::Datatypes::Any* mutable_value();
  ::Mysqlx::Datatypes::Any* release_value();
  void set_allocated_value(::Mysqlx::Datatypes::Any* value);

  // @@protoc_insertion_point(class_scope:Mysqlx.Connection.Capability)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_value();
  void clear_has_value();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::Mysqlx::Datatypes::Any* value_;
  friend struct  protobuf_mysqlx_5fconnection_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Capabilities : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Mysqlx.Connection.Capabilities) */ {
 public:
  Capabilities();
  virtual ~Capabilities();

  Capabilities(const Capabilities& from);

  inline Capabilities& operator=(const Capabilities& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Capabilities& default_instance();

  static inline const Capabilities* internal_default_instance() {
    return reinterpret_cast<const Capabilities*>(
               &_Capabilities_default_instance_);
  }

  void Swap(Capabilities* other);

  // implements Message ----------------------------------------------

  inline Capabilities* New() const PROTOBUF_FINAL { return New(NULL); }

  Capabilities* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Capabilities& from);
  void MergeFrom(const Capabilities& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Capabilities* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Mysqlx.Connection.Capability capabilities = 1;
  int capabilities_size() const;
  void clear_capabilities();
  static const int kCapabilitiesFieldNumber = 1;
  const ::Mysqlx::Connection::Capability& capabilities(int index) const;
  ::Mysqlx::Connection::Capability* mutable_capabilities(int index);
  ::Mysqlx::Connection::Capability* add_capabilities();
  ::google::protobuf::RepeatedPtrField< ::Mysqlx::Connection::Capability >*
      mutable_capabilities();
  const ::google::protobuf::RepeatedPtrField< ::Mysqlx::Connection::Capability >&
      capabilities() const;

  // @@protoc_insertion_point(class_scope:Mysqlx.Connection.Capabilities)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Mysqlx::Connection::Capability > capabilities_;
  friend struct  protobuf_mysqlx_5fconnection_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CapabilitiesGet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Mysqlx.Connection.CapabilitiesGet) */ {
 public:
  CapabilitiesGet();
  virtual ~CapabilitiesGet();

  CapabilitiesGet(const CapabilitiesGet& from);

  inline CapabilitiesGet& operator=(const CapabilitiesGet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CapabilitiesGet& default_instance();

  static inline const CapabilitiesGet* internal_default_instance() {
    return reinterpret_cast<const CapabilitiesGet*>(
               &_CapabilitiesGet_default_instance_);
  }

  void Swap(CapabilitiesGet* other);

  // implements Message ----------------------------------------------

  inline CapabilitiesGet* New() const PROTOBUF_FINAL { return New(NULL); }

  CapabilitiesGet* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CapabilitiesGet& from);
  void MergeFrom(const CapabilitiesGet& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CapabilitiesGet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Mysqlx.Connection.CapabilitiesGet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct  protobuf_mysqlx_5fconnection_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CapabilitiesSet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Mysqlx.Connection.CapabilitiesSet) */ {
 public:
  CapabilitiesSet();
  virtual ~CapabilitiesSet();

  CapabilitiesSet(const CapabilitiesSet& from);

  inline CapabilitiesSet& operator=(const CapabilitiesSet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CapabilitiesSet& default_instance();

  static inline const CapabilitiesSet* internal_default_instance() {
    return reinterpret_cast<const CapabilitiesSet*>(
               &_CapabilitiesSet_default_instance_);
  }

  void Swap(CapabilitiesSet* other);

  // implements Message ----------------------------------------------

  inline CapabilitiesSet* New() const PROTOBUF_FINAL { return New(NULL); }

  CapabilitiesSet* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CapabilitiesSet& from);
  void MergeFrom(const CapabilitiesSet& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CapabilitiesSet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Mysqlx.Connection.Capabilities capabilities = 1;
  bool has_capabilities() const;
  void clear_capabilities();
  static const int kCapabilitiesFieldNumber = 1;
  const ::Mysqlx::Connection::Capabilities& capabilities() const;
  ::Mysqlx::Connection::Capabilities* mutable_capabilities();
  ::Mysqlx::Connection::Capabilities* release_capabilities();
  void set_allocated_capabilities(::Mysqlx::Connection::Capabilities* capabilities);

  // @@protoc_insertion_point(class_scope:Mysqlx.Connection.CapabilitiesSet)
 private:
  void set_has_capabilities();
  void clear_has_capabilities();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::Mysqlx::Connection::Capabilities* capabilities_;
  friend struct  protobuf_mysqlx_5fconnection_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Close : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Mysqlx.Connection.Close) */ {
 public:
  Close();
  virtual ~Close();

  Close(const Close& from);

  inline Close& operator=(const Close& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Close& default_instance();

  static inline const Close* internal_default_instance() {
    return reinterpret_cast<const Close*>(
               &_Close_default_instance_);
  }

  void Swap(Close* other);

  // implements Message ----------------------------------------------

  inline Close* New() const PROTOBUF_FINAL { return New(NULL); }

  Close* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Close& from);
  void MergeFrom(const Close& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Close* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Mysqlx.Connection.Close)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct  protobuf_mysqlx_5fconnection_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Capability

// required string name = 1;
inline bool Capability::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Capability::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Capability::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Capability::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Capability::name() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Connection.Capability.name)
  return name_.GetNoArena();
}
inline void Capability::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Mysqlx.Connection.Capability.name)
}
#if LANG_CXX11
inline void Capability::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mysqlx.Connection.Capability.name)
}
#endif
inline void Capability::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mysqlx.Connection.Capability.name)
}
inline void Capability::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Connection.Capability.name)
}
inline ::std::string* Capability::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:Mysqlx.Connection.Capability.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Capability::release_name() {
  // @@protoc_insertion_point(field_release:Mysqlx.Connection.Capability.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Capability::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Connection.Capability.name)
}

// required .Mysqlx.Datatypes.Any value = 2;
inline bool Capability::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Capability::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Capability::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Capability::clear_value() {
  if (value_ != NULL) value_->::Mysqlx::Datatypes::Any::Clear();
  clear_has_value();
}
inline const ::Mysqlx::Datatypes::Any& Capability::value() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Connection.Capability.value)
  return value_ != NULL ? *value_
                         : *::Mysqlx::Datatypes::Any::internal_default_instance();
}
inline ::Mysqlx::Datatypes::Any* Capability::mutable_value() {
  set_has_value();
  if (value_ == NULL) {
    value_ = new ::Mysqlx::Datatypes::Any;
  }
  // @@protoc_insertion_point(field_mutable:Mysqlx.Connection.Capability.value)
  return value_;
}
inline ::Mysqlx::Datatypes::Any* Capability::release_value() {
  // @@protoc_insertion_point(field_release:Mysqlx.Connection.Capability.value)
  clear_has_value();
  ::Mysqlx::Datatypes::Any* temp = value_;
  value_ = NULL;
  return temp;
}
inline void Capability::set_allocated_value(::Mysqlx::Datatypes::Any* value) {
  delete value_;
  value_ = value;
  if (value) {
    set_has_value();
  } else {
    clear_has_value();
  }
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Connection.Capability.value)
}

// -------------------------------------------------------------------

// Capabilities

// repeated .Mysqlx.Connection.Capability capabilities = 1;
inline int Capabilities::capabilities_size() const {
  return capabilities_.size();
}
inline void Capabilities::clear_capabilities() {
  capabilities_.Clear();
}
inline const ::Mysqlx::Connection::Capability& Capabilities::capabilities(int index) const {
  // @@protoc_insertion_point(field_get:Mysqlx.Connection.Capabilities.capabilities)
  return capabilities_.Get(index);
}
inline ::Mysqlx::Connection::Capability* Capabilities::mutable_capabilities(int index) {
  // @@protoc_insertion_point(field_mutable:Mysqlx.Connection.Capabilities.capabilities)
  return capabilities_.Mutable(index);
}
inline ::Mysqlx::Connection::Capability* Capabilities::add_capabilities() {
  // @@protoc_insertion_point(field_add:Mysqlx.Connection.Capabilities.capabilities)
  return capabilities_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Mysqlx::Connection::Capability >*
Capabilities::mutable_capabilities() {
  // @@protoc_insertion_point(field_mutable_list:Mysqlx.Connection.Capabilities.capabilities)
  return &capabilities_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Mysqlx::Connection::Capability >&
Capabilities::capabilities() const {
  // @@protoc_insertion_point(field_list:Mysqlx.Connection.Capabilities.capabilities)
  return capabilities_;
}

// -------------------------------------------------------------------

// CapabilitiesGet

// -------------------------------------------------------------------

// CapabilitiesSet

// required .Mysqlx.Connection.Capabilities capabilities = 1;
inline bool CapabilitiesSet::has_capabilities() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CapabilitiesSet::set_has_capabilities() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CapabilitiesSet::clear_has_capabilities() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CapabilitiesSet::clear_capabilities() {
  if (capabilities_ != NULL) capabilities_->::Mysqlx::Connection::Capabilities::Clear();
  clear_has_capabilities();
}
inline const ::Mysqlx::Connection::Capabilities& CapabilitiesSet::capabilities() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Connection.CapabilitiesSet.capabilities)
  return capabilities_ != NULL ? *capabilities_
                         : *::Mysqlx::Connection::Capabilities::internal_default_instance();
}
inline ::Mysqlx::Connection::Capabilities* CapabilitiesSet::mutable_capabilities() {
  set_has_capabilities();
  if (capabilities_ == NULL) {
    capabilities_ = new ::Mysqlx::Connection::Capabilities;
  }
  // @@protoc_insertion_point(field_mutable:Mysqlx.Connection.CapabilitiesSet.capabilities)
  return capabilities_;
}
inline ::Mysqlx::Connection::Capabilities* CapabilitiesSet::release_capabilities() {
  // @@protoc_insertion_point(field_release:Mysqlx.Connection.CapabilitiesSet.capabilities)
  clear_has_capabilities();
  ::Mysqlx::Connection::Capabilities* temp = capabilities_;
  capabilities_ = NULL;
  return temp;
}
inline void CapabilitiesSet::set_allocated_capabilities(::Mysqlx::Connection::Capabilities* capabilities) {
  delete capabilities_;
  capabilities_ = capabilities;
  if (capabilities) {
    set_has_capabilities();
  } else {
    clear_has_capabilities();
  }
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Connection.CapabilitiesSet.capabilities)
}

// -------------------------------------------------------------------

// Close

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace Connection
}  // namespace Mysqlx

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mysqlx_5fconnection_2eproto__INCLUDED
