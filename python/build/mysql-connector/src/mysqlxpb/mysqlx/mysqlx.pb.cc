// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysqlx.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mysqlx.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Mysqlx {
class ClientMessagesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ClientMessages> {
} _ClientMessages_default_instance_;
class ServerMessagesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ServerMessages> {
} _ServerMessages_default_instance_;
class OkDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Ok> {
} _Ok_default_instance_;
class ErrorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Error> {
} _Error_default_instance_;

namespace protobuf_mysqlx_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessages, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessages, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessages, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessages, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ok, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ok, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ok, msg_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, severity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, sql_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, msg_),
  2,
  3,
  0,
  1,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 4, sizeof(ClientMessages)},
  { 4, 8, sizeof(ServerMessages)},
  { 8, 13, sizeof(Ok)},
  { 14, 22, sizeof(Error)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ClientMessages_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServerMessages_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Ok_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Error_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "mysqlx.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace

void TableStruct::Shutdown() {
  _ClientMessages_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _ServerMessages_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Ok_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Error_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::Mysqlx::Sql::protobuf_mysqlx_5fsql_2eproto::InitDefaults();
  ::Mysqlx::Resultset::protobuf_mysqlx_5fresultset_2eproto::InitDefaults();
  ::Mysqlx::Crud::protobuf_mysqlx_5fcrud_2eproto::InitDefaults();
  ::Mysqlx::Session::protobuf_mysqlx_5fsession_2eproto::InitDefaults();
  ::Mysqlx::Connection::protobuf_mysqlx_5fconnection_2eproto::InitDefaults();
  ::Mysqlx::Expect::protobuf_mysqlx_5fexpect_2eproto::InitDefaults();
  ::Mysqlx::Notice::protobuf_mysqlx_5fnotice_2eproto::InitDefaults();
  _ClientMessages_default_instance_.DefaultConstruct();
  _ServerMessages_default_instance_.DefaultConstruct();
  _Ok_default_instance_.DefaultConstruct();
  _Error_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\014mysqlx.proto\022\006Mysqlx\032\020mysqlx_sql.proto"
      "\032\026mysqlx_resultset.proto\032\021mysqlx_crud.pr"
      "oto\032\024mysqlx_session.proto\032\027mysqlx_connec"
      "tion.proto\032\023mysqlx_expect.proto\032\023mysqlx_"
      "notice.proto\"\264\002\n\016ClientMessages\"\241\002\n\004Type"
      "\022\030\n\024CON_CAPABILITIES_GET\020\001\022\030\n\024CON_CAPABI"
      "LITIES_SET\020\002\022\r\n\tCON_CLOSE\020\003\022\033\n\027SESS_AUTH"
      "ENTICATE_START\020\004\022\036\n\032SESS_AUTHENTICATE_CO"
      "NTINUE\020\005\022\016\n\nSESS_RESET\020\006\022\016\n\nSESS_CLOSE\020\007"
      "\022\024\n\020SQL_STMT_EXECUTE\020\014\022\r\n\tCRUD_FIND\020\021\022\017\n"
      "\013CRUD_INSERT\020\022\022\017\n\013CRUD_UPDATE\020\023\022\017\n\013CRUD_"
      "DELETE\020\024\022\017\n\013EXPECT_OPEN\020\030\022\020\n\014EXPECT_CLOS"
      "E\020\031\"\342\002\n\016ServerMessages\"\317\002\n\004Type\022\006\n\002OK\020\000\022"
      "\t\n\005ERROR\020\001\022\025\n\021CONN_CAPABILITIES\020\002\022\036\n\032SES"
      "S_AUTHENTICATE_CONTINUE\020\003\022\030\n\024SESS_AUTHEN"
      "TICATE_OK\020\004\022\n\n\006NOTICE\020\013\022\036\n\032RESULTSET_COL"
      "UMN_META_DATA\020\014\022\021\n\rRESULTSET_ROW\020\r\022\030\n\024RE"
      "SULTSET_FETCH_DONE\020\016\022\035\n\031RESULTSET_FETCH_"
      "SUSPENDED\020\017\022(\n$RESULTSET_FETCH_DONE_MORE"
      "_RESULTSETS\020\020\022\027\n\023SQL_STMT_EXECUTE_OK\020\021\022("
      "\n$RESULTSET_FETCH_DONE_MORE_OUT_PARAMS\020\022"
      "\"\021\n\002Ok\022\013\n\003msg\030\001 \001(\t\"\210\001\n\005Error\022/\n\010severit"
      "y\030\001 \001(\0162\026.Mysqlx.Error.Severity:\005ERROR\022\014"
      "\n\004code\030\002 \002(\r\022\021\n\tsql_state\030\004 \002(\t\022\013\n\003msg\030\003"
      " \002(\t\" \n\010Severity\022\t\n\005ERROR\020\000\022\t\n\005FATAL\020\001B\036"
      "\n\034com.mysql.cj.mysqlx.protobuf"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1030);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mysqlx.proto", &protobuf_RegisterTypes);
  ::Mysqlx::Sql::protobuf_mysqlx_5fsql_2eproto::AddDescriptors();
  ::Mysqlx::Resultset::protobuf_mysqlx_5fresultset_2eproto::AddDescriptors();
  ::Mysqlx::Crud::protobuf_mysqlx_5fcrud_2eproto::AddDescriptors();
  ::Mysqlx::Session::protobuf_mysqlx_5fsession_2eproto::AddDescriptors();
  ::Mysqlx::Connection::protobuf_mysqlx_5fconnection_2eproto::AddDescriptors();
  ::Mysqlx::Expect::protobuf_mysqlx_5fexpect_2eproto::AddDescriptors();
  ::Mysqlx::Notice::protobuf_mysqlx_5fnotice_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_mysqlx_2eproto

const ::google::protobuf::EnumDescriptor* ClientMessages_Type_descriptor() {
  protobuf_mysqlx_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_2eproto::file_level_enum_descriptors[0];
}
bool ClientMessages_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 12:
    case 17:
    case 18:
    case 19:
    case 20:
    case 24:
    case 25:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ClientMessages_Type ClientMessages::CON_CAPABILITIES_GET;
const ClientMessages_Type ClientMessages::CON_CAPABILITIES_SET;
const ClientMessages_Type ClientMessages::CON_CLOSE;
const ClientMessages_Type ClientMessages::SESS_AUTHENTICATE_START;
const ClientMessages_Type ClientMessages::SESS_AUTHENTICATE_CONTINUE;
const ClientMessages_Type ClientMessages::SESS_RESET;
const ClientMessages_Type ClientMessages::SESS_CLOSE;
const ClientMessages_Type ClientMessages::SQL_STMT_EXECUTE;
const ClientMessages_Type ClientMessages::CRUD_FIND;
const ClientMessages_Type ClientMessages::CRUD_INSERT;
const ClientMessages_Type ClientMessages::CRUD_UPDATE;
const ClientMessages_Type ClientMessages::CRUD_DELETE;
const ClientMessages_Type ClientMessages::EXPECT_OPEN;
const ClientMessages_Type ClientMessages::EXPECT_CLOSE;
const ClientMessages_Type ClientMessages::Type_MIN;
const ClientMessages_Type ClientMessages::Type_MAX;
const int ClientMessages::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ServerMessages_Type_descriptor() {
  protobuf_mysqlx_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_2eproto::file_level_enum_descriptors[1];
}
bool ServerMessages_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ServerMessages_Type ServerMessages::OK;
const ServerMessages_Type ServerMessages::ERROR;
const ServerMessages_Type ServerMessages::CONN_CAPABILITIES;
const ServerMessages_Type ServerMessages::SESS_AUTHENTICATE_CONTINUE;
const ServerMessages_Type ServerMessages::SESS_AUTHENTICATE_OK;
const ServerMessages_Type ServerMessages::NOTICE;
const ServerMessages_Type ServerMessages::RESULTSET_COLUMN_META_DATA;
const ServerMessages_Type ServerMessages::RESULTSET_ROW;
const ServerMessages_Type ServerMessages::RESULTSET_FETCH_DONE;
const ServerMessages_Type ServerMessages::RESULTSET_FETCH_SUSPENDED;
const ServerMessages_Type ServerMessages::RESULTSET_FETCH_DONE_MORE_RESULTSETS;
const ServerMessages_Type ServerMessages::SQL_STMT_EXECUTE_OK;
const ServerMessages_Type ServerMessages::RESULTSET_FETCH_DONE_MORE_OUT_PARAMS;
const ServerMessages_Type ServerMessages::Type_MIN;
const ServerMessages_Type ServerMessages::Type_MAX;
const int ServerMessages::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Error_Severity_descriptor() {
  protobuf_mysqlx_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_2eproto::file_level_enum_descriptors[2];
}
bool Error_Severity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Error_Severity Error::ERROR;
const Error_Severity Error::FATAL;
const Error_Severity Error::Severity_MIN;
const Error_Severity Error::Severity_MAX;
const int Error::Severity_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientMessages::ClientMessages()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mysqlx_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.ClientMessages)
}
ClientMessages::ClientMessages(const ClientMessages& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.ClientMessages)
}

void ClientMessages::SharedCtor() {
  _cached_size_ = 0;
}

ClientMessages::~ClientMessages() {
  // @@protoc_insertion_point(destructor:Mysqlx.ClientMessages)
  SharedDtor();
}

void ClientMessages::SharedDtor() {
}

void ClientMessages::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientMessages::descriptor() {
  protobuf_mysqlx_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_2eproto::file_level_metadata[0].descriptor;
}

const ClientMessages& ClientMessages::default_instance() {
  protobuf_mysqlx_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClientMessages* ClientMessages::New(::google::protobuf::Arena* arena) const {
  ClientMessages* n = new ClientMessages;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientMessages::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.ClientMessages)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ClientMessages::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.ClientMessages)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.ClientMessages)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.ClientMessages)
  return false;
#undef DO_
}

void ClientMessages::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.ClientMessages)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.ClientMessages)
}

::google::protobuf::uint8* ClientMessages::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.ClientMessages)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.ClientMessages)
  return target;
}

size_t ClientMessages::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.ClientMessages)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientMessages::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mysqlx.ClientMessages)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientMessages* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientMessages>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mysqlx.ClientMessages)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mysqlx.ClientMessages)
    MergeFrom(*source);
  }
}

void ClientMessages::MergeFrom(const ClientMessages& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.ClientMessages)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void ClientMessages::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mysqlx.ClientMessages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientMessages::CopyFrom(const ClientMessages& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.ClientMessages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMessages::IsInitialized() const {
  return true;
}

void ClientMessages::Swap(ClientMessages* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientMessages::InternalSwap(ClientMessages* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClientMessages::GetMetadata() const {
  protobuf_mysqlx_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientMessages

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerMessages::ServerMessages()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mysqlx_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.ServerMessages)
}
ServerMessages::ServerMessages(const ServerMessages& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.ServerMessages)
}

void ServerMessages::SharedCtor() {
  _cached_size_ = 0;
}

ServerMessages::~ServerMessages() {
  // @@protoc_insertion_point(destructor:Mysqlx.ServerMessages)
  SharedDtor();
}

void ServerMessages::SharedDtor() {
}

void ServerMessages::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerMessages::descriptor() {
  protobuf_mysqlx_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_2eproto::file_level_metadata[1].descriptor;
}

const ServerMessages& ServerMessages::default_instance() {
  protobuf_mysqlx_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServerMessages* ServerMessages::New(::google::protobuf::Arena* arena) const {
  ServerMessages* n = new ServerMessages;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerMessages::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.ServerMessages)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ServerMessages::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.ServerMessages)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.ServerMessages)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.ServerMessages)
  return false;
#undef DO_
}

void ServerMessages::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.ServerMessages)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.ServerMessages)
}

::google::protobuf::uint8* ServerMessages::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.ServerMessages)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.ServerMessages)
  return target;
}

size_t ServerMessages::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.ServerMessages)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerMessages::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mysqlx.ServerMessages)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerMessages* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerMessages>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mysqlx.ServerMessages)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mysqlx.ServerMessages)
    MergeFrom(*source);
  }
}

void ServerMessages::MergeFrom(const ServerMessages& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.ServerMessages)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void ServerMessages::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mysqlx.ServerMessages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerMessages::CopyFrom(const ServerMessages& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.ServerMessages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMessages::IsInitialized() const {
  return true;
}

void ServerMessages::Swap(ServerMessages* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerMessages::InternalSwap(ServerMessages* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerMessages::GetMetadata() const {
  protobuf_mysqlx_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerMessages

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ok::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ok::Ok()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mysqlx_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Ok)
}
Ok::Ok(const Ok& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msg()) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Ok)
}

void Ok::SharedCtor() {
  _cached_size_ = 0;
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Ok::~Ok() {
  // @@protoc_insertion_point(destructor:Mysqlx.Ok)
  SharedDtor();
}

void Ok::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Ok::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ok::descriptor() {
  protobuf_mysqlx_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_2eproto::file_level_metadata[2].descriptor;
}

const Ok& Ok::default_instance() {
  protobuf_mysqlx_2eproto::InitDefaults();
  return *internal_default_instance();
}

Ok* Ok::New(::google::protobuf::Arena* arena) const {
  Ok* n = new Ok;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ok::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Ok)
  if (has_msg()) {
    GOOGLE_DCHECK(!msg_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*msg_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Ok::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Ok)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msg = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Mysqlx.Ok.msg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Ok)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Ok)
  return false;
#undef DO_
}

void Ok::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Ok)
  // optional string msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Mysqlx.Ok.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Ok)
}

::google::protobuf::uint8* Ok::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Ok)
  // optional string msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Mysqlx.Ok.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Ok)
  return target;
}

size_t Ok::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Ok)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string msg = 1;
  if (has_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ok::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mysqlx.Ok)
  GOOGLE_DCHECK_NE(&from, this);
  const Ok* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ok>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mysqlx.Ok)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mysqlx.Ok)
    MergeFrom(*source);
  }
}

void Ok::MergeFrom(const Ok& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Ok)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_msg()) {
    set_has_msg();
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void Ok::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mysqlx.Ok)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ok::CopyFrom(const Ok& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Ok)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ok::IsInitialized() const {
  return true;
}

void Ok::Swap(Ok* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ok::InternalSwap(Ok* other) {
  msg_.Swap(&other->msg_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ok::GetMetadata() const {
  protobuf_mysqlx_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Ok

// optional string msg = 1;
bool Ok::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Ok::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
void Ok::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
void Ok::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
const ::std::string& Ok::msg() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Ok.msg)
  return msg_.GetNoArena();
}
void Ok::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Mysqlx.Ok.msg)
}
#if LANG_CXX11
void Ok::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mysqlx.Ok.msg)
}
#endif
void Ok::set_msg(const char* value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mysqlx.Ok.msg)
}
void Ok::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Ok.msg)
}
::std::string* Ok::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:Mysqlx.Ok.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Ok::release_msg() {
  // @@protoc_insertion_point(field_release:Mysqlx.Ok.msg)
  clear_has_msg();
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Ok::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Ok.msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Error::kSeverityFieldNumber;
const int Error::kCodeFieldNumber;
const int Error::kSqlStateFieldNumber;
const int Error::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Error::Error()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mysqlx_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Error)
}
Error::Error(const Error& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sql_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sql_state()) {
    sql_state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sql_state_);
  }
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msg()) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&severity_, &from.severity_,
    reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&severity_) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Error)
}

void Error::SharedCtor() {
  _cached_size_ = 0;
  sql_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&severity_, 0, reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&severity_) + sizeof(code_));
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:Mysqlx.Error)
  SharedDtor();
}

void Error::SharedDtor() {
  sql_state_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Error::descriptor() {
  protobuf_mysqlx_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_2eproto::file_level_metadata[3].descriptor;
}

const Error& Error::default_instance() {
  protobuf_mysqlx_2eproto::InitDefaults();
  return *internal_default_instance();
}

Error* Error::New(::google::protobuf::Arena* arena) const {
  Error* n = new Error;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Error::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Error)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_sql_state()) {
      GOOGLE_DCHECK(!sql_state_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sql_state_.UnsafeRawStringPointer())->clear();
    }
    if (has_msg()) {
      GOOGLE_DCHECK(!msg_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*msg_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&severity_, 0, reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&severity_) + sizeof(code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Error)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Mysqlx.Error.Severity severity = 1 [default = ERROR];
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Mysqlx::Error_Severity_IsValid(value)) {
            set_severity(static_cast< ::Mysqlx::Error_Severity >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 code = 2;
      case 2: {
        if (tag == 16u) {
          set_has_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string msg = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Mysqlx.Error.msg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string sql_state = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sql_state()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sql_state().data(), this->sql_state().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Mysqlx.Error.sql_state");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Error)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Error)
  return false;
#undef DO_
}

void Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Error)
  // optional .Mysqlx.Error.Severity severity = 1 [default = ERROR];
  if (has_severity()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->severity(), output);
  }

  // required uint32 code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->code(), output);
  }

  // required string msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Mysqlx.Error.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->msg(), output);
  }

  // required string sql_state = 4;
  if (has_sql_state()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sql_state().data(), this->sql_state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Mysqlx.Error.sql_state");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sql_state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Error)
}

::google::protobuf::uint8* Error::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Error)
  // optional .Mysqlx.Error.Severity severity = 1 [default = ERROR];
  if (has_severity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->severity(), target);
  }

  // required uint32 code = 2;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->code(), target);
  }

  // required string msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Mysqlx.Error.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msg(), target);
  }

  // required string sql_state = 4;
  if (has_sql_state()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sql_state().data(), this->sql_state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Mysqlx.Error.sql_state");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sql_state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Error)
  return target;
}

size_t Error::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Mysqlx.Error)
  size_t total_size = 0;

  if (has_sql_state()) {
    // required string sql_state = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sql_state());
  }

  if (has_msg()) {
    // required string msg = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  if (has_code()) {
    // required uint32 code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->code());
  }

  return total_size;
}
size_t Error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Error)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required string sql_state = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sql_state());

    // required string msg = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());

    // required uint32 code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->code());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .Mysqlx.Error.Severity severity = 1 [default = ERROR];
  if (has_severity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->severity());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Error::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mysqlx.Error)
  GOOGLE_DCHECK_NE(&from, this);
  const Error* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Error>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mysqlx.Error)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mysqlx.Error)
    MergeFrom(*source);
  }
}

void Error::MergeFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Error)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_sql_state()) {
      set_has_sql_state();
      sql_state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sql_state_);
    }
    if (from.has_msg()) {
      set_has_msg();
      msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
    }
    if (from.has_severity()) {
      set_severity(from.severity());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
}

void Error::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mysqlx.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error::CopyFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  return true;
}

void Error::Swap(Error* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Error::InternalSwap(Error* other) {
  sql_state_.Swap(&other->sql_state_);
  msg_.Swap(&other->msg_);
  std::swap(severity_, other->severity_);
  std::swap(code_, other->code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Error::GetMetadata() const {
  protobuf_mysqlx_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Error

// optional .Mysqlx.Error.Severity severity = 1 [default = ERROR];
bool Error::has_severity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Error::set_has_severity() {
  _has_bits_[0] |= 0x00000004u;
}
void Error::clear_has_severity() {
  _has_bits_[0] &= ~0x00000004u;
}
void Error::clear_severity() {
  severity_ = 0;
  clear_has_severity();
}
::Mysqlx::Error_Severity Error::severity() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Error.severity)
  return static_cast< ::Mysqlx::Error_Severity >(severity_);
}
void Error::set_severity(::Mysqlx::Error_Severity value) {
  assert(::Mysqlx::Error_Severity_IsValid(value));
  set_has_severity();
  severity_ = value;
  // @@protoc_insertion_point(field_set:Mysqlx.Error.severity)
}

// required uint32 code = 2;
bool Error::has_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Error::set_has_code() {
  _has_bits_[0] |= 0x00000008u;
}
void Error::clear_has_code() {
  _has_bits_[0] &= ~0x00000008u;
}
void Error::clear_code() {
  code_ = 0u;
  clear_has_code();
}
::google::protobuf::uint32 Error::code() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Error.code)
  return code_;
}
void Error::set_code(::google::protobuf::uint32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:Mysqlx.Error.code)
}

// required string sql_state = 4;
bool Error::has_sql_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Error::set_has_sql_state() {
  _has_bits_[0] |= 0x00000001u;
}
void Error::clear_has_sql_state() {
  _has_bits_[0] &= ~0x00000001u;
}
void Error::clear_sql_state() {
  sql_state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sql_state();
}
const ::std::string& Error::sql_state() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Error.sql_state)
  return sql_state_.GetNoArena();
}
void Error::set_sql_state(const ::std::string& value) {
  set_has_sql_state();
  sql_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Mysqlx.Error.sql_state)
}
#if LANG_CXX11
void Error::set_sql_state(::std::string&& value) {
  set_has_sql_state();
  sql_state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mysqlx.Error.sql_state)
}
#endif
void Error::set_sql_state(const char* value) {
  set_has_sql_state();
  sql_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mysqlx.Error.sql_state)
}
void Error::set_sql_state(const char* value, size_t size) {
  set_has_sql_state();
  sql_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Error.sql_state)
}
::std::string* Error::mutable_sql_state() {
  set_has_sql_state();
  // @@protoc_insertion_point(field_mutable:Mysqlx.Error.sql_state)
  return sql_state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Error::release_sql_state() {
  // @@protoc_insertion_point(field_release:Mysqlx.Error.sql_state)
  clear_has_sql_state();
  return sql_state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Error::set_allocated_sql_state(::std::string* sql_state) {
  if (sql_state != NULL) {
    set_has_sql_state();
  } else {
    clear_has_sql_state();
  }
  sql_state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sql_state);
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Error.sql_state)
}

// required string msg = 3;
bool Error::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Error::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
void Error::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
void Error::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
const ::std::string& Error::msg() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Error.msg)
  return msg_.GetNoArena();
}
void Error::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Mysqlx.Error.msg)
}
#if LANG_CXX11
void Error::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mysqlx.Error.msg)
}
#endif
void Error::set_msg(const char* value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mysqlx.Error.msg)
}
void Error::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Error.msg)
}
::std::string* Error::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:Mysqlx.Error.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Error::release_msg() {
  // @@protoc_insertion_point(field_release:Mysqlx.Error.msg)
  clear_has_msg();
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Error::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Error.msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Mysqlx

// @@protoc_insertion_point(global_scope)
