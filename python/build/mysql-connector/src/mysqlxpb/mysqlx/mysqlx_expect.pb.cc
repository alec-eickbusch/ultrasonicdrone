// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysqlx_expect.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mysqlx_expect.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Mysqlx {
namespace Expect {
class Open_ConditionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Open_Condition> {
} _Open_Condition_default_instance_;
class OpenDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Open> {
} _Open_default_instance_;
class CloseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Close> {
} _Close_default_instance_;

namespace protobuf_mysqlx_5fexpect_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Open_Condition, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Open_Condition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Open_Condition, condition_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Open_Condition, condition_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Open_Condition, op_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Open, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Open, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Open, op_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Open, cond_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Close, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Close, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(Open_Condition)},
  { 10, 16, sizeof(Open)},
  { 18, 22, sizeof(Close)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Open_Condition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Open_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Close_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "mysqlx_expect.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _Open_Condition_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Open_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Close_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Open_Condition_default_instance_.DefaultConstruct();
  _Open_default_instance_.DefaultConstruct();
  _Close_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\023mysqlx_expect.proto\022\rMysqlx.Expect\"\200\003\n"
      "\004Open\022B\n\002op\030\001 \001(\0162 .Mysqlx.Expect.Open.C"
      "txOperation:\024EXPECT_CTX_COPY_PREV\022+\n\004con"
      "d\030\002 \003(\0132\035.Mysqlx.Expect.Open.Condition\032\306"
      "\001\n\tCondition\022\025\n\rcondition_key\030\001 \002(\r\022\027\n\017c"
      "ondition_value\030\002 \001(\014\022K\n\002op\030\003 \001(\01620.Mysql"
      "x.Expect.Open.Condition.ConditionOperati"
      "on:\rEXPECT_OP_SET\"<\n\022ConditionOperation\022"
      "\021\n\rEXPECT_OP_SET\020\000\022\023\n\017EXPECT_OP_UNSET\020\001\""
      ">\n\014CtxOperation\022\030\n\024EXPECT_CTX_COPY_PREV\020"
      "\000\022\024\n\020EXPECT_CTX_EMPTY\020\001\"\007\n\005CloseB\036\n\034com."
      "mysql.cj.mysqlx.protobuf"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 464);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mysqlx_expect.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_mysqlx_5fexpect_2eproto

const ::google::protobuf::EnumDescriptor* Open_Condition_ConditionOperation_descriptor() {
  protobuf_mysqlx_5fexpect_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fexpect_2eproto::file_level_enum_descriptors[0];
}
bool Open_Condition_ConditionOperation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Open_Condition_ConditionOperation Open_Condition::EXPECT_OP_SET;
const Open_Condition_ConditionOperation Open_Condition::EXPECT_OP_UNSET;
const Open_Condition_ConditionOperation Open_Condition::ConditionOperation_MIN;
const Open_Condition_ConditionOperation Open_Condition::ConditionOperation_MAX;
const int Open_Condition::ConditionOperation_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Open_CtxOperation_descriptor() {
  protobuf_mysqlx_5fexpect_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fexpect_2eproto::file_level_enum_descriptors[1];
}
bool Open_CtxOperation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Open_CtxOperation Open::EXPECT_CTX_COPY_PREV;
const Open_CtxOperation Open::EXPECT_CTX_EMPTY;
const Open_CtxOperation Open::CtxOperation_MIN;
const Open_CtxOperation Open::CtxOperation_MAX;
const int Open::CtxOperation_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Open_Condition::kConditionKeyFieldNumber;
const int Open_Condition::kConditionValueFieldNumber;
const int Open_Condition::kOpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Open_Condition::Open_Condition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mysqlx_5fexpect_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Expect.Open.Condition)
}
Open_Condition::Open_Condition(const Open_Condition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  condition_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_condition_value()) {
    condition_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.condition_value_);
  }
  ::memcpy(&condition_key_, &from.condition_key_,
    reinterpret_cast<char*>(&op_) -
    reinterpret_cast<char*>(&condition_key_) + sizeof(op_));
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Expect.Open.Condition)
}

void Open_Condition::SharedCtor() {
  _cached_size_ = 0;
  condition_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&condition_key_, 0, reinterpret_cast<char*>(&op_) -
    reinterpret_cast<char*>(&condition_key_) + sizeof(op_));
}

Open_Condition::~Open_Condition() {
  // @@protoc_insertion_point(destructor:Mysqlx.Expect.Open.Condition)
  SharedDtor();
}

void Open_Condition::SharedDtor() {
  condition_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Open_Condition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Open_Condition::descriptor() {
  protobuf_mysqlx_5fexpect_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fexpect_2eproto::file_level_metadata[0].descriptor;
}

const Open_Condition& Open_Condition::default_instance() {
  protobuf_mysqlx_5fexpect_2eproto::InitDefaults();
  return *internal_default_instance();
}

Open_Condition* Open_Condition::New(::google::protobuf::Arena* arena) const {
  Open_Condition* n = new Open_Condition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Open_Condition::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Expect.Open.Condition)
  if (has_condition_value()) {
    GOOGLE_DCHECK(!condition_value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*condition_value_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&condition_key_, 0, reinterpret_cast<char*>(&op_) -
      reinterpret_cast<char*>(&condition_key_) + sizeof(op_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Open_Condition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Expect.Open.Condition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 condition_key = 1;
      case 1: {
        if (tag == 8u) {
          set_has_condition_key();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &condition_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes condition_value = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_condition_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Mysqlx.Expect.Open.Condition.ConditionOperation op = 3 [default = EXPECT_OP_SET];
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Mysqlx::Expect::Open_Condition_ConditionOperation_IsValid(value)) {
            set_op(static_cast< ::Mysqlx::Expect::Open_Condition_ConditionOperation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Expect.Open.Condition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Expect.Open.Condition)
  return false;
#undef DO_
}

void Open_Condition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Expect.Open.Condition)
  // required uint32 condition_key = 1;
  if (has_condition_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->condition_key(), output);
  }

  // optional bytes condition_value = 2;
  if (has_condition_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->condition_value(), output);
  }

  // optional .Mysqlx.Expect.Open.Condition.ConditionOperation op = 3 [default = EXPECT_OP_SET];
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->op(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Expect.Open.Condition)
}

::google::protobuf::uint8* Open_Condition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Expect.Open.Condition)
  // required uint32 condition_key = 1;
  if (has_condition_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->condition_key(), target);
  }

  // optional bytes condition_value = 2;
  if (has_condition_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->condition_value(), target);
  }

  // optional .Mysqlx.Expect.Open.Condition.ConditionOperation op = 3 [default = EXPECT_OP_SET];
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->op(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Expect.Open.Condition)
  return target;
}

size_t Open_Condition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Expect.Open.Condition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 condition_key = 1;
  if (has_condition_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->condition_key());
  }
  // optional bytes condition_value = 2;
  if (has_condition_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->condition_value());
  }

  // optional .Mysqlx.Expect.Open.Condition.ConditionOperation op = 3 [default = EXPECT_OP_SET];
  if (has_op()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->op());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Open_Condition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mysqlx.Expect.Open.Condition)
  GOOGLE_DCHECK_NE(&from, this);
  const Open_Condition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Open_Condition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mysqlx.Expect.Open.Condition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mysqlx.Expect.Open.Condition)
    MergeFrom(*source);
  }
}

void Open_Condition::MergeFrom(const Open_Condition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Expect.Open.Condition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_condition_value()) {
      set_has_condition_value();
      condition_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.condition_value_);
    }
    if (from.has_condition_key()) {
      set_condition_key(from.condition_key());
    }
    if (from.has_op()) {
      set_op(from.op());
    }
  }
}

void Open_Condition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mysqlx.Expect.Open.Condition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Open_Condition::CopyFrom(const Open_Condition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Expect.Open.Condition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Open_Condition::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void Open_Condition::Swap(Open_Condition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Open_Condition::InternalSwap(Open_Condition* other) {
  condition_value_.Swap(&other->condition_value_);
  std::swap(condition_key_, other->condition_key_);
  std::swap(op_, other->op_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Open_Condition::GetMetadata() const {
  protobuf_mysqlx_5fexpect_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fexpect_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Open_Condition

// required uint32 condition_key = 1;
bool Open_Condition::has_condition_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Open_Condition::set_has_condition_key() {
  _has_bits_[0] |= 0x00000002u;
}
void Open_Condition::clear_has_condition_key() {
  _has_bits_[0] &= ~0x00000002u;
}
void Open_Condition::clear_condition_key() {
  condition_key_ = 0u;
  clear_has_condition_key();
}
::google::protobuf::uint32 Open_Condition::condition_key() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Expect.Open.Condition.condition_key)
  return condition_key_;
}
void Open_Condition::set_condition_key(::google::protobuf::uint32 value) {
  set_has_condition_key();
  condition_key_ = value;
  // @@protoc_insertion_point(field_set:Mysqlx.Expect.Open.Condition.condition_key)
}

// optional bytes condition_value = 2;
bool Open_Condition::has_condition_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Open_Condition::set_has_condition_value() {
  _has_bits_[0] |= 0x00000001u;
}
void Open_Condition::clear_has_condition_value() {
  _has_bits_[0] &= ~0x00000001u;
}
void Open_Condition::clear_condition_value() {
  condition_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_condition_value();
}
const ::std::string& Open_Condition::condition_value() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Expect.Open.Condition.condition_value)
  return condition_value_.GetNoArena();
}
void Open_Condition::set_condition_value(const ::std::string& value) {
  set_has_condition_value();
  condition_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Mysqlx.Expect.Open.Condition.condition_value)
}
#if LANG_CXX11
void Open_Condition::set_condition_value(::std::string&& value) {
  set_has_condition_value();
  condition_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mysqlx.Expect.Open.Condition.condition_value)
}
#endif
void Open_Condition::set_condition_value(const char* value) {
  set_has_condition_value();
  condition_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mysqlx.Expect.Open.Condition.condition_value)
}
void Open_Condition::set_condition_value(const void* value, size_t size) {
  set_has_condition_value();
  condition_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Expect.Open.Condition.condition_value)
}
::std::string* Open_Condition::mutable_condition_value() {
  set_has_condition_value();
  // @@protoc_insertion_point(field_mutable:Mysqlx.Expect.Open.Condition.condition_value)
  return condition_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Open_Condition::release_condition_value() {
  // @@protoc_insertion_point(field_release:Mysqlx.Expect.Open.Condition.condition_value)
  clear_has_condition_value();
  return condition_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Open_Condition::set_allocated_condition_value(::std::string* condition_value) {
  if (condition_value != NULL) {
    set_has_condition_value();
  } else {
    clear_has_condition_value();
  }
  condition_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), condition_value);
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Expect.Open.Condition.condition_value)
}

// optional .Mysqlx.Expect.Open.Condition.ConditionOperation op = 3 [default = EXPECT_OP_SET];
bool Open_Condition::has_op() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Open_Condition::set_has_op() {
  _has_bits_[0] |= 0x00000004u;
}
void Open_Condition::clear_has_op() {
  _has_bits_[0] &= ~0x00000004u;
}
void Open_Condition::clear_op() {
  op_ = 0;
  clear_has_op();
}
::Mysqlx::Expect::Open_Condition_ConditionOperation Open_Condition::op() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Expect.Open.Condition.op)
  return static_cast< ::Mysqlx::Expect::Open_Condition_ConditionOperation >(op_);
}
void Open_Condition::set_op(::Mysqlx::Expect::Open_Condition_ConditionOperation value) {
  assert(::Mysqlx::Expect::Open_Condition_ConditionOperation_IsValid(value));
  set_has_op();
  op_ = value;
  // @@protoc_insertion_point(field_set:Mysqlx.Expect.Open.Condition.op)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Open::kOpFieldNumber;
const int Open::kCondFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Open::Open()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mysqlx_5fexpect_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Expect.Open)
}
Open::Open(const Open& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      cond_(from.cond_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  op_ = from.op_;
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Expect.Open)
}

void Open::SharedCtor() {
  _cached_size_ = 0;
  op_ = 0;
}

Open::~Open() {
  // @@protoc_insertion_point(destructor:Mysqlx.Expect.Open)
  SharedDtor();
}

void Open::SharedDtor() {
}

void Open::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Open::descriptor() {
  protobuf_mysqlx_5fexpect_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fexpect_2eproto::file_level_metadata[1].descriptor;
}

const Open& Open::default_instance() {
  protobuf_mysqlx_5fexpect_2eproto::InitDefaults();
  return *internal_default_instance();
}

Open* Open::New(::google::protobuf::Arena* arena) const {
  Open* n = new Open;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Open::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Expect.Open)
  cond_.Clear();
  op_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Open::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Expect.Open)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Mysqlx.Expect.Open.CtxOperation op = 1 [default = EXPECT_CTX_COPY_PREV];
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Mysqlx::Expect::Open_CtxOperation_IsValid(value)) {
            set_op(static_cast< ::Mysqlx::Expect::Open_CtxOperation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Mysqlx.Expect.Open.Condition cond = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_cond()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Expect.Open)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Expect.Open)
  return false;
#undef DO_
}

void Open::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Expect.Open)
  // optional .Mysqlx.Expect.Open.CtxOperation op = 1 [default = EXPECT_CTX_COPY_PREV];
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->op(), output);
  }

  // repeated .Mysqlx.Expect.Open.Condition cond = 2;
  for (unsigned int i = 0, n = this->cond_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cond(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Expect.Open)
}

::google::protobuf::uint8* Open::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Expect.Open)
  // optional .Mysqlx.Expect.Open.CtxOperation op = 1 [default = EXPECT_CTX_COPY_PREV];
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->op(), target);
  }

  // repeated .Mysqlx.Expect.Open.Condition cond = 2;
  for (unsigned int i = 0, n = this->cond_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->cond(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Expect.Open)
  return target;
}

size_t Open::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Expect.Open)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .Mysqlx.Expect.Open.Condition cond = 2;
  {
    unsigned int count = this->cond_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cond(i));
    }
  }

  // optional .Mysqlx.Expect.Open.CtxOperation op = 1 [default = EXPECT_CTX_COPY_PREV];
  if (has_op()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->op());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Open::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mysqlx.Expect.Open)
  GOOGLE_DCHECK_NE(&from, this);
  const Open* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Open>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mysqlx.Expect.Open)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mysqlx.Expect.Open)
    MergeFrom(*source);
  }
}

void Open::MergeFrom(const Open& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Expect.Open)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cond_.MergeFrom(from.cond_);
  if (from.has_op()) {
    set_op(from.op());
  }
}

void Open::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mysqlx.Expect.Open)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Open::CopyFrom(const Open& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Expect.Open)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Open::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->cond())) return false;
  return true;
}

void Open::Swap(Open* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Open::InternalSwap(Open* other) {
  cond_.UnsafeArenaSwap(&other->cond_);
  std::swap(op_, other->op_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Open::GetMetadata() const {
  protobuf_mysqlx_5fexpect_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fexpect_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Open

// optional .Mysqlx.Expect.Open.CtxOperation op = 1 [default = EXPECT_CTX_COPY_PREV];
bool Open::has_op() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Open::set_has_op() {
  _has_bits_[0] |= 0x00000001u;
}
void Open::clear_has_op() {
  _has_bits_[0] &= ~0x00000001u;
}
void Open::clear_op() {
  op_ = 0;
  clear_has_op();
}
::Mysqlx::Expect::Open_CtxOperation Open::op() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Expect.Open.op)
  return static_cast< ::Mysqlx::Expect::Open_CtxOperation >(op_);
}
void Open::set_op(::Mysqlx::Expect::Open_CtxOperation value) {
  assert(::Mysqlx::Expect::Open_CtxOperation_IsValid(value));
  set_has_op();
  op_ = value;
  // @@protoc_insertion_point(field_set:Mysqlx.Expect.Open.op)
}

// repeated .Mysqlx.Expect.Open.Condition cond = 2;
int Open::cond_size() const {
  return cond_.size();
}
void Open::clear_cond() {
  cond_.Clear();
}
const ::Mysqlx::Expect::Open_Condition& Open::cond(int index) const {
  // @@protoc_insertion_point(field_get:Mysqlx.Expect.Open.cond)
  return cond_.Get(index);
}
::Mysqlx::Expect::Open_Condition* Open::mutable_cond(int index) {
  // @@protoc_insertion_point(field_mutable:Mysqlx.Expect.Open.cond)
  return cond_.Mutable(index);
}
::Mysqlx::Expect::Open_Condition* Open::add_cond() {
  // @@protoc_insertion_point(field_add:Mysqlx.Expect.Open.cond)
  return cond_.Add();
}
::google::protobuf::RepeatedPtrField< ::Mysqlx::Expect::Open_Condition >*
Open::mutable_cond() {
  // @@protoc_insertion_point(field_mutable_list:Mysqlx.Expect.Open.cond)
  return &cond_;
}
const ::google::protobuf::RepeatedPtrField< ::Mysqlx::Expect::Open_Condition >&
Open::cond() const {
  // @@protoc_insertion_point(field_list:Mysqlx.Expect.Open.cond)
  return cond_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Close::Close()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mysqlx_5fexpect_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Expect.Close)
}
Close::Close(const Close& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Expect.Close)
}

void Close::SharedCtor() {
  _cached_size_ = 0;
}

Close::~Close() {
  // @@protoc_insertion_point(destructor:Mysqlx.Expect.Close)
  SharedDtor();
}

void Close::SharedDtor() {
}

void Close::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Close::descriptor() {
  protobuf_mysqlx_5fexpect_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fexpect_2eproto::file_level_metadata[2].descriptor;
}

const Close& Close::default_instance() {
  protobuf_mysqlx_5fexpect_2eproto::InitDefaults();
  return *internal_default_instance();
}

Close* Close::New(::google::protobuf::Arena* arena) const {
  Close* n = new Close;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Close::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Expect.Close)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Close::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Expect.Close)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Expect.Close)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Expect.Close)
  return false;
#undef DO_
}

void Close::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Expect.Close)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Expect.Close)
}

::google::protobuf::uint8* Close::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Expect.Close)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Expect.Close)
  return target;
}

size_t Close::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Expect.Close)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Close::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mysqlx.Expect.Close)
  GOOGLE_DCHECK_NE(&from, this);
  const Close* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Close>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mysqlx.Expect.Close)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mysqlx.Expect.Close)
    MergeFrom(*source);
  }
}

void Close::MergeFrom(const Close& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Expect.Close)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void Close::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mysqlx.Expect.Close)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Close::CopyFrom(const Close& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Expect.Close)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Close::IsInitialized() const {
  return true;
}

void Close::Swap(Close* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Close::InternalSwap(Close* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Close::GetMetadata() const {
  protobuf_mysqlx_5fexpect_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fexpect_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Close

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Expect
}  // namespace Mysqlx

// @@protoc_insertion_point(global_scope)
