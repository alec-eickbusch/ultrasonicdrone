// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysqlx_notice.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mysqlx_notice.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Mysqlx {
namespace Notice {
class FrameDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Frame> {
} _Frame_default_instance_;
class WarningDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Warning> {
} _Warning_default_instance_;
class SessionVariableChangedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SessionVariableChanged> {
} _SessionVariableChanged_default_instance_;
class SessionStateChangedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SessionStateChanged> {
} _SessionStateChanged_default_instance_;

namespace protobuf_mysqlx_5fnotice_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, scope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, payload_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Warning, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Warning, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Warning, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Warning, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Warning, msg_),
  2,
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionVariableChanged, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionVariableChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionVariableChanged, param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionVariableChanged, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionStateChanged, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionStateChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionStateChanged, param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionStateChanged, value_),
  1,
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(Frame)},
  { 10, 17, sizeof(Warning)},
  { 20, 26, sizeof(SessionVariableChanged)},
  { 28, 34, sizeof(SessionStateChanged)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Frame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Warning_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SessionVariableChanged_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SessionStateChanged_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "mysqlx_notice.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace

void TableStruct::Shutdown() {
  _Frame_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Warning_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _SessionVariableChanged_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _SessionStateChanged_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::Mysqlx::Datatypes::protobuf_mysqlx_5fdatatypes_2eproto::InitDefaults();
  _Frame_default_instance_.DefaultConstruct();
  _Warning_default_instance_.DefaultConstruct();
  _SessionVariableChanged_default_instance_.DefaultConstruct();
  _SessionStateChanged_default_instance_.DefaultConstruct();
  _SessionVariableChanged_default_instance_.get_mutable()->value_ = const_cast< ::Mysqlx::Datatypes::Scalar*>(
      ::Mysqlx::Datatypes::Scalar::internal_default_instance());
  _SessionStateChanged_default_instance_.get_mutable()->value_ = const_cast< ::Mysqlx::Datatypes::Scalar*>(
      ::Mysqlx::Datatypes::Scalar::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\023mysqlx_notice.proto\022\rMysqlx.Notice\032\026my"
      "sqlx_datatypes.proto\"y\n\005Frame\022\014\n\004type\030\001 "
      "\002(\r\0221\n\005scope\030\002 \001(\0162\032.Mysqlx.Notice.Frame"
      ".Scope:\006GLOBAL\022\017\n\007payload\030\003 \001(\014\"\036\n\005Scope"
      "\022\n\n\006GLOBAL\020\001\022\t\n\005LOCAL\020\002\"\205\001\n\007Warning\0224\n\005l"
      "evel\030\001 \001(\0162\034.Mysqlx.Notice.Warning.Level"
      ":\007WARNING\022\014\n\004code\030\002 \002(\r\022\013\n\003msg\030\003 \002(\t\")\n\005"
      "Level\022\010\n\004NOTE\020\001\022\013\n\007WARNING\020\002\022\t\n\005ERROR\020\003\""
      "P\n\026SessionVariableChanged\022\r\n\005param\030\001 \002(\t"
      "\022\'\n\005value\030\002 \001(\0132\030.Mysqlx.Datatypes.Scala"
      "r\"\325\002\n\023SessionStateChanged\022;\n\005param\030\001 \002(\016"
      "2,.Mysqlx.Notice.SessionStateChanged.Par"
      "ameter\022\'\n\005value\030\002 \001(\0132\030.Mysqlx.Datatypes"
      ".Scalar\"\327\001\n\tParameter\022\022\n\016CURRENT_SCHEMA\020"
      "\001\022\023\n\017ACCOUNT_EXPIRED\020\002\022\027\n\023GENERATED_INSE"
      "RT_ID\020\003\022\021\n\rROWS_AFFECTED\020\004\022\016\n\nROWS_FOUND"
      "\020\005\022\020\n\014ROWS_MATCHED\020\006\022\021\n\rTRX_COMMITTED\020\007\022"
      "\022\n\016TRX_ROLLEDBACK\020\t\022\024\n\020PRODUCED_MESSAGE\020"
      "\n\022\026\n\022CLIENT_ID_ASSIGNED\020\013B\036\n\034com.mysql.c"
      "j.mysqlx.protobuf"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 777);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mysqlx_notice.proto", &protobuf_RegisterTypes);
  ::Mysqlx::Datatypes::protobuf_mysqlx_5fdatatypes_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_mysqlx_5fnotice_2eproto

const ::google::protobuf::EnumDescriptor* Frame_Scope_descriptor() {
  protobuf_mysqlx_5fnotice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fnotice_2eproto::file_level_enum_descriptors[0];
}
bool Frame_Scope_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Frame_Scope Frame::GLOBAL;
const Frame_Scope Frame::LOCAL;
const Frame_Scope Frame::Scope_MIN;
const Frame_Scope Frame::Scope_MAX;
const int Frame::Scope_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Warning_Level_descriptor() {
  protobuf_mysqlx_5fnotice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fnotice_2eproto::file_level_enum_descriptors[1];
}
bool Warning_Level_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Warning_Level Warning::NOTE;
const Warning_Level Warning::WARNING;
const Warning_Level Warning::ERROR;
const Warning_Level Warning::Level_MIN;
const Warning_Level Warning::Level_MAX;
const int Warning::Level_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SessionStateChanged_Parameter_descriptor() {
  protobuf_mysqlx_5fnotice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fnotice_2eproto::file_level_enum_descriptors[2];
}
bool SessionStateChanged_Parameter_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SessionStateChanged_Parameter SessionStateChanged::CURRENT_SCHEMA;
const SessionStateChanged_Parameter SessionStateChanged::ACCOUNT_EXPIRED;
const SessionStateChanged_Parameter SessionStateChanged::GENERATED_INSERT_ID;
const SessionStateChanged_Parameter SessionStateChanged::ROWS_AFFECTED;
const SessionStateChanged_Parameter SessionStateChanged::ROWS_FOUND;
const SessionStateChanged_Parameter SessionStateChanged::ROWS_MATCHED;
const SessionStateChanged_Parameter SessionStateChanged::TRX_COMMITTED;
const SessionStateChanged_Parameter SessionStateChanged::TRX_ROLLEDBACK;
const SessionStateChanged_Parameter SessionStateChanged::PRODUCED_MESSAGE;
const SessionStateChanged_Parameter SessionStateChanged::CLIENT_ID_ASSIGNED;
const SessionStateChanged_Parameter SessionStateChanged::Parameter_MIN;
const SessionStateChanged_Parameter SessionStateChanged::Parameter_MAX;
const int SessionStateChanged::Parameter_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Frame::kTypeFieldNumber;
const int Frame::kScopeFieldNumber;
const int Frame::kPayloadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Frame::Frame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mysqlx_5fnotice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Notice.Frame)
}
Frame::Frame(const Frame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_payload()) {
    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&scope_) -
    reinterpret_cast<char*>(&type_) + sizeof(scope_));
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Notice.Frame)
}

void Frame::SharedCtor() {
  _cached_size_ = 0;
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0u;
  scope_ = 1;
}

Frame::~Frame() {
  // @@protoc_insertion_point(destructor:Mysqlx.Notice.Frame)
  SharedDtor();
}

void Frame::SharedDtor() {
  payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Frame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Frame::descriptor() {
  protobuf_mysqlx_5fnotice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fnotice_2eproto::file_level_metadata[0].descriptor;
}

const Frame& Frame::default_instance() {
  protobuf_mysqlx_5fnotice_2eproto::InitDefaults();
  return *internal_default_instance();
}

Frame* Frame::New(::google::protobuf::Arena* arena) const {
  Frame* n = new Frame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Frame::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Notice.Frame)
  if (has_payload()) {
    GOOGLE_DCHECK(!payload_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*payload_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    type_ = 0u;
    scope_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Frame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Notice.Frame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (tag == 8u) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Mysqlx.Notice.Frame.Scope scope = 2 [default = GLOBAL];
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Mysqlx::Notice::Frame_Scope_IsValid(value)) {
            set_scope(static_cast< ::Mysqlx::Notice::Frame_Scope >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes payload = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Notice.Frame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Notice.Frame)
  return false;
#undef DO_
}

void Frame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Notice.Frame)
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional .Mysqlx.Notice.Frame.Scope scope = 2 [default = GLOBAL];
  if (has_scope()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->scope(), output);
  }

  // optional bytes payload = 3;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->payload(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Notice.Frame)
}

::google::protobuf::uint8* Frame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Notice.Frame)
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional .Mysqlx.Notice.Frame.Scope scope = 2 [default = GLOBAL];
  if (has_scope()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->scope(), target);
  }

  // optional bytes payload = 3;
  if (has_payload()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->payload(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Notice.Frame)
  return target;
}

size_t Frame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Notice.Frame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }
  // optional bytes payload = 3;
  if (has_payload()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->payload());
  }

  // optional .Mysqlx.Notice.Frame.Scope scope = 2 [default = GLOBAL];
  if (has_scope()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->scope());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Frame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mysqlx.Notice.Frame)
  GOOGLE_DCHECK_NE(&from, this);
  const Frame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Frame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mysqlx.Notice.Frame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mysqlx.Notice.Frame)
    MergeFrom(*source);
  }
}

void Frame::MergeFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Notice.Frame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_payload()) {
      set_has_payload();
      payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_scope()) {
      set_scope(from.scope());
    }
  }
}

void Frame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mysqlx.Notice.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Frame::CopyFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Notice.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Frame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void Frame::Swap(Frame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Frame::InternalSwap(Frame* other) {
  payload_.Swap(&other->payload_);
  std::swap(type_, other->type_);
  std::swap(scope_, other->scope_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Frame::GetMetadata() const {
  protobuf_mysqlx_5fnotice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fnotice_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Frame

// required uint32 type = 1;
bool Frame::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Frame::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void Frame::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void Frame::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 Frame::type() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Notice.Frame.type)
  return type_;
}
void Frame::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Mysqlx.Notice.Frame.type)
}

// optional .Mysqlx.Notice.Frame.Scope scope = 2 [default = GLOBAL];
bool Frame::has_scope() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Frame::set_has_scope() {
  _has_bits_[0] |= 0x00000004u;
}
void Frame::clear_has_scope() {
  _has_bits_[0] &= ~0x00000004u;
}
void Frame::clear_scope() {
  scope_ = 1;
  clear_has_scope();
}
::Mysqlx::Notice::Frame_Scope Frame::scope() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Notice.Frame.scope)
  return static_cast< ::Mysqlx::Notice::Frame_Scope >(scope_);
}
void Frame::set_scope(::Mysqlx::Notice::Frame_Scope value) {
  assert(::Mysqlx::Notice::Frame_Scope_IsValid(value));
  set_has_scope();
  scope_ = value;
  // @@protoc_insertion_point(field_set:Mysqlx.Notice.Frame.scope)
}

// optional bytes payload = 3;
bool Frame::has_payload() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Frame::set_has_payload() {
  _has_bits_[0] |= 0x00000001u;
}
void Frame::clear_has_payload() {
  _has_bits_[0] &= ~0x00000001u;
}
void Frame::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_payload();
}
const ::std::string& Frame::payload() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Notice.Frame.payload)
  return payload_.GetNoArena();
}
void Frame::set_payload(const ::std::string& value) {
  set_has_payload();
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Mysqlx.Notice.Frame.payload)
}
#if LANG_CXX11
void Frame::set_payload(::std::string&& value) {
  set_has_payload();
  payload_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mysqlx.Notice.Frame.payload)
}
#endif
void Frame::set_payload(const char* value) {
  set_has_payload();
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mysqlx.Notice.Frame.payload)
}
void Frame::set_payload(const void* value, size_t size) {
  set_has_payload();
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Notice.Frame.payload)
}
::std::string* Frame::mutable_payload() {
  set_has_payload();
  // @@protoc_insertion_point(field_mutable:Mysqlx.Notice.Frame.payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Frame::release_payload() {
  // @@protoc_insertion_point(field_release:Mysqlx.Notice.Frame.payload)
  clear_has_payload();
  return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Frame::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    set_has_payload();
  } else {
    clear_has_payload();
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Notice.Frame.payload)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Warning::kLevelFieldNumber;
const int Warning::kCodeFieldNumber;
const int Warning::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Warning::Warning()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mysqlx_5fnotice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Notice.Warning)
}
Warning::Warning(const Warning& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msg()) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&code_, &from.code_,
    reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&code_) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Notice.Warning)
}

void Warning::SharedCtor() {
  _cached_size_ = 0;
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0u;
  level_ = 2;
}

Warning::~Warning() {
  // @@protoc_insertion_point(destructor:Mysqlx.Notice.Warning)
  SharedDtor();
}

void Warning::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Warning::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Warning::descriptor() {
  protobuf_mysqlx_5fnotice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fnotice_2eproto::file_level_metadata[1].descriptor;
}

const Warning& Warning::default_instance() {
  protobuf_mysqlx_5fnotice_2eproto::InitDefaults();
  return *internal_default_instance();
}

Warning* Warning::New(::google::protobuf::Arena* arena) const {
  Warning* n = new Warning;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Warning::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Notice.Warning)
  if (has_msg()) {
    GOOGLE_DCHECK(!msg_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*msg_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    code_ = 0u;
    level_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Warning::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Notice.Warning)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Mysqlx.Notice.Warning.Level level = 1 [default = WARNING];
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Mysqlx::Notice::Warning_Level_IsValid(value)) {
            set_level(static_cast< ::Mysqlx::Notice::Warning_Level >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 code = 2;
      case 2: {
        if (tag == 16u) {
          set_has_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string msg = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Mysqlx.Notice.Warning.msg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Notice.Warning)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Notice.Warning)
  return false;
#undef DO_
}

void Warning::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Notice.Warning)
  // optional .Mysqlx.Notice.Warning.Level level = 1 [default = WARNING];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->level(), output);
  }

  // required uint32 code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->code(), output);
  }

  // required string msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Mysqlx.Notice.Warning.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Notice.Warning)
}

::google::protobuf::uint8* Warning::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Notice.Warning)
  // optional .Mysqlx.Notice.Warning.Level level = 1 [default = WARNING];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->level(), target);
  }

  // required uint32 code = 2;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->code(), target);
  }

  // required string msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Mysqlx.Notice.Warning.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Notice.Warning)
  return target;
}

size_t Warning::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Mysqlx.Notice.Warning)
  size_t total_size = 0;

  if (has_msg()) {
    // required string msg = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  if (has_code()) {
    // required uint32 code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->code());
  }

  return total_size;
}
size_t Warning::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Notice.Warning)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string msg = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());

    // required uint32 code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->code());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .Mysqlx.Notice.Warning.Level level = 1 [default = WARNING];
  if (has_level()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->level());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Warning::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mysqlx.Notice.Warning)
  GOOGLE_DCHECK_NE(&from, this);
  const Warning* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Warning>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mysqlx.Notice.Warning)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mysqlx.Notice.Warning)
    MergeFrom(*source);
  }
}

void Warning::MergeFrom(const Warning& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Notice.Warning)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_msg()) {
      set_has_msg();
      msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
}

void Warning::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mysqlx.Notice.Warning)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Warning::CopyFrom(const Warning& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Notice.Warning)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Warning::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Warning::Swap(Warning* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Warning::InternalSwap(Warning* other) {
  msg_.Swap(&other->msg_);
  std::swap(code_, other->code_);
  std::swap(level_, other->level_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Warning::GetMetadata() const {
  protobuf_mysqlx_5fnotice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fnotice_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Warning

// optional .Mysqlx.Notice.Warning.Level level = 1 [default = WARNING];
bool Warning::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Warning::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
void Warning::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
void Warning::clear_level() {
  level_ = 2;
  clear_has_level();
}
::Mysqlx::Notice::Warning_Level Warning::level() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Notice.Warning.level)
  return static_cast< ::Mysqlx::Notice::Warning_Level >(level_);
}
void Warning::set_level(::Mysqlx::Notice::Warning_Level value) {
  assert(::Mysqlx::Notice::Warning_Level_IsValid(value));
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:Mysqlx.Notice.Warning.level)
}

// required uint32 code = 2;
bool Warning::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Warning::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
void Warning::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void Warning::clear_code() {
  code_ = 0u;
  clear_has_code();
}
::google::protobuf::uint32 Warning::code() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Notice.Warning.code)
  return code_;
}
void Warning::set_code(::google::protobuf::uint32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:Mysqlx.Notice.Warning.code)
}

// required string msg = 3;
bool Warning::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Warning::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
void Warning::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
void Warning::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
const ::std::string& Warning::msg() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Notice.Warning.msg)
  return msg_.GetNoArena();
}
void Warning::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Mysqlx.Notice.Warning.msg)
}
#if LANG_CXX11
void Warning::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mysqlx.Notice.Warning.msg)
}
#endif
void Warning::set_msg(const char* value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mysqlx.Notice.Warning.msg)
}
void Warning::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Notice.Warning.msg)
}
::std::string* Warning::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:Mysqlx.Notice.Warning.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Warning::release_msg() {
  // @@protoc_insertion_point(field_release:Mysqlx.Notice.Warning.msg)
  clear_has_msg();
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Warning::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Notice.Warning.msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SessionVariableChanged::kParamFieldNumber;
const int SessionVariableChanged::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SessionVariableChanged::SessionVariableChanged()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mysqlx_5fnotice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Notice.SessionVariableChanged)
}
SessionVariableChanged::SessionVariableChanged(const SessionVariableChanged& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_param()) {
    param_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.param_);
  }
  if (from.has_value()) {
    value_ = new ::Mysqlx::Datatypes::Scalar(*from.value_);
  } else {
    value_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Notice.SessionVariableChanged)
}

void SessionVariableChanged::SharedCtor() {
  _cached_size_ = 0;
  param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = NULL;
}

SessionVariableChanged::~SessionVariableChanged() {
  // @@protoc_insertion_point(destructor:Mysqlx.Notice.SessionVariableChanged)
  SharedDtor();
}

void SessionVariableChanged::SharedDtor() {
  param_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete value_;
  }
}

void SessionVariableChanged::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionVariableChanged::descriptor() {
  protobuf_mysqlx_5fnotice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fnotice_2eproto::file_level_metadata[2].descriptor;
}

const SessionVariableChanged& SessionVariableChanged::default_instance() {
  protobuf_mysqlx_5fnotice_2eproto::InitDefaults();
  return *internal_default_instance();
}

SessionVariableChanged* SessionVariableChanged::New(::google::protobuf::Arena* arena) const {
  SessionVariableChanged* n = new SessionVariableChanged;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SessionVariableChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Notice.SessionVariableChanged)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_param()) {
      GOOGLE_DCHECK(!param_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*param_.UnsafeRawStringPointer())->clear();
    }
    if (has_value()) {
      GOOGLE_DCHECK(value_ != NULL);
      value_->::Mysqlx::Datatypes::Scalar::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SessionVariableChanged::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Notice.SessionVariableChanged)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string param = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_param()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->param().data(), this->param().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Mysqlx.Notice.SessionVariableChanged.param");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Mysqlx.Datatypes.Scalar value = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Notice.SessionVariableChanged)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Notice.SessionVariableChanged)
  return false;
#undef DO_
}

void SessionVariableChanged::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Notice.SessionVariableChanged)
  // required string param = 1;
  if (has_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param().data(), this->param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Mysqlx.Notice.SessionVariableChanged.param");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->param(), output);
  }

  // optional .Mysqlx.Datatypes.Scalar value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->value_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Notice.SessionVariableChanged)
}

::google::protobuf::uint8* SessionVariableChanged::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Notice.SessionVariableChanged)
  // required string param = 1;
  if (has_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param().data(), this->param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Mysqlx.Notice.SessionVariableChanged.param");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->param(), target);
  }

  // optional .Mysqlx.Datatypes.Scalar value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->value_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Notice.SessionVariableChanged)
  return target;
}

size_t SessionVariableChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Notice.SessionVariableChanged)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required string param = 1;
  if (has_param()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->param());
  }
  // optional .Mysqlx.Datatypes.Scalar value = 2;
  if (has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->value_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionVariableChanged::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mysqlx.Notice.SessionVariableChanged)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionVariableChanged* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SessionVariableChanged>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mysqlx.Notice.SessionVariableChanged)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mysqlx.Notice.SessionVariableChanged)
    MergeFrom(*source);
  }
}

void SessionVariableChanged::MergeFrom(const SessionVariableChanged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Notice.SessionVariableChanged)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_param()) {
      set_has_param();
      param_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.param_);
    }
    if (from.has_value()) {
      mutable_value()->::Mysqlx::Datatypes::Scalar::MergeFrom(from.value());
    }
  }
}

void SessionVariableChanged::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mysqlx.Notice.SessionVariableChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionVariableChanged::CopyFrom(const SessionVariableChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Notice.SessionVariableChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionVariableChanged::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_value()) {
    if (!this->value_->IsInitialized()) return false;
  }
  return true;
}

void SessionVariableChanged::Swap(SessionVariableChanged* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SessionVariableChanged::InternalSwap(SessionVariableChanged* other) {
  param_.Swap(&other->param_);
  std::swap(value_, other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SessionVariableChanged::GetMetadata() const {
  protobuf_mysqlx_5fnotice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fnotice_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SessionVariableChanged

// required string param = 1;
bool SessionVariableChanged::has_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SessionVariableChanged::set_has_param() {
  _has_bits_[0] |= 0x00000001u;
}
void SessionVariableChanged::clear_has_param() {
  _has_bits_[0] &= ~0x00000001u;
}
void SessionVariableChanged::clear_param() {
  param_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_param();
}
const ::std::string& SessionVariableChanged::param() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Notice.SessionVariableChanged.param)
  return param_.GetNoArena();
}
void SessionVariableChanged::set_param(const ::std::string& value) {
  set_has_param();
  param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Mysqlx.Notice.SessionVariableChanged.param)
}
#if LANG_CXX11
void SessionVariableChanged::set_param(::std::string&& value) {
  set_has_param();
  param_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mysqlx.Notice.SessionVariableChanged.param)
}
#endif
void SessionVariableChanged::set_param(const char* value) {
  set_has_param();
  param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mysqlx.Notice.SessionVariableChanged.param)
}
void SessionVariableChanged::set_param(const char* value, size_t size) {
  set_has_param();
  param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Notice.SessionVariableChanged.param)
}
::std::string* SessionVariableChanged::mutable_param() {
  set_has_param();
  // @@protoc_insertion_point(field_mutable:Mysqlx.Notice.SessionVariableChanged.param)
  return param_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SessionVariableChanged::release_param() {
  // @@protoc_insertion_point(field_release:Mysqlx.Notice.SessionVariableChanged.param)
  clear_has_param();
  return param_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SessionVariableChanged::set_allocated_param(::std::string* param) {
  if (param != NULL) {
    set_has_param();
  } else {
    clear_has_param();
  }
  param_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), param);
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Notice.SessionVariableChanged.param)
}

// optional .Mysqlx.Datatypes.Scalar value = 2;
bool SessionVariableChanged::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SessionVariableChanged::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void SessionVariableChanged::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void SessionVariableChanged::clear_value() {
  if (value_ != NULL) value_->::Mysqlx::Datatypes::Scalar::Clear();
  clear_has_value();
}
const ::Mysqlx::Datatypes::Scalar& SessionVariableChanged::value() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Notice.SessionVariableChanged.value)
  return value_ != NULL ? *value_
                         : *::Mysqlx::Datatypes::Scalar::internal_default_instance();
}
::Mysqlx::Datatypes::Scalar* SessionVariableChanged::mutable_value() {
  set_has_value();
  if (value_ == NULL) {
    value_ = new ::Mysqlx::Datatypes::Scalar;
  }
  // @@protoc_insertion_point(field_mutable:Mysqlx.Notice.SessionVariableChanged.value)
  return value_;
}
::Mysqlx::Datatypes::Scalar* SessionVariableChanged::release_value() {
  // @@protoc_insertion_point(field_release:Mysqlx.Notice.SessionVariableChanged.value)
  clear_has_value();
  ::Mysqlx::Datatypes::Scalar* temp = value_;
  value_ = NULL;
  return temp;
}
void SessionVariableChanged::set_allocated_value(::Mysqlx::Datatypes::Scalar* value) {
  delete value_;
  value_ = value;
  if (value) {
    set_has_value();
  } else {
    clear_has_value();
  }
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Notice.SessionVariableChanged.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SessionStateChanged::kParamFieldNumber;
const int SessionStateChanged::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SessionStateChanged::SessionStateChanged()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mysqlx_5fnotice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Notice.SessionStateChanged)
}
SessionStateChanged::SessionStateChanged(const SessionStateChanged& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_value()) {
    value_ = new ::Mysqlx::Datatypes::Scalar(*from.value_);
  } else {
    value_ = NULL;
  }
  param_ = from.param_;
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Notice.SessionStateChanged)
}

void SessionStateChanged::SharedCtor() {
  _cached_size_ = 0;
  value_ = NULL;
  param_ = 1;
}

SessionStateChanged::~SessionStateChanged() {
  // @@protoc_insertion_point(destructor:Mysqlx.Notice.SessionStateChanged)
  SharedDtor();
}

void SessionStateChanged::SharedDtor() {
  if (this != internal_default_instance()) {
    delete value_;
  }
}

void SessionStateChanged::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionStateChanged::descriptor() {
  protobuf_mysqlx_5fnotice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fnotice_2eproto::file_level_metadata[3].descriptor;
}

const SessionStateChanged& SessionStateChanged::default_instance() {
  protobuf_mysqlx_5fnotice_2eproto::InitDefaults();
  return *internal_default_instance();
}

SessionStateChanged* SessionStateChanged::New(::google::protobuf::Arena* arena) const {
  SessionStateChanged* n = new SessionStateChanged;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SessionStateChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Notice.SessionStateChanged)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_value()) {
      GOOGLE_DCHECK(value_ != NULL);
      value_->::Mysqlx::Datatypes::Scalar::Clear();
    }
    param_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SessionStateChanged::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Notice.SessionStateChanged)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Mysqlx.Notice.SessionStateChanged.Parameter param = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Mysqlx::Notice::SessionStateChanged_Parameter_IsValid(value)) {
            set_param(static_cast< ::Mysqlx::Notice::SessionStateChanged_Parameter >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Mysqlx.Datatypes.Scalar value = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Notice.SessionStateChanged)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Notice.SessionStateChanged)
  return false;
#undef DO_
}

void SessionStateChanged::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Notice.SessionStateChanged)
  // required .Mysqlx.Notice.SessionStateChanged.Parameter param = 1;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->param(), output);
  }

  // optional .Mysqlx.Datatypes.Scalar value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->value_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Notice.SessionStateChanged)
}

::google::protobuf::uint8* SessionStateChanged::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Notice.SessionStateChanged)
  // required .Mysqlx.Notice.SessionStateChanged.Parameter param = 1;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->param(), target);
  }

  // optional .Mysqlx.Datatypes.Scalar value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->value_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Notice.SessionStateChanged)
  return target;
}

size_t SessionStateChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Notice.SessionStateChanged)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .Mysqlx.Notice.SessionStateChanged.Parameter param = 1;
  if (has_param()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
  }
  // optional .Mysqlx.Datatypes.Scalar value = 2;
  if (has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->value_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionStateChanged::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mysqlx.Notice.SessionStateChanged)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionStateChanged* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SessionStateChanged>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mysqlx.Notice.SessionStateChanged)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mysqlx.Notice.SessionStateChanged)
    MergeFrom(*source);
  }
}

void SessionStateChanged::MergeFrom(const SessionStateChanged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Notice.SessionStateChanged)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_value()) {
      mutable_value()->::Mysqlx::Datatypes::Scalar::MergeFrom(from.value());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
}

void SessionStateChanged::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mysqlx.Notice.SessionStateChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionStateChanged::CopyFrom(const SessionStateChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Notice.SessionStateChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionStateChanged::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_value()) {
    if (!this->value_->IsInitialized()) return false;
  }
  return true;
}

void SessionStateChanged::Swap(SessionStateChanged* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SessionStateChanged::InternalSwap(SessionStateChanged* other) {
  std::swap(value_, other->value_);
  std::swap(param_, other->param_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SessionStateChanged::GetMetadata() const {
  protobuf_mysqlx_5fnotice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fnotice_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SessionStateChanged

// required .Mysqlx.Notice.SessionStateChanged.Parameter param = 1;
bool SessionStateChanged::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SessionStateChanged::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
void SessionStateChanged::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
void SessionStateChanged::clear_param() {
  param_ = 1;
  clear_has_param();
}
::Mysqlx::Notice::SessionStateChanged_Parameter SessionStateChanged::param() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Notice.SessionStateChanged.param)
  return static_cast< ::Mysqlx::Notice::SessionStateChanged_Parameter >(param_);
}
void SessionStateChanged::set_param(::Mysqlx::Notice::SessionStateChanged_Parameter value) {
  assert(::Mysqlx::Notice::SessionStateChanged_Parameter_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Mysqlx.Notice.SessionStateChanged.param)
}

// optional .Mysqlx.Datatypes.Scalar value = 2;
bool SessionStateChanged::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SessionStateChanged::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
void SessionStateChanged::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
void SessionStateChanged::clear_value() {
  if (value_ != NULL) value_->::Mysqlx::Datatypes::Scalar::Clear();
  clear_has_value();
}
const ::Mysqlx::Datatypes::Scalar& SessionStateChanged::value() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Notice.SessionStateChanged.value)
  return value_ != NULL ? *value_
                         : *::Mysqlx::Datatypes::Scalar::internal_default_instance();
}
::Mysqlx::Datatypes::Scalar* SessionStateChanged::mutable_value() {
  set_has_value();
  if (value_ == NULL) {
    value_ = new ::Mysqlx::Datatypes::Scalar;
  }
  // @@protoc_insertion_point(field_mutable:Mysqlx.Notice.SessionStateChanged.value)
  return value_;
}
::Mysqlx::Datatypes::Scalar* SessionStateChanged::release_value() {
  // @@protoc_insertion_point(field_release:Mysqlx.Notice.SessionStateChanged.value)
  clear_has_value();
  ::Mysqlx::Datatypes::Scalar* temp = value_;
  value_ = NULL;
  return temp;
}
void SessionStateChanged::set_allocated_value(::Mysqlx::Datatypes::Scalar* value) {
  delete value_;
  value_ = value;
  if (value) {
    set_has_value();
  } else {
    clear_has_value();
  }
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Notice.SessionStateChanged.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Notice
}  // namespace Mysqlx

// @@protoc_insertion_point(global_scope)
