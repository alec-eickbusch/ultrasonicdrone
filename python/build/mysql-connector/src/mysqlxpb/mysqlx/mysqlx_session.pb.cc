// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysqlx_session.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mysqlx_session.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Mysqlx {
namespace Session {
class AuthenticateStartDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AuthenticateStart> {
} _AuthenticateStart_default_instance_;
class AuthenticateContinueDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AuthenticateContinue> {
} _AuthenticateContinue_default_instance_;
class AuthenticateOkDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AuthenticateOk> {
} _AuthenticateOk_default_instance_;
class ResetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Reset> {
} _Reset_default_instance_;
class CloseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Close> {
} _Close_default_instance_;

namespace protobuf_mysqlx_5fsession_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateStart, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateStart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateStart, mech_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateStart, auth_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateStart, initial_response_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateContinue, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateContinue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateContinue, auth_data_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateOk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateOk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateOk, auth_data_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reset, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Close, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Close, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(AuthenticateStart)},
  { 10, 15, sizeof(AuthenticateContinue)},
  { 16, 21, sizeof(AuthenticateOk)},
  { 22, 26, sizeof(Reset)},
  { 26, 30, sizeof(Close)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_AuthenticateStart_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AuthenticateContinue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AuthenticateOk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Reset_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Close_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "mysqlx_session.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace

void TableStruct::Shutdown() {
  _AuthenticateStart_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _AuthenticateContinue_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _AuthenticateOk_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Reset_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Close_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _AuthenticateStart_default_instance_.DefaultConstruct();
  _AuthenticateContinue_default_instance_.DefaultConstruct();
  _AuthenticateOk_default_instance_.DefaultConstruct();
  _Reset_default_instance_.DefaultConstruct();
  _Close_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\024mysqlx_session.proto\022\016Mysqlx.Session\"S"
      "\n\021AuthenticateStart\022\021\n\tmech_name\030\001 \002(\t\022\021"
      "\n\tauth_data\030\002 \001(\014\022\030\n\020initial_response\030\003 "
      "\001(\014\")\n\024AuthenticateContinue\022\021\n\tauth_data"
      "\030\001 \002(\014\"#\n\016AuthenticateOk\022\021\n\tauth_data\030\001 "
      "\001(\014\"\007\n\005Reset\"\007\n\005CloseB\036\n\034com.mysql.cj.my"
      "sqlx.protobuf"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 253);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mysqlx_session.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_mysqlx_5fsession_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthenticateStart::kMechNameFieldNumber;
const int AuthenticateStart::kAuthDataFieldNumber;
const int AuthenticateStart::kInitialResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthenticateStart::AuthenticateStart()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mysqlx_5fsession_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Session.AuthenticateStart)
}
AuthenticateStart::AuthenticateStart(const AuthenticateStart& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mech_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mech_name()) {
    mech_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mech_name_);
  }
  auth_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_auth_data()) {
    auth_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auth_data_);
  }
  initial_response_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_initial_response()) {
    initial_response_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.initial_response_);
  }
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Session.AuthenticateStart)
}

void AuthenticateStart::SharedCtor() {
  _cached_size_ = 0;
  mech_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auth_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  initial_response_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AuthenticateStart::~AuthenticateStart() {
  // @@protoc_insertion_point(destructor:Mysqlx.Session.AuthenticateStart)
  SharedDtor();
}

void AuthenticateStart::SharedDtor() {
  mech_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auth_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  initial_response_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AuthenticateStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthenticateStart::descriptor() {
  protobuf_mysqlx_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fsession_2eproto::file_level_metadata[0].descriptor;
}

const AuthenticateStart& AuthenticateStart::default_instance() {
  protobuf_mysqlx_5fsession_2eproto::InitDefaults();
  return *internal_default_instance();
}

AuthenticateStart* AuthenticateStart::New(::google::protobuf::Arena* arena) const {
  AuthenticateStart* n = new AuthenticateStart;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthenticateStart::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Session.AuthenticateStart)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_mech_name()) {
      GOOGLE_DCHECK(!mech_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mech_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_auth_data()) {
      GOOGLE_DCHECK(!auth_data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*auth_data_.UnsafeRawStringPointer())->clear();
    }
    if (has_initial_response()) {
      GOOGLE_DCHECK(!initial_response_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*initial_response_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AuthenticateStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Session.AuthenticateStart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string mech_name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mech_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mech_name().data(), this->mech_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Mysqlx.Session.AuthenticateStart.mech_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes auth_data = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_auth_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes initial_response = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_initial_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Session.AuthenticateStart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Session.AuthenticateStart)
  return false;
#undef DO_
}

void AuthenticateStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Session.AuthenticateStart)
  // required string mech_name = 1;
  if (has_mech_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mech_name().data(), this->mech_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Mysqlx.Session.AuthenticateStart.mech_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mech_name(), output);
  }

  // optional bytes auth_data = 2;
  if (has_auth_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->auth_data(), output);
  }

  // optional bytes initial_response = 3;
  if (has_initial_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->initial_response(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Session.AuthenticateStart)
}

::google::protobuf::uint8* AuthenticateStart::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Session.AuthenticateStart)
  // required string mech_name = 1;
  if (has_mech_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mech_name().data(), this->mech_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Mysqlx.Session.AuthenticateStart.mech_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mech_name(), target);
  }

  // optional bytes auth_data = 2;
  if (has_auth_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->auth_data(), target);
  }

  // optional bytes initial_response = 3;
  if (has_initial_response()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->initial_response(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Session.AuthenticateStart)
  return target;
}

size_t AuthenticateStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Session.AuthenticateStart)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required string mech_name = 1;
  if (has_mech_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mech_name());
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional bytes auth_data = 2;
    if (has_auth_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->auth_data());
    }

    // optional bytes initial_response = 3;
    if (has_initial_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->initial_response());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthenticateStart::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mysqlx.Session.AuthenticateStart)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthenticateStart* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthenticateStart>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mysqlx.Session.AuthenticateStart)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mysqlx.Session.AuthenticateStart)
    MergeFrom(*source);
  }
}

void AuthenticateStart::MergeFrom(const AuthenticateStart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Session.AuthenticateStart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_mech_name()) {
      set_has_mech_name();
      mech_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mech_name_);
    }
    if (from.has_auth_data()) {
      set_has_auth_data();
      auth_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auth_data_);
    }
    if (from.has_initial_response()) {
      set_has_initial_response();
      initial_response_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.initial_response_);
    }
  }
}

void AuthenticateStart::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mysqlx.Session.AuthenticateStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthenticateStart::CopyFrom(const AuthenticateStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Session.AuthenticateStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticateStart::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void AuthenticateStart::Swap(AuthenticateStart* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthenticateStart::InternalSwap(AuthenticateStart* other) {
  mech_name_.Swap(&other->mech_name_);
  auth_data_.Swap(&other->auth_data_);
  initial_response_.Swap(&other->initial_response_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthenticateStart::GetMetadata() const {
  protobuf_mysqlx_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fsession_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthenticateStart

// required string mech_name = 1;
bool AuthenticateStart::has_mech_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AuthenticateStart::set_has_mech_name() {
  _has_bits_[0] |= 0x00000001u;
}
void AuthenticateStart::clear_has_mech_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void AuthenticateStart::clear_mech_name() {
  mech_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mech_name();
}
const ::std::string& AuthenticateStart::mech_name() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Session.AuthenticateStart.mech_name)
  return mech_name_.GetNoArena();
}
void AuthenticateStart::set_mech_name(const ::std::string& value) {
  set_has_mech_name();
  mech_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Mysqlx.Session.AuthenticateStart.mech_name)
}
#if LANG_CXX11
void AuthenticateStart::set_mech_name(::std::string&& value) {
  set_has_mech_name();
  mech_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mysqlx.Session.AuthenticateStart.mech_name)
}
#endif
void AuthenticateStart::set_mech_name(const char* value) {
  set_has_mech_name();
  mech_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mysqlx.Session.AuthenticateStart.mech_name)
}
void AuthenticateStart::set_mech_name(const char* value, size_t size) {
  set_has_mech_name();
  mech_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Session.AuthenticateStart.mech_name)
}
::std::string* AuthenticateStart::mutable_mech_name() {
  set_has_mech_name();
  // @@protoc_insertion_point(field_mutable:Mysqlx.Session.AuthenticateStart.mech_name)
  return mech_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthenticateStart::release_mech_name() {
  // @@protoc_insertion_point(field_release:Mysqlx.Session.AuthenticateStart.mech_name)
  clear_has_mech_name();
  return mech_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthenticateStart::set_allocated_mech_name(::std::string* mech_name) {
  if (mech_name != NULL) {
    set_has_mech_name();
  } else {
    clear_has_mech_name();
  }
  mech_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mech_name);
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Session.AuthenticateStart.mech_name)
}

// optional bytes auth_data = 2;
bool AuthenticateStart::has_auth_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AuthenticateStart::set_has_auth_data() {
  _has_bits_[0] |= 0x00000002u;
}
void AuthenticateStart::clear_has_auth_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void AuthenticateStart::clear_auth_data() {
  auth_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_auth_data();
}
const ::std::string& AuthenticateStart::auth_data() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Session.AuthenticateStart.auth_data)
  return auth_data_.GetNoArena();
}
void AuthenticateStart::set_auth_data(const ::std::string& value) {
  set_has_auth_data();
  auth_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Mysqlx.Session.AuthenticateStart.auth_data)
}
#if LANG_CXX11
void AuthenticateStart::set_auth_data(::std::string&& value) {
  set_has_auth_data();
  auth_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mysqlx.Session.AuthenticateStart.auth_data)
}
#endif
void AuthenticateStart::set_auth_data(const char* value) {
  set_has_auth_data();
  auth_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mysqlx.Session.AuthenticateStart.auth_data)
}
void AuthenticateStart::set_auth_data(const void* value, size_t size) {
  set_has_auth_data();
  auth_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Session.AuthenticateStart.auth_data)
}
::std::string* AuthenticateStart::mutable_auth_data() {
  set_has_auth_data();
  // @@protoc_insertion_point(field_mutable:Mysqlx.Session.AuthenticateStart.auth_data)
  return auth_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthenticateStart::release_auth_data() {
  // @@protoc_insertion_point(field_release:Mysqlx.Session.AuthenticateStart.auth_data)
  clear_has_auth_data();
  return auth_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthenticateStart::set_allocated_auth_data(::std::string* auth_data) {
  if (auth_data != NULL) {
    set_has_auth_data();
  } else {
    clear_has_auth_data();
  }
  auth_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), auth_data);
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Session.AuthenticateStart.auth_data)
}

// optional bytes initial_response = 3;
bool AuthenticateStart::has_initial_response() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AuthenticateStart::set_has_initial_response() {
  _has_bits_[0] |= 0x00000004u;
}
void AuthenticateStart::clear_has_initial_response() {
  _has_bits_[0] &= ~0x00000004u;
}
void AuthenticateStart::clear_initial_response() {
  initial_response_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_initial_response();
}
const ::std::string& AuthenticateStart::initial_response() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Session.AuthenticateStart.initial_response)
  return initial_response_.GetNoArena();
}
void AuthenticateStart::set_initial_response(const ::std::string& value) {
  set_has_initial_response();
  initial_response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Mysqlx.Session.AuthenticateStart.initial_response)
}
#if LANG_CXX11
void AuthenticateStart::set_initial_response(::std::string&& value) {
  set_has_initial_response();
  initial_response_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mysqlx.Session.AuthenticateStart.initial_response)
}
#endif
void AuthenticateStart::set_initial_response(const char* value) {
  set_has_initial_response();
  initial_response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mysqlx.Session.AuthenticateStart.initial_response)
}
void AuthenticateStart::set_initial_response(const void* value, size_t size) {
  set_has_initial_response();
  initial_response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Session.AuthenticateStart.initial_response)
}
::std::string* AuthenticateStart::mutable_initial_response() {
  set_has_initial_response();
  // @@protoc_insertion_point(field_mutable:Mysqlx.Session.AuthenticateStart.initial_response)
  return initial_response_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthenticateStart::release_initial_response() {
  // @@protoc_insertion_point(field_release:Mysqlx.Session.AuthenticateStart.initial_response)
  clear_has_initial_response();
  return initial_response_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthenticateStart::set_allocated_initial_response(::std::string* initial_response) {
  if (initial_response != NULL) {
    set_has_initial_response();
  } else {
    clear_has_initial_response();
  }
  initial_response_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), initial_response);
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Session.AuthenticateStart.initial_response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthenticateContinue::kAuthDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthenticateContinue::AuthenticateContinue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mysqlx_5fsession_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Session.AuthenticateContinue)
}
AuthenticateContinue::AuthenticateContinue(const AuthenticateContinue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  auth_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_auth_data()) {
    auth_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auth_data_);
  }
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Session.AuthenticateContinue)
}

void AuthenticateContinue::SharedCtor() {
  _cached_size_ = 0;
  auth_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AuthenticateContinue::~AuthenticateContinue() {
  // @@protoc_insertion_point(destructor:Mysqlx.Session.AuthenticateContinue)
  SharedDtor();
}

void AuthenticateContinue::SharedDtor() {
  auth_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AuthenticateContinue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthenticateContinue::descriptor() {
  protobuf_mysqlx_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fsession_2eproto::file_level_metadata[1].descriptor;
}

const AuthenticateContinue& AuthenticateContinue::default_instance() {
  protobuf_mysqlx_5fsession_2eproto::InitDefaults();
  return *internal_default_instance();
}

AuthenticateContinue* AuthenticateContinue::New(::google::protobuf::Arena* arena) const {
  AuthenticateContinue* n = new AuthenticateContinue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthenticateContinue::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Session.AuthenticateContinue)
  if (has_auth_data()) {
    GOOGLE_DCHECK(!auth_data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*auth_data_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AuthenticateContinue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Session.AuthenticateContinue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes auth_data = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_auth_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Session.AuthenticateContinue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Session.AuthenticateContinue)
  return false;
#undef DO_
}

void AuthenticateContinue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Session.AuthenticateContinue)
  // required bytes auth_data = 1;
  if (has_auth_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->auth_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Session.AuthenticateContinue)
}

::google::protobuf::uint8* AuthenticateContinue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Session.AuthenticateContinue)
  // required bytes auth_data = 1;
  if (has_auth_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->auth_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Session.AuthenticateContinue)
  return target;
}

size_t AuthenticateContinue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Session.AuthenticateContinue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required bytes auth_data = 1;
  if (has_auth_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->auth_data());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthenticateContinue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mysqlx.Session.AuthenticateContinue)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthenticateContinue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthenticateContinue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mysqlx.Session.AuthenticateContinue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mysqlx.Session.AuthenticateContinue)
    MergeFrom(*source);
  }
}

void AuthenticateContinue::MergeFrom(const AuthenticateContinue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Session.AuthenticateContinue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_auth_data()) {
    set_has_auth_data();
    auth_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auth_data_);
  }
}

void AuthenticateContinue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mysqlx.Session.AuthenticateContinue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthenticateContinue::CopyFrom(const AuthenticateContinue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Session.AuthenticateContinue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticateContinue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void AuthenticateContinue::Swap(AuthenticateContinue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthenticateContinue::InternalSwap(AuthenticateContinue* other) {
  auth_data_.Swap(&other->auth_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthenticateContinue::GetMetadata() const {
  protobuf_mysqlx_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fsession_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthenticateContinue

// required bytes auth_data = 1;
bool AuthenticateContinue::has_auth_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AuthenticateContinue::set_has_auth_data() {
  _has_bits_[0] |= 0x00000001u;
}
void AuthenticateContinue::clear_has_auth_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void AuthenticateContinue::clear_auth_data() {
  auth_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_auth_data();
}
const ::std::string& AuthenticateContinue::auth_data() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Session.AuthenticateContinue.auth_data)
  return auth_data_.GetNoArena();
}
void AuthenticateContinue::set_auth_data(const ::std::string& value) {
  set_has_auth_data();
  auth_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Mysqlx.Session.AuthenticateContinue.auth_data)
}
#if LANG_CXX11
void AuthenticateContinue::set_auth_data(::std::string&& value) {
  set_has_auth_data();
  auth_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mysqlx.Session.AuthenticateContinue.auth_data)
}
#endif
void AuthenticateContinue::set_auth_data(const char* value) {
  set_has_auth_data();
  auth_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mysqlx.Session.AuthenticateContinue.auth_data)
}
void AuthenticateContinue::set_auth_data(const void* value, size_t size) {
  set_has_auth_data();
  auth_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Session.AuthenticateContinue.auth_data)
}
::std::string* AuthenticateContinue::mutable_auth_data() {
  set_has_auth_data();
  // @@protoc_insertion_point(field_mutable:Mysqlx.Session.AuthenticateContinue.auth_data)
  return auth_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthenticateContinue::release_auth_data() {
  // @@protoc_insertion_point(field_release:Mysqlx.Session.AuthenticateContinue.auth_data)
  clear_has_auth_data();
  return auth_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthenticateContinue::set_allocated_auth_data(::std::string* auth_data) {
  if (auth_data != NULL) {
    set_has_auth_data();
  } else {
    clear_has_auth_data();
  }
  auth_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), auth_data);
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Session.AuthenticateContinue.auth_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthenticateOk::kAuthDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthenticateOk::AuthenticateOk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mysqlx_5fsession_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Session.AuthenticateOk)
}
AuthenticateOk::AuthenticateOk(const AuthenticateOk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  auth_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_auth_data()) {
    auth_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auth_data_);
  }
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Session.AuthenticateOk)
}

void AuthenticateOk::SharedCtor() {
  _cached_size_ = 0;
  auth_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AuthenticateOk::~AuthenticateOk() {
  // @@protoc_insertion_point(destructor:Mysqlx.Session.AuthenticateOk)
  SharedDtor();
}

void AuthenticateOk::SharedDtor() {
  auth_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AuthenticateOk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthenticateOk::descriptor() {
  protobuf_mysqlx_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fsession_2eproto::file_level_metadata[2].descriptor;
}

const AuthenticateOk& AuthenticateOk::default_instance() {
  protobuf_mysqlx_5fsession_2eproto::InitDefaults();
  return *internal_default_instance();
}

AuthenticateOk* AuthenticateOk::New(::google::protobuf::Arena* arena) const {
  AuthenticateOk* n = new AuthenticateOk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthenticateOk::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Session.AuthenticateOk)
  if (has_auth_data()) {
    GOOGLE_DCHECK(!auth_data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*auth_data_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AuthenticateOk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Session.AuthenticateOk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes auth_data = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_auth_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Session.AuthenticateOk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Session.AuthenticateOk)
  return false;
#undef DO_
}

void AuthenticateOk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Session.AuthenticateOk)
  // optional bytes auth_data = 1;
  if (has_auth_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->auth_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Session.AuthenticateOk)
}

::google::protobuf::uint8* AuthenticateOk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Session.AuthenticateOk)
  // optional bytes auth_data = 1;
  if (has_auth_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->auth_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Session.AuthenticateOk)
  return target;
}

size_t AuthenticateOk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Session.AuthenticateOk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional bytes auth_data = 1;
  if (has_auth_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->auth_data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthenticateOk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mysqlx.Session.AuthenticateOk)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthenticateOk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthenticateOk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mysqlx.Session.AuthenticateOk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mysqlx.Session.AuthenticateOk)
    MergeFrom(*source);
  }
}

void AuthenticateOk::MergeFrom(const AuthenticateOk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Session.AuthenticateOk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_auth_data()) {
    set_has_auth_data();
    auth_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auth_data_);
  }
}

void AuthenticateOk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mysqlx.Session.AuthenticateOk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthenticateOk::CopyFrom(const AuthenticateOk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Session.AuthenticateOk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticateOk::IsInitialized() const {
  return true;
}

void AuthenticateOk::Swap(AuthenticateOk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthenticateOk::InternalSwap(AuthenticateOk* other) {
  auth_data_.Swap(&other->auth_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthenticateOk::GetMetadata() const {
  protobuf_mysqlx_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fsession_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthenticateOk

// optional bytes auth_data = 1;
bool AuthenticateOk::has_auth_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AuthenticateOk::set_has_auth_data() {
  _has_bits_[0] |= 0x00000001u;
}
void AuthenticateOk::clear_has_auth_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void AuthenticateOk::clear_auth_data() {
  auth_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_auth_data();
}
const ::std::string& AuthenticateOk::auth_data() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Session.AuthenticateOk.auth_data)
  return auth_data_.GetNoArena();
}
void AuthenticateOk::set_auth_data(const ::std::string& value) {
  set_has_auth_data();
  auth_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Mysqlx.Session.AuthenticateOk.auth_data)
}
#if LANG_CXX11
void AuthenticateOk::set_auth_data(::std::string&& value) {
  set_has_auth_data();
  auth_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mysqlx.Session.AuthenticateOk.auth_data)
}
#endif
void AuthenticateOk::set_auth_data(const char* value) {
  set_has_auth_data();
  auth_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mysqlx.Session.AuthenticateOk.auth_data)
}
void AuthenticateOk::set_auth_data(const void* value, size_t size) {
  set_has_auth_data();
  auth_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Session.AuthenticateOk.auth_data)
}
::std::string* AuthenticateOk::mutable_auth_data() {
  set_has_auth_data();
  // @@protoc_insertion_point(field_mutable:Mysqlx.Session.AuthenticateOk.auth_data)
  return auth_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthenticateOk::release_auth_data() {
  // @@protoc_insertion_point(field_release:Mysqlx.Session.AuthenticateOk.auth_data)
  clear_has_auth_data();
  return auth_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthenticateOk::set_allocated_auth_data(::std::string* auth_data) {
  if (auth_data != NULL) {
    set_has_auth_data();
  } else {
    clear_has_auth_data();
  }
  auth_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), auth_data);
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Session.AuthenticateOk.auth_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Reset::Reset()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mysqlx_5fsession_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Session.Reset)
}
Reset::Reset(const Reset& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Session.Reset)
}

void Reset::SharedCtor() {
  _cached_size_ = 0;
}

Reset::~Reset() {
  // @@protoc_insertion_point(destructor:Mysqlx.Session.Reset)
  SharedDtor();
}

void Reset::SharedDtor() {
}

void Reset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Reset::descriptor() {
  protobuf_mysqlx_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fsession_2eproto::file_level_metadata[3].descriptor;
}

const Reset& Reset::default_instance() {
  protobuf_mysqlx_5fsession_2eproto::InitDefaults();
  return *internal_default_instance();
}

Reset* Reset::New(::google::protobuf::Arena* arena) const {
  Reset* n = new Reset;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Reset::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Session.Reset)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Reset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Session.Reset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Session.Reset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Session.Reset)
  return false;
#undef DO_
}

void Reset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Session.Reset)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Session.Reset)
}

::google::protobuf::uint8* Reset::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Session.Reset)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Session.Reset)
  return target;
}

size_t Reset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Session.Reset)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Reset::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mysqlx.Session.Reset)
  GOOGLE_DCHECK_NE(&from, this);
  const Reset* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Reset>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mysqlx.Session.Reset)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mysqlx.Session.Reset)
    MergeFrom(*source);
  }
}

void Reset::MergeFrom(const Reset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Session.Reset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void Reset::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mysqlx.Session.Reset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reset::CopyFrom(const Reset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Session.Reset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reset::IsInitialized() const {
  return true;
}

void Reset::Swap(Reset* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Reset::InternalSwap(Reset* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Reset::GetMetadata() const {
  protobuf_mysqlx_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fsession_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Reset

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Close::Close()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mysqlx_5fsession_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Session.Close)
}
Close::Close(const Close& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Session.Close)
}

void Close::SharedCtor() {
  _cached_size_ = 0;
}

Close::~Close() {
  // @@protoc_insertion_point(destructor:Mysqlx.Session.Close)
  SharedDtor();
}

void Close::SharedDtor() {
}

void Close::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Close::descriptor() {
  protobuf_mysqlx_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fsession_2eproto::file_level_metadata[4].descriptor;
}

const Close& Close::default_instance() {
  protobuf_mysqlx_5fsession_2eproto::InitDefaults();
  return *internal_default_instance();
}

Close* Close::New(::google::protobuf::Arena* arena) const {
  Close* n = new Close;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Close::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Session.Close)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Close::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Session.Close)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Session.Close)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Session.Close)
  return false;
#undef DO_
}

void Close::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Session.Close)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Session.Close)
}

::google::protobuf::uint8* Close::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Session.Close)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Session.Close)
  return target;
}

size_t Close::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Session.Close)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Close::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mysqlx.Session.Close)
  GOOGLE_DCHECK_NE(&from, this);
  const Close* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Close>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mysqlx.Session.Close)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mysqlx.Session.Close)
    MergeFrom(*source);
  }
}

void Close::MergeFrom(const Close& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Session.Close)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void Close::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mysqlx.Session.Close)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Close::CopyFrom(const Close& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Session.Close)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Close::IsInitialized() const {
  return true;
}

void Close::Swap(Close* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Close::InternalSwap(Close* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Close::GetMetadata() const {
  protobuf_mysqlx_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fsession_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Close

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Session
}  // namespace Mysqlx

// @@protoc_insertion_point(global_scope)
